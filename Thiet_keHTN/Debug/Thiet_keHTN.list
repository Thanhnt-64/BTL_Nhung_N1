
Thiet_keHTN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e29c  08000110  08000110  00010110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001984  0800e3b0  0800e3b0  0001e3b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fd34  0800fd34  00020200  2**0
                  CONTENTS
  4 .ARM          00000000  0800fd34  0800fd34  00020200  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800fd34  0800fd34  00020200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fd34  0800fd34  0001fd34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fd38  0800fd38  0001fd38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000200  20000000  0800fd3c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001f5c  20000200  0800ff3c  00020200  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000215c  0800ff3c  0002215c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020200  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b85c  00000000  00000000  00020229  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000402b  00000000  00000000  0003ba85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000019b0  00000000  00000000  0003fab0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001840  00000000  00000000  00041460  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ae98  00000000  00000000  00042ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001c55e  00000000  00000000  0005db38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00098720  00000000  00000000  0007a096  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001127b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085f4  00000000  00000000  00112808  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000200 	.word	0x20000200
 800012c:	00000000 	.word	0x00000000
 8000130:	0800e394 	.word	0x0800e394

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000204 	.word	0x20000204
 800014c:	0800e394 	.word	0x0800e394

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_fmul>:
 8000d84:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000d88:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d8c:	bf1e      	ittt	ne
 8000d8e:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d92:	ea92 0f0c 	teqne	r2, ip
 8000d96:	ea93 0f0c 	teqne	r3, ip
 8000d9a:	d06f      	beq.n	8000e7c <__aeabi_fmul+0xf8>
 8000d9c:	441a      	add	r2, r3
 8000d9e:	ea80 0c01 	eor.w	ip, r0, r1
 8000da2:	0240      	lsls	r0, r0, #9
 8000da4:	bf18      	it	ne
 8000da6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000daa:	d01e      	beq.n	8000dea <__aeabi_fmul+0x66>
 8000dac:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000db0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000db4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000db8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dbc:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000dc0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000dc4:	bf3e      	ittt	cc
 8000dc6:	0049      	lslcc	r1, r1, #1
 8000dc8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dcc:	005b      	lslcc	r3, r3, #1
 8000dce:	ea40 0001 	orr.w	r0, r0, r1
 8000dd2:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000dd6:	2afd      	cmp	r2, #253	; 0xfd
 8000dd8:	d81d      	bhi.n	8000e16 <__aeabi_fmul+0x92>
 8000dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000dde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000de2:	bf08      	it	eq
 8000de4:	f020 0001 	biceq.w	r0, r0, #1
 8000de8:	4770      	bx	lr
 8000dea:	f090 0f00 	teq	r0, #0
 8000dee:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000df2:	bf08      	it	eq
 8000df4:	0249      	lsleq	r1, r1, #9
 8000df6:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dfa:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dfe:	3a7f      	subs	r2, #127	; 0x7f
 8000e00:	bfc2      	ittt	gt
 8000e02:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e06:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e0a:	4770      	bxgt	lr
 8000e0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e10:	f04f 0300 	mov.w	r3, #0
 8000e14:	3a01      	subs	r2, #1
 8000e16:	dc5d      	bgt.n	8000ed4 <__aeabi_fmul+0x150>
 8000e18:	f112 0f19 	cmn.w	r2, #25
 8000e1c:	bfdc      	itt	le
 8000e1e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e22:	4770      	bxle	lr
 8000e24:	f1c2 0200 	rsb	r2, r2, #0
 8000e28:	0041      	lsls	r1, r0, #1
 8000e2a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e2e:	f1c2 0220 	rsb	r2, r2, #32
 8000e32:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e36:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e3a:	f140 0000 	adc.w	r0, r0, #0
 8000e3e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e42:	bf08      	it	eq
 8000e44:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e48:	4770      	bx	lr
 8000e4a:	f092 0f00 	teq	r2, #0
 8000e4e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e52:	bf02      	ittt	eq
 8000e54:	0040      	lsleq	r0, r0, #1
 8000e56:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e5a:	3a01      	subeq	r2, #1
 8000e5c:	d0f9      	beq.n	8000e52 <__aeabi_fmul+0xce>
 8000e5e:	ea40 000c 	orr.w	r0, r0, ip
 8000e62:	f093 0f00 	teq	r3, #0
 8000e66:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e6a:	bf02      	ittt	eq
 8000e6c:	0049      	lsleq	r1, r1, #1
 8000e6e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000e72:	3b01      	subeq	r3, #1
 8000e74:	d0f9      	beq.n	8000e6a <__aeabi_fmul+0xe6>
 8000e76:	ea41 010c 	orr.w	r1, r1, ip
 8000e7a:	e78f      	b.n	8000d9c <__aeabi_fmul+0x18>
 8000e7c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e80:	ea92 0f0c 	teq	r2, ip
 8000e84:	bf18      	it	ne
 8000e86:	ea93 0f0c 	teqne	r3, ip
 8000e8a:	d00a      	beq.n	8000ea2 <__aeabi_fmul+0x11e>
 8000e8c:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e90:	bf18      	it	ne
 8000e92:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e96:	d1d8      	bne.n	8000e4a <__aeabi_fmul+0xc6>
 8000e98:	ea80 0001 	eor.w	r0, r0, r1
 8000e9c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ea0:	4770      	bx	lr
 8000ea2:	f090 0f00 	teq	r0, #0
 8000ea6:	bf17      	itett	ne
 8000ea8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000eac:	4608      	moveq	r0, r1
 8000eae:	f091 0f00 	teqne	r1, #0
 8000eb2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000eb6:	d014      	beq.n	8000ee2 <__aeabi_fmul+0x15e>
 8000eb8:	ea92 0f0c 	teq	r2, ip
 8000ebc:	d101      	bne.n	8000ec2 <__aeabi_fmul+0x13e>
 8000ebe:	0242      	lsls	r2, r0, #9
 8000ec0:	d10f      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ec2:	ea93 0f0c 	teq	r3, ip
 8000ec6:	d103      	bne.n	8000ed0 <__aeabi_fmul+0x14c>
 8000ec8:	024b      	lsls	r3, r1, #9
 8000eca:	bf18      	it	ne
 8000ecc:	4608      	movne	r0, r1
 8000ece:	d108      	bne.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ed0:	ea80 0001 	eor.w	r0, r0, r1
 8000ed4:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000edc:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ee0:	4770      	bx	lr
 8000ee2:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ee6:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000eea:	4770      	bx	lr

08000eec <__aeabi_fdiv>:
 8000eec:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ef0:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ef4:	bf1e      	ittt	ne
 8000ef6:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000efa:	ea92 0f0c 	teqne	r2, ip
 8000efe:	ea93 0f0c 	teqne	r3, ip
 8000f02:	d069      	beq.n	8000fd8 <__aeabi_fdiv+0xec>
 8000f04:	eba2 0203 	sub.w	r2, r2, r3
 8000f08:	ea80 0c01 	eor.w	ip, r0, r1
 8000f0c:	0249      	lsls	r1, r1, #9
 8000f0e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f12:	d037      	beq.n	8000f84 <__aeabi_fdiv+0x98>
 8000f14:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f18:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f1c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f20:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f24:	428b      	cmp	r3, r1
 8000f26:	bf38      	it	cc
 8000f28:	005b      	lslcc	r3, r3, #1
 8000f2a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f2e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f32:	428b      	cmp	r3, r1
 8000f34:	bf24      	itt	cs
 8000f36:	1a5b      	subcs	r3, r3, r1
 8000f38:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f3c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f40:	bf24      	itt	cs
 8000f42:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f46:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f4a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f4e:	bf24      	itt	cs
 8000f50:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f54:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f58:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f5c:	bf24      	itt	cs
 8000f5e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f62:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f66:	011b      	lsls	r3, r3, #4
 8000f68:	bf18      	it	ne
 8000f6a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f6e:	d1e0      	bne.n	8000f32 <__aeabi_fdiv+0x46>
 8000f70:	2afd      	cmp	r2, #253	; 0xfd
 8000f72:	f63f af50 	bhi.w	8000e16 <__aeabi_fmul+0x92>
 8000f76:	428b      	cmp	r3, r1
 8000f78:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f7c:	bf08      	it	eq
 8000f7e:	f020 0001 	biceq.w	r0, r0, #1
 8000f82:	4770      	bx	lr
 8000f84:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000f88:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f8c:	327f      	adds	r2, #127	; 0x7f
 8000f8e:	bfc2      	ittt	gt
 8000f90:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f94:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f98:	4770      	bxgt	lr
 8000f9a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f9e:	f04f 0300 	mov.w	r3, #0
 8000fa2:	3a01      	subs	r2, #1
 8000fa4:	e737      	b.n	8000e16 <__aeabi_fmul+0x92>
 8000fa6:	f092 0f00 	teq	r2, #0
 8000faa:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fae:	bf02      	ittt	eq
 8000fb0:	0040      	lsleq	r0, r0, #1
 8000fb2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fb6:	3a01      	subeq	r2, #1
 8000fb8:	d0f9      	beq.n	8000fae <__aeabi_fdiv+0xc2>
 8000fba:	ea40 000c 	orr.w	r0, r0, ip
 8000fbe:	f093 0f00 	teq	r3, #0
 8000fc2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000fc6:	bf02      	ittt	eq
 8000fc8:	0049      	lsleq	r1, r1, #1
 8000fca:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000fce:	3b01      	subeq	r3, #1
 8000fd0:	d0f9      	beq.n	8000fc6 <__aeabi_fdiv+0xda>
 8000fd2:	ea41 010c 	orr.w	r1, r1, ip
 8000fd6:	e795      	b.n	8000f04 <__aeabi_fdiv+0x18>
 8000fd8:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fdc:	ea92 0f0c 	teq	r2, ip
 8000fe0:	d108      	bne.n	8000ff4 <__aeabi_fdiv+0x108>
 8000fe2:	0242      	lsls	r2, r0, #9
 8000fe4:	f47f af7d 	bne.w	8000ee2 <__aeabi_fmul+0x15e>
 8000fe8:	ea93 0f0c 	teq	r3, ip
 8000fec:	f47f af70 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8000ff0:	4608      	mov	r0, r1
 8000ff2:	e776      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8000ff4:	ea93 0f0c 	teq	r3, ip
 8000ff8:	d104      	bne.n	8001004 <__aeabi_fdiv+0x118>
 8000ffa:	024b      	lsls	r3, r1, #9
 8000ffc:	f43f af4c 	beq.w	8000e98 <__aeabi_fmul+0x114>
 8001000:	4608      	mov	r0, r1
 8001002:	e76e      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001004:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001008:	bf18      	it	ne
 800100a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800100e:	d1ca      	bne.n	8000fa6 <__aeabi_fdiv+0xba>
 8001010:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001014:	f47f af5c 	bne.w	8000ed0 <__aeabi_fmul+0x14c>
 8001018:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800101c:	f47f af3c 	bne.w	8000e98 <__aeabi_fmul+0x114>
 8001020:	e75f      	b.n	8000ee2 <__aeabi_fmul+0x15e>
 8001022:	bf00      	nop

08001024 <__gesf2>:
 8001024:	f04f 3cff 	mov.w	ip, #4294967295
 8001028:	e006      	b.n	8001038 <__cmpsf2+0x4>
 800102a:	bf00      	nop

0800102c <__lesf2>:
 800102c:	f04f 0c01 	mov.w	ip, #1
 8001030:	e002      	b.n	8001038 <__cmpsf2+0x4>
 8001032:	bf00      	nop

08001034 <__cmpsf2>:
 8001034:	f04f 0c01 	mov.w	ip, #1
 8001038:	f84d cd04 	str.w	ip, [sp, #-4]!
 800103c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001040:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001044:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001048:	bf18      	it	ne
 800104a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800104e:	d011      	beq.n	8001074 <__cmpsf2+0x40>
 8001050:	b001      	add	sp, #4
 8001052:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001056:	bf18      	it	ne
 8001058:	ea90 0f01 	teqne	r0, r1
 800105c:	bf58      	it	pl
 800105e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001062:	bf88      	it	hi
 8001064:	17c8      	asrhi	r0, r1, #31
 8001066:	bf38      	it	cc
 8001068:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800106c:	bf18      	it	ne
 800106e:	f040 0001 	orrne.w	r0, r0, #1
 8001072:	4770      	bx	lr
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	d102      	bne.n	8001080 <__cmpsf2+0x4c>
 800107a:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 800107e:	d105      	bne.n	800108c <__cmpsf2+0x58>
 8001080:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001084:	d1e4      	bne.n	8001050 <__cmpsf2+0x1c>
 8001086:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800108a:	d0e1      	beq.n	8001050 <__cmpsf2+0x1c>
 800108c:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop

08001094 <__aeabi_cfrcmple>:
 8001094:	4684      	mov	ip, r0
 8001096:	4608      	mov	r0, r1
 8001098:	4661      	mov	r1, ip
 800109a:	e7ff      	b.n	800109c <__aeabi_cfcmpeq>

0800109c <__aeabi_cfcmpeq>:
 800109c:	b50f      	push	{r0, r1, r2, r3, lr}
 800109e:	f7ff ffc9 	bl	8001034 <__cmpsf2>
 80010a2:	2800      	cmp	r0, #0
 80010a4:	bf48      	it	mi
 80010a6:	f110 0f00 	cmnmi.w	r0, #0
 80010aa:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010ac <__aeabi_fcmpeq>:
 80010ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010b0:	f7ff fff4 	bl	800109c <__aeabi_cfcmpeq>
 80010b4:	bf0c      	ite	eq
 80010b6:	2001      	moveq	r0, #1
 80010b8:	2000      	movne	r0, #0
 80010ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80010be:	bf00      	nop

080010c0 <__aeabi_fcmplt>:
 80010c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010c4:	f7ff ffea 	bl	800109c <__aeabi_cfcmpeq>
 80010c8:	bf34      	ite	cc
 80010ca:	2001      	movcc	r0, #1
 80010cc:	2000      	movcs	r0, #0
 80010ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80010d2:	bf00      	nop

080010d4 <__aeabi_fcmple>:
 80010d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010d8:	f7ff ffe0 	bl	800109c <__aeabi_cfcmpeq>
 80010dc:	bf94      	ite	ls
 80010de:	2001      	movls	r0, #1
 80010e0:	2000      	movhi	r0, #0
 80010e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80010e6:	bf00      	nop

080010e8 <__aeabi_fcmpge>:
 80010e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010ec:	f7ff ffd2 	bl	8001094 <__aeabi_cfrcmple>
 80010f0:	bf94      	ite	ls
 80010f2:	2001      	movls	r0, #1
 80010f4:	2000      	movhi	r0, #0
 80010f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80010fa:	bf00      	nop

080010fc <__aeabi_fcmpgt>:
 80010fc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001100:	f7ff ffc8 	bl	8001094 <__aeabi_cfrcmple>
 8001104:	bf34      	ite	cc
 8001106:	2001      	movcc	r0, #1
 8001108:	2000      	movcs	r0, #0
 800110a:	f85d fb08 	ldr.w	pc, [sp], #8
 800110e:	bf00      	nop

08001110 <__aeabi_d2lz>:
 8001110:	b538      	push	{r3, r4, r5, lr}
 8001112:	4605      	mov	r5, r0
 8001114:	460c      	mov	r4, r1
 8001116:	2200      	movs	r2, #0
 8001118:	2300      	movs	r3, #0
 800111a:	4628      	mov	r0, r5
 800111c:	4621      	mov	r1, r4
 800111e:	f7ff fc4d 	bl	80009bc <__aeabi_dcmplt>
 8001122:	b928      	cbnz	r0, 8001130 <__aeabi_d2lz+0x20>
 8001124:	4628      	mov	r0, r5
 8001126:	4621      	mov	r1, r4
 8001128:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800112c:	f000 b80a 	b.w	8001144 <__aeabi_d2ulz>
 8001130:	4628      	mov	r0, r5
 8001132:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8001136:	f000 f805 	bl	8001144 <__aeabi_d2ulz>
 800113a:	4240      	negs	r0, r0
 800113c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8001140:	bd38      	pop	{r3, r4, r5, pc}
 8001142:	bf00      	nop

08001144 <__aeabi_d2ulz>:
 8001144:	b5d0      	push	{r4, r6, r7, lr}
 8001146:	2200      	movs	r2, #0
 8001148:	4b0b      	ldr	r3, [pc, #44]	; (8001178 <__aeabi_d2ulz+0x34>)
 800114a:	4606      	mov	r6, r0
 800114c:	460f      	mov	r7, r1
 800114e:	f7ff f9c3 	bl	80004d8 <__aeabi_dmul>
 8001152:	f7ff fc99 	bl	8000a88 <__aeabi_d2uiz>
 8001156:	4604      	mov	r4, r0
 8001158:	f7ff f944 	bl	80003e4 <__aeabi_ui2d>
 800115c:	2200      	movs	r2, #0
 800115e:	4b07      	ldr	r3, [pc, #28]	; (800117c <__aeabi_d2ulz+0x38>)
 8001160:	f7ff f9ba 	bl	80004d8 <__aeabi_dmul>
 8001164:	4602      	mov	r2, r0
 8001166:	460b      	mov	r3, r1
 8001168:	4630      	mov	r0, r6
 800116a:	4639      	mov	r1, r7
 800116c:	f7fe fffc 	bl	8000168 <__aeabi_dsub>
 8001170:	f7ff fc8a 	bl	8000a88 <__aeabi_d2uiz>
 8001174:	4621      	mov	r1, r4
 8001176:	bdd0      	pop	{r4, r6, r7, pc}
 8001178:	3df00000 	.word	0x3df00000
 800117c:	41f00000 	.word	0x41f00000

08001180 <Check_Keypad_Column>:
											  {'*', '0', '#', 'D'},
                                         };


/*For specific row value sent , check all the cloumns*/
static char Check_Keypad_Column(uint8_t Row){
 8001180:	b580      	push	{r7, lr}
 8001182:	b082      	sub	sp, #8
 8001184:	af00      	add	r7, sp, #0
 8001186:	4603      	mov	r3, r0
 8001188:	71fb      	strb	r3, [r7, #7]
	if(!READ_COLUMN_1)                           //If COLUMN_1 is LOW
 800118a:	2102      	movs	r1, #2
 800118c:	481d      	ldr	r0, [pc, #116]	; (8001204 <Check_Keypad_Column+0x84>)
 800118e:	f002 f9fb 	bl	8003588 <HAL_GPIO_ReadPin>
 8001192:	4603      	mov	r3, r0
 8001194:	2b00      	cmp	r3, #0
 8001196:	d105      	bne.n	80011a4 <Check_Keypad_Column+0x24>
	{
		return Keypad_Button_Values[Row-1][0];
 8001198:	79fb      	ldrb	r3, [r7, #7]
 800119a:	3b01      	subs	r3, #1
 800119c:	4a1a      	ldr	r2, [pc, #104]	; (8001208 <Check_Keypad_Column+0x88>)
 800119e:	f812 3023 	ldrb.w	r3, [r2, r3, lsl #2]
 80011a2:	e02a      	b.n	80011fa <Check_Keypad_Column+0x7a>
	}

	if(!READ_COLUMN_2)                           //If COLUMN_2 is LOW  
 80011a4:	2104      	movs	r1, #4
 80011a6:	4817      	ldr	r0, [pc, #92]	; (8001204 <Check_Keypad_Column+0x84>)
 80011a8:	f002 f9ee 	bl	8003588 <HAL_GPIO_ReadPin>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d106      	bne.n	80011c0 <Check_Keypad_Column+0x40>
	{
		return Keypad_Button_Values[Row-1][1];
 80011b2:	79fb      	ldrb	r3, [r7, #7]
 80011b4:	3b01      	subs	r3, #1
 80011b6:	4a14      	ldr	r2, [pc, #80]	; (8001208 <Check_Keypad_Column+0x88>)
 80011b8:	009b      	lsls	r3, r3, #2
 80011ba:	4413      	add	r3, r2
 80011bc:	785b      	ldrb	r3, [r3, #1]
 80011be:	e01c      	b.n	80011fa <Check_Keypad_Column+0x7a>
	}

    if(!READ_COLUMN_3)                           //If COLUMN_3 is LOW
 80011c0:	2108      	movs	r1, #8
 80011c2:	4810      	ldr	r0, [pc, #64]	; (8001204 <Check_Keypad_Column+0x84>)
 80011c4:	f002 f9e0 	bl	8003588 <HAL_GPIO_ReadPin>
 80011c8:	4603      	mov	r3, r0
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d106      	bne.n	80011dc <Check_Keypad_Column+0x5c>
	{
		return Keypad_Button_Values[Row-1][2];
 80011ce:	79fb      	ldrb	r3, [r7, #7]
 80011d0:	3b01      	subs	r3, #1
 80011d2:	4a0d      	ldr	r2, [pc, #52]	; (8001208 <Check_Keypad_Column+0x88>)
 80011d4:	009b      	lsls	r3, r3, #2
 80011d6:	4413      	add	r3, r2
 80011d8:	789b      	ldrb	r3, [r3, #2]
 80011da:	e00e      	b.n	80011fa <Check_Keypad_Column+0x7a>
	}

	if(!READ_COLUMN_4)                           //If COLUMN_3 is LOW
 80011dc:	2110      	movs	r1, #16
 80011de:	4809      	ldr	r0, [pc, #36]	; (8001204 <Check_Keypad_Column+0x84>)
 80011e0:	f002 f9d2 	bl	8003588 <HAL_GPIO_ReadPin>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d106      	bne.n	80011f8 <Check_Keypad_Column+0x78>
	{
		return Keypad_Button_Values[Row-1][3];
 80011ea:	79fb      	ldrb	r3, [r7, #7]
 80011ec:	3b01      	subs	r3, #1
 80011ee:	4a06      	ldr	r2, [pc, #24]	; (8001208 <Check_Keypad_Column+0x88>)
 80011f0:	009b      	lsls	r3, r3, #2
 80011f2:	4413      	add	r3, r2
 80011f4:	78db      	ldrb	r3, [r3, #3]
 80011f6:	e000      	b.n	80011fa <Check_Keypad_Column+0x7a>
	}

	return KEYPAD_NOT_PRESSED;                   //If NO Key is pressed
 80011f8:	2300      	movs	r3, #0
}
 80011fa:	4618      	mov	r0, r3
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40010800 	.word	0x40010800
 8001208:	0800e4f0 	.word	0x0800e4f0

0800120c <KEYPAD_Read>:


/* Read the keypad */
char KEYPAD_Read(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b082      	sub	sp, #8
 8001210:	af00      	add	r7, sp, #0
    char check;
    /*Set ROW_1 LOW and scan all the columns*/
	SET_ROW_2_HIGH;
 8001212:	2201      	movs	r2, #1
 8001214:	2140      	movs	r1, #64	; 0x40
 8001216:	483d      	ldr	r0, [pc, #244]	; (800130c <KEYPAD_Read+0x100>)
 8001218:	f002 f9cd 	bl	80035b6 <HAL_GPIO_WritePin>
	SET_ROW_3_HIGH;
 800121c:	2201      	movs	r2, #1
 800121e:	2180      	movs	r1, #128	; 0x80
 8001220:	483a      	ldr	r0, [pc, #232]	; (800130c <KEYPAD_Read+0x100>)
 8001222:	f002 f9c8 	bl	80035b6 <HAL_GPIO_WritePin>
	SET_ROW_4_HIGH;
 8001226:	2201      	movs	r2, #1
 8001228:	2101      	movs	r1, #1
 800122a:	4839      	ldr	r0, [pc, #228]	; (8001310 <KEYPAD_Read+0x104>)
 800122c:	f002 f9c3 	bl	80035b6 <HAL_GPIO_WritePin>
    SET_ROW_1_LOW;
 8001230:	2200      	movs	r2, #0
 8001232:	2120      	movs	r1, #32
 8001234:	4835      	ldr	r0, [pc, #212]	; (800130c <KEYPAD_Read+0x100>)
 8001236:	f002 f9be 	bl	80035b6 <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(1);
 800123a:	2001      	movs	r0, #1
 800123c:	f7ff ffa0 	bl	8001180 <Check_Keypad_Column>
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
    if(check)
 8001244:	79fb      	ldrb	r3, [r7, #7]
 8001246:	2b00      	cmp	r3, #0
 8001248:	d001      	beq.n	800124e <KEYPAD_Read+0x42>
    	return check;
 800124a:	79fb      	ldrb	r3, [r7, #7]
 800124c:	e05a      	b.n	8001304 <KEYPAD_Read+0xf8>

    /*Set ROW_2 LOW and scan all the columns*/
    SET_ROW_1_HIGH;
 800124e:	2201      	movs	r2, #1
 8001250:	2120      	movs	r1, #32
 8001252:	482e      	ldr	r0, [pc, #184]	; (800130c <KEYPAD_Read+0x100>)
 8001254:	f002 f9af 	bl	80035b6 <HAL_GPIO_WritePin>
	SET_ROW_3_HIGH;
 8001258:	2201      	movs	r2, #1
 800125a:	2180      	movs	r1, #128	; 0x80
 800125c:	482b      	ldr	r0, [pc, #172]	; (800130c <KEYPAD_Read+0x100>)
 800125e:	f002 f9aa 	bl	80035b6 <HAL_GPIO_WritePin>
	SET_ROW_4_HIGH;
 8001262:	2201      	movs	r2, #1
 8001264:	2101      	movs	r1, #1
 8001266:	482a      	ldr	r0, [pc, #168]	; (8001310 <KEYPAD_Read+0x104>)
 8001268:	f002 f9a5 	bl	80035b6 <HAL_GPIO_WritePin>
    SET_ROW_2_LOW;
 800126c:	2200      	movs	r2, #0
 800126e:	2140      	movs	r1, #64	; 0x40
 8001270:	4826      	ldr	r0, [pc, #152]	; (800130c <KEYPAD_Read+0x100>)
 8001272:	f002 f9a0 	bl	80035b6 <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(2);
 8001276:	2002      	movs	r0, #2
 8001278:	f7ff ff82 	bl	8001180 <Check_Keypad_Column>
 800127c:	4603      	mov	r3, r0
 800127e:	71fb      	strb	r3, [r7, #7]
    if(check)
 8001280:	79fb      	ldrb	r3, [r7, #7]
 8001282:	2b00      	cmp	r3, #0
 8001284:	d001      	beq.n	800128a <KEYPAD_Read+0x7e>
    	return check;
 8001286:	79fb      	ldrb	r3, [r7, #7]
 8001288:	e03c      	b.n	8001304 <KEYPAD_Read+0xf8>
    /*Set ROW_3 LOW and scan all the columns*/
    SET_ROW_1_HIGH;
 800128a:	2201      	movs	r2, #1
 800128c:	2120      	movs	r1, #32
 800128e:	481f      	ldr	r0, [pc, #124]	; (800130c <KEYPAD_Read+0x100>)
 8001290:	f002 f991 	bl	80035b6 <HAL_GPIO_WritePin>
	SET_ROW_2_HIGH;
 8001294:	2201      	movs	r2, #1
 8001296:	2140      	movs	r1, #64	; 0x40
 8001298:	481c      	ldr	r0, [pc, #112]	; (800130c <KEYPAD_Read+0x100>)
 800129a:	f002 f98c 	bl	80035b6 <HAL_GPIO_WritePin>
	SET_ROW_4_HIGH;
 800129e:	2201      	movs	r2, #1
 80012a0:	2101      	movs	r1, #1
 80012a2:	481b      	ldr	r0, [pc, #108]	; (8001310 <KEYPAD_Read+0x104>)
 80012a4:	f002 f987 	bl	80035b6 <HAL_GPIO_WritePin>
    SET_ROW_3_LOW;
 80012a8:	2200      	movs	r2, #0
 80012aa:	2180      	movs	r1, #128	; 0x80
 80012ac:	4817      	ldr	r0, [pc, #92]	; (800130c <KEYPAD_Read+0x100>)
 80012ae:	f002 f982 	bl	80035b6 <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(3);
 80012b2:	2003      	movs	r0, #3
 80012b4:	f7ff ff64 	bl	8001180 <Check_Keypad_Column>
 80012b8:	4603      	mov	r3, r0
 80012ba:	71fb      	strb	r3, [r7, #7]
    if(check)
 80012bc:	79fb      	ldrb	r3, [r7, #7]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <KEYPAD_Read+0xba>
    	return check;
 80012c2:	79fb      	ldrb	r3, [r7, #7]
 80012c4:	e01e      	b.n	8001304 <KEYPAD_Read+0xf8>
    /*Set ROW_4 LOW and scan all the columns*/
    SET_ROW_1_HIGH;
 80012c6:	2201      	movs	r2, #1
 80012c8:	2120      	movs	r1, #32
 80012ca:	4810      	ldr	r0, [pc, #64]	; (800130c <KEYPAD_Read+0x100>)
 80012cc:	f002 f973 	bl	80035b6 <HAL_GPIO_WritePin>
	SET_ROW_2_HIGH;
 80012d0:	2201      	movs	r2, #1
 80012d2:	2140      	movs	r1, #64	; 0x40
 80012d4:	480d      	ldr	r0, [pc, #52]	; (800130c <KEYPAD_Read+0x100>)
 80012d6:	f002 f96e 	bl	80035b6 <HAL_GPIO_WritePin>
	SET_ROW_3_HIGH;
 80012da:	2201      	movs	r2, #1
 80012dc:	2180      	movs	r1, #128	; 0x80
 80012de:	480b      	ldr	r0, [pc, #44]	; (800130c <KEYPAD_Read+0x100>)
 80012e0:	f002 f969 	bl	80035b6 <HAL_GPIO_WritePin>
    SET_ROW_4_LOW;
 80012e4:	2200      	movs	r2, #0
 80012e6:	2101      	movs	r1, #1
 80012e8:	4809      	ldr	r0, [pc, #36]	; (8001310 <KEYPAD_Read+0x104>)
 80012ea:	f002 f964 	bl	80035b6 <HAL_GPIO_WritePin>
    check = Check_Keypad_Column(4);
 80012ee:	2004      	movs	r0, #4
 80012f0:	f7ff ff46 	bl	8001180 <Check_Keypad_Column>
 80012f4:	4603      	mov	r3, r0
 80012f6:	71fb      	strb	r3, [r7, #7]
    if(check)
 80012f8:	79fb      	ldrb	r3, [r7, #7]
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <KEYPAD_Read+0xf6>
    	return check;
 80012fe:	79fb      	ldrb	r3, [r7, #7]
 8001300:	e000      	b.n	8001304 <KEYPAD_Read+0xf8>
    /*Key not pressed */
    return KEYPAD_NOT_PRESSED;
 8001302:	2300      	movs	r3, #0
}
 8001304:	4618      	mov	r0, r3
 8001306:	3708      	adds	r7, #8
 8001308:	46bd      	mov	sp, r7
 800130a:	bd80      	pop	{r7, pc}
 800130c:	40010800 	.word	0x40010800
 8001310:	40010c00 	.word	0x40010c00

08001314 <_Error_Handler>:
#include "stm32f1xx_hal.h"

#include "BH1750.h"

void _Error_Handler(char * file, int line)
{
 8001314:	b480      	push	{r7}
 8001316:	b083      	sub	sp, #12
 8001318:	af00      	add	r7, sp, #0
 800131a:	6078      	str	r0, [r7, #4]
 800131c:	6039      	str	r1, [r7, #0]
  while(1)
 800131e:	e7fe      	b.n	800131e <_Error_Handler+0xa>

08001320 <BH1750_init_i2c>:
  {
  }
}

HAL_StatusTypeDef BH1750_init_i2c(I2C_HandleTypeDef* i2c_handle)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b084      	sub	sp, #16
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
	  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001328:	4b19      	ldr	r3, [pc, #100]	; (8001390 <BH1750_init_i2c+0x70>)
 800132a:	699b      	ldr	r3, [r3, #24]
 800132c:	4a18      	ldr	r2, [pc, #96]	; (8001390 <BH1750_init_i2c+0x70>)
 800132e:	f043 0308 	orr.w	r3, r3, #8
 8001332:	6193      	str	r3, [r2, #24]
 8001334:	4b16      	ldr	r3, [pc, #88]	; (8001390 <BH1750_init_i2c+0x70>)
 8001336:	699b      	ldr	r3, [r3, #24]
 8001338:	f003 0308 	and.w	r3, r3, #8
 800133c:	60fb      	str	r3, [r7, #12]
 800133e:	68fb      	ldr	r3, [r7, #12]

	//i2c_handle->Instance = I2C1;
	i2c_handle->Init.ClockSpeed = 100000;
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	4a14      	ldr	r2, [pc, #80]	; (8001394 <BH1750_init_i2c+0x74>)
 8001344:	605a      	str	r2, [r3, #4]
	i2c_handle->Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	2200      	movs	r2, #0
 800134a:	609a      	str	r2, [r3, #8]
	i2c_handle->Init.OwnAddress1 = 0;
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	2200      	movs	r2, #0
 8001350:	60da      	str	r2, [r3, #12]
	i2c_handle->Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001358:	611a      	str	r2, [r3, #16]
	i2c_handle->Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	2200      	movs	r2, #0
 800135e:	615a      	str	r2, [r3, #20]
	i2c_handle->Init.OwnAddress2 = 0;
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	619a      	str	r2, [r3, #24]
	i2c_handle->Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	2200      	movs	r2, #0
 800136a:	61da      	str	r2, [r3, #28]
	i2c_handle->Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	2200      	movs	r2, #0
 8001370:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(i2c_handle) != HAL_OK)
 8001372:	6878      	ldr	r0, [r7, #4]
 8001374:	f002 f938 	bl	80035e8 <HAL_I2C_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <BH1750_init_i2c+0x66>
	{
		_Error_Handler(__FILE__, __LINE__);
 800137e:	2136      	movs	r1, #54	; 0x36
 8001380:	4805      	ldr	r0, [pc, #20]	; (8001398 <BH1750_init_i2c+0x78>)
 8001382:	f7ff ffc7 	bl	8001314 <_Error_Handler>
	}

	return HAL_OK;
 8001386:	2300      	movs	r3, #0
}
 8001388:	4618      	mov	r0, r3
 800138a:	3710      	adds	r7, #16
 800138c:	46bd      	mov	sp, r7
 800138e:	bd80      	pop	{r7, pc}
 8001390:	40021000 	.word	0x40021000
 8001394:	000186a0 	.word	0x000186a0
 8001398:	0800e3b0 	.word	0x0800e3b0

0800139c <BH1750_send_command>:

HAL_StatusTypeDef BH1750_send_command(BH1750_device_t* dev, uint8_t cmd)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b084      	sub	sp, #16
 80013a0:	af02      	add	r7, sp, #8
 80013a2:	6078      	str	r0, [r7, #4]
 80013a4:	460b      	mov	r3, r1
 80013a6:	70fb      	strb	r3, [r7, #3]
	//TODO hal checks
	if(HAL_I2C_Master_Transmit(
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	6858      	ldr	r0, [r3, #4]
			dev->i2c_handle,	//I2C Handle
			dev->address_w,		//I2C addr of dev
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	7a5b      	ldrb	r3, [r3, #9]
	if(HAL_I2C_Master_Transmit(
 80013b0:	b299      	uxth	r1, r3
 80013b2:	1cfa      	adds	r2, r7, #3
 80013b4:	230a      	movs	r3, #10
 80013b6:	9300      	str	r3, [sp, #0]
 80013b8:	2301      	movs	r3, #1
 80013ba:	f002 fa59 	bl	8003870 <HAL_I2C_Master_Transmit>
 80013be:	4603      	mov	r3, r0
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d001      	beq.n	80013c8 <BH1750_send_command+0x2c>
			&cmd,				//CMD to be executed
			1,					//8bit addr
			10					//Wait time
		) != HAL_OK) return HAL_ERROR;
 80013c4:	2301      	movs	r3, #1
 80013c6:	e000      	b.n	80013ca <BH1750_send_command+0x2e>

	return HAL_OK;
 80013c8:	2300      	movs	r3, #0
}
 80013ca:	4618      	mov	r0, r3
 80013cc:	3708      	adds	r7, #8
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}

080013d2 <BH1750_poll_self>:

void BH1750_poll_self(BH1750_device_t* self)
{
 80013d2:	b580      	push	{r7, lr}
 80013d4:	b082      	sub	sp, #8
 80013d6:	af00      	add	r7, sp, #0
 80013d8:	6078      	str	r0, [r7, #4]
	BH1750_get_lumen(self);
 80013da:	6878      	ldr	r0, [r7, #4]
 80013dc:	f000 f8aa 	bl	8001534 <BH1750_get_lumen>
}
 80013e0:	bf00      	nop
 80013e2:	3708      	adds	r7, #8
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}

080013e8 <BH1750_init_dev_struct>:

BH1750_device_t* BH1750_init_dev_struct(I2C_HandleTypeDef* i2c_handle,
		char* name, bool addr_grounded)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	4613      	mov	r3, r2
 80013f4:	71fb      	strb	r3, [r7, #7]
	BH1750_device_t* init =
			(BH1750_device_t*)calloc(1, sizeof(BH1750_device_t));
 80013f6:	2114      	movs	r1, #20
 80013f8:	2001      	movs	r0, #1
 80013fa:	f007 fe73 	bl	80090e4 <calloc>
 80013fe:	4603      	mov	r3, r0
 8001400:	617b      	str	r3, [r7, #20]

	if(init == NULL) return NULL;
 8001402:	697b      	ldr	r3, [r7, #20]
 8001404:	2b00      	cmp	r3, #0
 8001406:	d101      	bne.n	800140c <BH1750_init_dev_struct+0x24>
 8001408:	2300      	movs	r3, #0
 800140a:	e02d      	b.n	8001468 <BH1750_init_dev_struct+0x80>

	if(addr_grounded){
 800140c:	79fb      	ldrb	r3, [r7, #7]
 800140e:	2b00      	cmp	r3, #0
 8001410:	d006      	beq.n	8001420 <BH1750_init_dev_struct+0x38>
		init->address_r = BH1750_GROUND_ADDR_READ;
 8001412:	697b      	ldr	r3, [r7, #20]
 8001414:	2247      	movs	r2, #71	; 0x47
 8001416:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_GROUND_ADDR_WRITE;
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	2246      	movs	r2, #70	; 0x46
 800141c:	725a      	strb	r2, [r3, #9]
 800141e:	e005      	b.n	800142c <BH1750_init_dev_struct+0x44>
	}else{
		init->address_r = BH1750_NO_GROUND_ADDR_READ;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	22ba      	movs	r2, #186	; 0xba
 8001424:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_NO_GROUND_ADDR_WRITE;
 8001426:	697b      	ldr	r3, [r7, #20]
 8001428:	22b9      	movs	r2, #185	; 0xb9
 800142a:	725a      	strb	r2, [r3, #9]
	}

	init->name = (char*)malloc(sizeof(char) * strlen(name));
 800142c:	68b8      	ldr	r0, [r7, #8]
 800142e:	f7fe fe8f 	bl	8000150 <strlen>
 8001432:	4603      	mov	r3, r0
 8001434:	4618      	mov	r0, r3
 8001436:	f007 fe87 	bl	8009148 <malloc>
 800143a:	4603      	mov	r3, r0
 800143c:	461a      	mov	r2, r3
 800143e:	697b      	ldr	r3, [r7, #20]
 8001440:	601a      	str	r2, [r3, #0]

	if(init->name == NULL) return NULL;
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	2b00      	cmp	r3, #0
 8001448:	d101      	bne.n	800144e <BH1750_init_dev_struct+0x66>
 800144a:	2300      	movs	r3, #0
 800144c:	e00c      	b.n	8001468 <BH1750_init_dev_struct+0x80>

	init->i2c_handle = i2c_handle;
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	68fa      	ldr	r2, [r7, #12]
 8001452:	605a      	str	r2, [r3, #4]

	strcpy(init->name, name);
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	68b9      	ldr	r1, [r7, #8]
 800145a:	4618      	mov	r0, r3
 800145c:	f008 ff21 	bl	800a2a2 <strcpy>

	init->poll = &BH1750_poll_self;
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	4a03      	ldr	r2, [pc, #12]	; (8001470 <BH1750_init_dev_struct+0x88>)
 8001464:	611a      	str	r2, [r3, #16]

	return init;
 8001466:	697b      	ldr	r3, [r7, #20]
}
 8001468:	4618      	mov	r0, r3
 800146a:	3718      	adds	r7, #24
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	080013d3 	.word	0x080013d3

08001474 <BH1750_init_dev>:

HAL_StatusTypeDef BH1750_init_dev(BH1750_device_t* dev)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b082      	sub	sp, #8
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
	BH1750_send_command(dev, CMD_POWER_ON);
 800147c:	2101      	movs	r1, #1
 800147e:	6878      	ldr	r0, [r7, #4]
 8001480:	f7ff ff8c 	bl	800139c <BH1750_send_command>
	BH1750_send_command(dev, CMD_RESET);
 8001484:	2103      	movs	r1, #3
 8001486:	6878      	ldr	r0, [r7, #4]
 8001488:	f7ff ff88 	bl	800139c <BH1750_send_command>
	BH1750_send_command(dev, CMD_H_RES_MODE);
 800148c:	2110      	movs	r1, #16
 800148e:	6878      	ldr	r0, [r7, #4]
 8001490:	f7ff ff84 	bl	800139c <BH1750_send_command>

	return HAL_OK;
 8001494:	2300      	movs	r3, #0
}
 8001496:	4618      	mov	r0, r3
 8001498:	3708      	adds	r7, #8
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}

0800149e <BH1750_read_dev>:

HAL_StatusTypeDef BH1750_read_dev(BH1750_device_t* dev)
{
 800149e:	b580      	push	{r7, lr}
 80014a0:	b084      	sub	sp, #16
 80014a2:	af02      	add	r7, sp, #8
 80014a4:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6858      	ldr	r0, [r3, #4]
			dev->address_r,
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	7a1b      	ldrb	r3, [r3, #8]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 80014ae:	b299      	uxth	r1, r3
			dev->buffer,
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	f103 020c 	add.w	r2, r3, #12
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 80014b6:	230a      	movs	r3, #10
 80014b8:	9300      	str	r3, [sp, #0]
 80014ba:	2302      	movs	r3, #2
 80014bc:	f002 fad6 	bl	8003a6c <HAL_I2C_Master_Receive>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d001      	beq.n	80014ca <BH1750_read_dev+0x2c>
			2,
			10
	) != HAL_OK) return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <BH1750_read_dev+0x2e>

	return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3708      	adds	r7, #8
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}

080014d4 <BH1750_convert>:

HAL_StatusTypeDef BH1750_convert(BH1750_device_t* dev)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b082      	sub	sp, #8
 80014d8:	af00      	add	r7, sp, #0
 80014da:	6078      	str	r0, [r7, #4]
	dev->value = dev->buffer[0];
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	7b1b      	ldrb	r3, [r3, #12]
 80014e0:	b29a      	uxth	r2, r3
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	815a      	strh	r2, [r3, #10]
	dev->value = (dev->value << 8) | dev->buffer[1];
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	895b      	ldrh	r3, [r3, #10]
 80014ea:	021b      	lsls	r3, r3, #8
 80014ec:	b21a      	sxth	r2, r3
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	7b5b      	ldrb	r3, [r3, #13]
 80014f2:	b21b      	sxth	r3, r3
 80014f4:	4313      	orrs	r3, r2
 80014f6:	b21b      	sxth	r3, r3
 80014f8:	b29a      	uxth	r2, r3
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	815a      	strh	r2, [r3, #10]

	//TODO check float stuff
	dev->value/=1.2;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	895b      	ldrh	r3, [r3, #10]
 8001502:	4618      	mov	r0, r3
 8001504:	f7fe ff7e 	bl	8000404 <__aeabi_i2d>
 8001508:	f04f 3233 	mov.w	r2, #858993459	; 0x33333333
 800150c:	4b08      	ldr	r3, [pc, #32]	; (8001530 <BH1750_convert+0x5c>)
 800150e:	f7ff f90d 	bl	800072c <__aeabi_ddiv>
 8001512:	4602      	mov	r2, r0
 8001514:	460b      	mov	r3, r1
 8001516:	4610      	mov	r0, r2
 8001518:	4619      	mov	r1, r3
 800151a:	f7ff fab5 	bl	8000a88 <__aeabi_d2uiz>
 800151e:	4603      	mov	r3, r0
 8001520:	b29a      	uxth	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	815a      	strh	r2, [r3, #10]

	return HAL_OK;
 8001526:	2300      	movs	r3, #0
}
 8001528:	4618      	mov	r0, r3
 800152a:	3708      	adds	r7, #8
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	3ff33333 	.word	0x3ff33333

08001534 <BH1750_get_lumen>:

HAL_StatusTypeDef BH1750_get_lumen(BH1750_device_t* dev)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b082      	sub	sp, #8
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
	BH1750_read_dev(dev);
 800153c:	6878      	ldr	r0, [r7, #4]
 800153e:	f7ff ffae 	bl	800149e <BH1750_read_dev>
	BH1750_convert(dev);
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f7ff ffc6 	bl	80014d4 <BH1750_convert>
	return HAL_OK;
 8001548:	2300      	movs	r3, #0
}
 800154a:	4618      	mov	r0, r3
 800154c:	3708      	adds	r7, #8
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
	...

08001554 <__io_putchar>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar (int ch){
 8001554:	b580      	push	{r7, lr}
 8001556:	b082      	sub	sp, #8
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&huart1,(uint8_t *)&ch,1,100);
 800155c:	1d39      	adds	r1, r7, #4
 800155e:	2364      	movs	r3, #100	; 0x64
 8001560:	2201      	movs	r2, #1
 8001562:	4804      	ldr	r0, [pc, #16]	; (8001574 <__io_putchar+0x20>)
 8001564:	f004 fa17 	bl	8005996 <HAL_UART_Transmit>
	return ch;
 8001568:	687b      	ldr	r3, [r7, #4]
}
 800156a:	4618      	mov	r0, r3
 800156c:	3708      	adds	r7, #8
 800156e:	46bd      	mov	sp, r7
 8001570:	bd80      	pop	{r7, pc}
 8001572:	bf00      	nop
 8001574:	2000030c 	.word	0x2000030c

08001578 <delay>:
char Key;
char anhsang[4];
char nhiet_do[4];
int m1=0;int m2=0;int m3=0;int m4=0;
void delay (uint16_t time)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	4603      	mov	r3, r0
 8001580:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 8001582:	4b08      	ldr	r3, [pc, #32]	; (80015a4 <delay+0x2c>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2200      	movs	r2, #0
 8001588:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<time);
 800158a:	bf00      	nop
 800158c:	4b05      	ldr	r3, [pc, #20]	; (80015a4 <delay+0x2c>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001592:	88fb      	ldrh	r3, [r7, #6]
 8001594:	429a      	cmp	r2, r3
 8001596:	d3f9      	bcc.n	800158c <delay+0x14>
}
 8001598:	bf00      	nop
 800159a:	bf00      	nop
 800159c:	370c      	adds	r7, #12
 800159e:	46bd      	mov	sp, r7
 80015a0:	bc80      	pop	{r7}
 80015a2:	4770      	bx	lr
 80015a4:	200002c4 	.word	0x200002c4

080015a8 <Set_Pin_Output>:

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]
 80015b0:	460b      	mov	r3, r1
 80015b2:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0308 	add.w	r3, r7, #8
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80015c2:	887b      	ldrh	r3, [r7, #2]
 80015c4:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ca:	2302      	movs	r3, #2
 80015cc:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80015ce:	f107 0308 	add.w	r3, r7, #8
 80015d2:	4619      	mov	r1, r3
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	f001 fe53 	bl	8003280 <HAL_GPIO_Init>
}
 80015da:	bf00      	nop
 80015dc:	3718      	adds	r7, #24
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}

080015e2 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80015e2:	b580      	push	{r7, lr}
 80015e4:	b086      	sub	sp, #24
 80015e6:	af00      	add	r7, sp, #0
 80015e8:	6078      	str	r0, [r7, #4]
 80015ea:	460b      	mov	r3, r1
 80015ec:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 0308 	add.w	r3, r7, #8
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80015fc:	887b      	ldrh	r3, [r7, #2]
 80015fe:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001600:	2300      	movs	r3, #0
 8001602:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001604:	2301      	movs	r3, #1
 8001606:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001608:	f107 0308 	add.w	r3, r7, #8
 800160c:	4619      	mov	r1, r3
 800160e:	6878      	ldr	r0, [r7, #4]
 8001610:	f001 fe36 	bl	8003280 <HAL_GPIO_Init>
}
 8001614:	bf00      	nop
 8001616:	3718      	adds	r7, #24
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}

0800161c <DS18B20_Start>:
#define DS18B20_PORT GPIOA
#define DS18B20_PIN GPIO_PIN_0
#define BIT_temp	( 1 << 0 )
#define BIT_lux	( 1 << 1 )
uint8_t DS18B20_Start (void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b082      	sub	sp, #8
 8001620:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 8001622:	2300      	movs	r3, #0
 8001624:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 8001626:	2101      	movs	r1, #1
 8001628:	4813      	ldr	r0, [pc, #76]	; (8001678 <DS18B20_Start+0x5c>)
 800162a:	f7ff ffbd 	bl	80015a8 <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 800162e:	2200      	movs	r2, #0
 8001630:	2101      	movs	r1, #1
 8001632:	4811      	ldr	r0, [pc, #68]	; (8001678 <DS18B20_Start+0x5c>)
 8001634:	f001 ffbf 	bl	80035b6 <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 8001638:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 800163c:	f7ff ff9c 	bl	8001578 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 8001640:	2101      	movs	r1, #1
 8001642:	480d      	ldr	r0, [pc, #52]	; (8001678 <DS18B20_Start+0x5c>)
 8001644:	f7ff ffcd 	bl	80015e2 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 8001648:	2050      	movs	r0, #80	; 0x50
 800164a:	f7ff ff95 	bl	8001578 <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 800164e:	2101      	movs	r1, #1
 8001650:	4809      	ldr	r0, [pc, #36]	; (8001678 <DS18B20_Start+0x5c>)
 8001652:	f001 ff99 	bl	8003588 <HAL_GPIO_ReadPin>
 8001656:	4603      	mov	r3, r0
 8001658:	2b00      	cmp	r3, #0
 800165a:	d102      	bne.n	8001662 <DS18B20_Start+0x46>
 800165c:	2301      	movs	r3, #1
 800165e:	71fb      	strb	r3, [r7, #7]
 8001660:	e001      	b.n	8001666 <DS18B20_Start+0x4a>
	else Response = -1;
 8001662:	23ff      	movs	r3, #255	; 0xff
 8001664:	71fb      	strb	r3, [r7, #7]

	delay (400); // 480 us delay totally.
 8001666:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800166a:	f7ff ff85 	bl	8001578 <delay>

	return Response;
 800166e:	79fb      	ldrb	r3, [r7, #7]
}
 8001670:	4618      	mov	r0, r3
 8001672:	3708      	adds	r7, #8
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40010800 	.word	0x40010800

0800167c <DS18B20_Write>:

void DS18B20_Write (uint8_t data)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	b084      	sub	sp, #16
 8001680:	af00      	add	r7, sp, #0
 8001682:	4603      	mov	r3, r0
 8001684:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8001686:	2101      	movs	r1, #1
 8001688:	481e      	ldr	r0, [pc, #120]	; (8001704 <DS18B20_Write+0x88>)
 800168a:	f7ff ff8d 	bl	80015a8 <Set_Pin_Output>

	for (int i=0; i<8; i++)
 800168e:	2300      	movs	r3, #0
 8001690:	60fb      	str	r3, [r7, #12]
 8001692:	e02e      	b.n	80016f2 <DS18B20_Write+0x76>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8001694:	79fa      	ldrb	r2, [r7, #7]
 8001696:	68fb      	ldr	r3, [r7, #12]
 8001698:	fa42 f303 	asr.w	r3, r2, r3
 800169c:	f003 0301 	and.w	r3, r3, #1
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <DS18B20_Write+0x50>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 80016a4:	2101      	movs	r1, #1
 80016a6:	4817      	ldr	r0, [pc, #92]	; (8001704 <DS18B20_Write+0x88>)
 80016a8:	f7ff ff7e 	bl	80015a8 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80016ac:	2200      	movs	r2, #0
 80016ae:	2101      	movs	r1, #1
 80016b0:	4814      	ldr	r0, [pc, #80]	; (8001704 <DS18B20_Write+0x88>)
 80016b2:	f001 ff80 	bl	80035b6 <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 80016b6:	2001      	movs	r0, #1
 80016b8:	f7ff ff5e 	bl	8001578 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 80016bc:	2101      	movs	r1, #1
 80016be:	4811      	ldr	r0, [pc, #68]	; (8001704 <DS18B20_Write+0x88>)
 80016c0:	f7ff ff8f 	bl	80015e2 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 80016c4:	2032      	movs	r0, #50	; 0x32
 80016c6:	f7ff ff57 	bl	8001578 <delay>
 80016ca:	e00f      	b.n	80016ec <DS18B20_Write+0x70>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 80016cc:	2101      	movs	r1, #1
 80016ce:	480d      	ldr	r0, [pc, #52]	; (8001704 <DS18B20_Write+0x88>)
 80016d0:	f7ff ff6a 	bl	80015a8 <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 80016d4:	2200      	movs	r2, #0
 80016d6:	2101      	movs	r1, #1
 80016d8:	480a      	ldr	r0, [pc, #40]	; (8001704 <DS18B20_Write+0x88>)
 80016da:	f001 ff6c 	bl	80035b6 <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 80016de:	2032      	movs	r0, #50	; 0x32
 80016e0:	f7ff ff4a 	bl	8001578 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80016e4:	2101      	movs	r1, #1
 80016e6:	4807      	ldr	r0, [pc, #28]	; (8001704 <DS18B20_Write+0x88>)
 80016e8:	f7ff ff7b 	bl	80015e2 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	3301      	adds	r3, #1
 80016f0:	60fb      	str	r3, [r7, #12]
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	2b07      	cmp	r3, #7
 80016f6:	ddcd      	ble.n	8001694 <DS18B20_Write+0x18>
		}
	}
}
 80016f8:	bf00      	nop
 80016fa:	bf00      	nop
 80016fc:	3710      	adds	r7, #16
 80016fe:	46bd      	mov	sp, r7
 8001700:	bd80      	pop	{r7, pc}
 8001702:	bf00      	nop
 8001704:	40010800 	.word	0x40010800

08001708 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
	uint8_t value=0;
 800170e:	2300      	movs	r3, #0
 8001710:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8001712:	2101      	movs	r1, #1
 8001714:	481a      	ldr	r0, [pc, #104]	; (8001780 <DS18B20_Read+0x78>)
 8001716:	f7ff ff64 	bl	80015e2 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 800171a:	2300      	movs	r3, #0
 800171c:	603b      	str	r3, [r7, #0]
 800171e:	e026      	b.n	800176e <DS18B20_Read+0x66>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 8001720:	2101      	movs	r1, #1
 8001722:	4817      	ldr	r0, [pc, #92]	; (8001780 <DS18B20_Read+0x78>)
 8001724:	f7ff ff40 	bl	80015a8 <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 8001728:	2200      	movs	r2, #0
 800172a:	2101      	movs	r1, #1
 800172c:	4814      	ldr	r0, [pc, #80]	; (8001780 <DS18B20_Read+0x78>)
 800172e:	f001 ff42 	bl	80035b6 <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 8001732:	2001      	movs	r0, #1
 8001734:	f7ff ff20 	bl	8001578 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8001738:	2101      	movs	r1, #1
 800173a:	4811      	ldr	r0, [pc, #68]	; (8001780 <DS18B20_Read+0x78>)
 800173c:	f7ff ff51 	bl	80015e2 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 8001740:	2101      	movs	r1, #1
 8001742:	480f      	ldr	r0, [pc, #60]	; (8001780 <DS18B20_Read+0x78>)
 8001744:	f001 ff20 	bl	8003588 <HAL_GPIO_ReadPin>
 8001748:	4603      	mov	r3, r0
 800174a:	2b00      	cmp	r3, #0
 800174c:	d009      	beq.n	8001762 <DS18B20_Read+0x5a>
		{
			value |= 1<<i;  // read = 1
 800174e:	2201      	movs	r2, #1
 8001750:	683b      	ldr	r3, [r7, #0]
 8001752:	fa02 f303 	lsl.w	r3, r2, r3
 8001756:	b25a      	sxtb	r2, r3
 8001758:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800175c:	4313      	orrs	r3, r2
 800175e:	b25b      	sxtb	r3, r3
 8001760:	71fb      	strb	r3, [r7, #7]
		}
		delay (50);  // wait for 60 us
 8001762:	2032      	movs	r0, #50	; 0x32
 8001764:	f7ff ff08 	bl	8001578 <delay>
	for (int i=0;i<8;i++)
 8001768:	683b      	ldr	r3, [r7, #0]
 800176a:	3301      	adds	r3, #1
 800176c:	603b      	str	r3, [r7, #0]
 800176e:	683b      	ldr	r3, [r7, #0]
 8001770:	2b07      	cmp	r3, #7
 8001772:	ddd5      	ble.n	8001720 <DS18B20_Read+0x18>
	}
	return value;
 8001774:	79fb      	ldrb	r3, [r7, #7]
}
 8001776:	4618      	mov	r0, r3
 8001778:	3708      	adds	r7, #8
 800177a:	46bd      	mov	sp, r7
 800177c:	bd80      	pop	{r7, pc}
 800177e:	bf00      	nop
 8001780:	40010800 	.word	0x40010800

08001784 <DS18B20_Readvalue>:
float DS18B20_Readvalue ()
{ uint8_t  Temp_byte1, Temp_byte2;
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
uint16_t  TEMP;

float Temperature = 0;
 800178a:	f04f 0300 	mov.w	r3, #0
 800178e:	607b      	str	r3, [r7, #4]

	 DS18B20_Start ();
 8001790:	f7ff ff44 	bl	800161c <DS18B20_Start>
		  	  HAL_Delay (1);
 8001794:	2001      	movs	r0, #1
 8001796:	f001 fbbf 	bl	8002f18 <HAL_Delay>
		  	  DS18B20_Write (0xCC);  // skip ROM
 800179a:	20cc      	movs	r0, #204	; 0xcc
 800179c:	f7ff ff6e 	bl	800167c <DS18B20_Write>
		  	  DS18B20_Write (0x44);  // convert t
 80017a0:	2044      	movs	r0, #68	; 0x44
 80017a2:	f7ff ff6b 	bl	800167c <DS18B20_Write>
		  	  HAL_Delay (800);
 80017a6:	f44f 7048 	mov.w	r0, #800	; 0x320
 80017aa:	f001 fbb5 	bl	8002f18 <HAL_Delay>

		  	   DS18B20_Start ();
 80017ae:	f7ff ff35 	bl	800161c <DS18B20_Start>
		        HAL_Delay(1);
 80017b2:	2001      	movs	r0, #1
 80017b4:	f001 fbb0 	bl	8002f18 <HAL_Delay>
		        DS18B20_Write (0xCC);  // skip ROM
 80017b8:	20cc      	movs	r0, #204	; 0xcc
 80017ba:	f7ff ff5f 	bl	800167c <DS18B20_Write>
		        DS18B20_Write (0xBE);  // Read Scratch-pad
 80017be:	20be      	movs	r0, #190	; 0xbe
 80017c0:	f7ff ff5c 	bl	800167c <DS18B20_Write>

		        Temp_byte1 = DS18B20_Read();
 80017c4:	f7ff ffa0 	bl	8001708 <DS18B20_Read>
 80017c8:	4603      	mov	r3, r0
 80017ca:	70fb      	strb	r3, [r7, #3]
		  	  Temp_byte2 = DS18B20_Read();
 80017cc:	f7ff ff9c 	bl	8001708 <DS18B20_Read>
 80017d0:	4603      	mov	r3, r0
 80017d2:	70bb      	strb	r3, [r7, #2]
		  	  TEMP = (Temp_byte2<<8)|Temp_byte1;
 80017d4:	78bb      	ldrb	r3, [r7, #2]
 80017d6:	021b      	lsls	r3, r3, #8
 80017d8:	b21a      	sxth	r2, r3
 80017da:	78fb      	ldrb	r3, [r7, #3]
 80017dc:	b21b      	sxth	r3, r3
 80017de:	4313      	orrs	r3, r2
 80017e0:	b21b      	sxth	r3, r3
 80017e2:	803b      	strh	r3, [r7, #0]
		  	  Temperature = (float)TEMP/16;
 80017e4:	883b      	ldrh	r3, [r7, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff fa74 	bl	8000cd4 <__aeabi_ui2f>
 80017ec:	4603      	mov	r3, r0
 80017ee:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80017f2:	4618      	mov	r0, r3
 80017f4:	f7ff fb7a 	bl	8000eec <__aeabi_fdiv>
 80017f8:	4603      	mov	r3, r0
 80017fa:	607b      	str	r3, [r7, #4]
		  	  return Temperature;
 80017fc:	687b      	ldr	r3, [r7, #4]
}
 80017fe:	4618      	mov	r0, r3
 8001800:	3708      	adds	r7, #8
 8001802:	46bd      	mov	sp, r7
 8001804:	bd80      	pop	{r7, pc}
	...

08001808 <hien_thilux>:
void hien_thilux(char * str) {
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
	//SSD1306_Clear ();
	//SSD1306_GotoXY (10,10); // goto 10, 10
	SSD1306_GotoXY (0, 10);
 8001810:	210a      	movs	r1, #10
 8001812:	2000      	movs	r0, #0
 8001814:	f000 ff48 	bl	80026a8 <SSD1306_GotoXY>
		  		SSD1306_Puts ("Lux:     ", &Font_11x18, 1);
 8001818:	2201      	movs	r2, #1
 800181a:	4918      	ldr	r1, [pc, #96]	; (800187c <hien_thilux+0x74>)
 800181c:	4818      	ldr	r0, [pc, #96]	; (8001880 <hien_thilux+0x78>)
 800181e:	f000 ffd9 	bl	80027d4 <SSD1306_Puts>
		  		SSD1306_UpdateScreen();
 8001822:	f000 fe9d 	bl	8002560 <SSD1306_UpdateScreen>
		  		if(value < 10) {
 8001826:	4b17      	ldr	r3, [pc, #92]	; (8001884 <hien_thilux+0x7c>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b09      	cmp	r3, #9
 800182c:	dc04      	bgt.n	8001838 <hien_thilux+0x30>
		  			SSD1306_GotoXY (63, 10);  // 1 DIGIT
 800182e:	210a      	movs	r1, #10
 8001830:	203f      	movs	r0, #63	; 0x3f
 8001832:	f000 ff39 	bl	80026a8 <SSD1306_GotoXY>
 8001836:	e016      	b.n	8001866 <hien_thilux+0x5e>
		  		}
		  		else if (value < 100 ) {
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <hien_thilux+0x7c>)
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	2b63      	cmp	r3, #99	; 0x63
 800183e:	dc04      	bgt.n	800184a <hien_thilux+0x42>
		  			SSD1306_GotoXY (55, 10);  // 2 DIGITS
 8001840:	210a      	movs	r1, #10
 8001842:	2037      	movs	r0, #55	; 0x37
 8001844:	f000 ff30 	bl	80026a8 <SSD1306_GotoXY>
 8001848:	e00d      	b.n	8001866 <hien_thilux+0x5e>
		  		}
		  		else if (value < 1000 ) {
 800184a:	4b0e      	ldr	r3, [pc, #56]	; (8001884 <hien_thilux+0x7c>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001852:	da04      	bge.n	800185e <hien_thilux+0x56>
		  			SSD1306_GotoXY (47, 10);  // 3 DIGITS
 8001854:	210a      	movs	r1, #10
 8001856:	202f      	movs	r0, #47	; 0x2f
 8001858:	f000 ff26 	bl	80026a8 <SSD1306_GotoXY>
 800185c:	e003      	b.n	8001866 <hien_thilux+0x5e>
		  		}
		  		else {
		  			SSD1306_GotoXY (40, 10);  // 4 DIGIS
 800185e:	210a      	movs	r1, #10
 8001860:	2028      	movs	r0, #40	; 0x28
 8001862:	f000 ff21 	bl	80026a8 <SSD1306_GotoXY>
		  		}
	  SSD1306_Puts (str, &Font_11x18, 1);
 8001866:	2201      	movs	r2, #1
 8001868:	4904      	ldr	r1, [pc, #16]	; (800187c <hien_thilux+0x74>)
 800186a:	6878      	ldr	r0, [r7, #4]
 800186c:	f000 ffb2 	bl	80027d4 <SSD1306_Puts>
	  SSD1306_UpdateScreen();
 8001870:	f000 fe76 	bl	8002560 <SSD1306_UpdateScreen>

}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000000 	.word	0x20000000
 8001880:	0800e3c8 	.word	0x0800e3c8
 8001884:	20000384 	.word	0x20000384

08001888 <hien_thitemp>:
void hien_thitemp (char * TEMP){
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
	SSD1306_GotoXY (0, 30);
 8001890:	211e      	movs	r1, #30
 8001892:	2000      	movs	r0, #0
 8001894:	f000 ff08 	bl	80026a8 <SSD1306_GotoXY>
	SSD1306_Puts (TEMP, &Font_11x18, 1);
 8001898:	2201      	movs	r2, #1
 800189a:	4905      	ldr	r1, [pc, #20]	; (80018b0 <hien_thitemp+0x28>)
 800189c:	6878      	ldr	r0, [r7, #4]
 800189e:	f000 ff99 	bl	80027d4 <SSD1306_Puts>
		  SSD1306_UpdateScreen();
 80018a2:	f000 fe5d 	bl	8002560 <SSD1306_UpdateScreen>
}
 80018a6:	bf00      	nop
 80018a8:	3708      	adds	r7, #8
 80018aa:	46bd      	mov	sp, r7
 80018ac:	bd80      	pop	{r7, pc}
 80018ae:	bf00      	nop
 80018b0:	20000000 	.word	0x20000000

080018b4 <chuki>:
void chuki(char* str,char b){
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b084      	sub	sp, #16
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	70fb      	strb	r3, [r7, #3]
	int i=0;
 80018c0:	2300      	movs	r3, #0
 80018c2:	60fb      	str	r3, [r7, #12]
 while(1){
	 b=  KEYPAD_Read();
 80018c4:	f7ff fca2 	bl	800120c <KEYPAD_Read>
 80018c8:	4603      	mov	r3, r0
 80018ca:	70fb      	strb	r3, [r7, #3]
	 if (b!='\0') {
 80018cc:	78fb      	ldrb	r3, [r7, #3]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d0f8      	beq.n	80018c4 <chuki+0x10>
		*(str+i)=b;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	4413      	add	r3, r2
 80018d8:	78fa      	ldrb	r2, [r7, #3]
 80018da:	701a      	strb	r2, [r3, #0]
		i++;
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	3301      	adds	r3, #1
 80018e0:	60fb      	str	r3, [r7, #12]
		if (i==4) {
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	2b04      	cmp	r3, #4
 80018e6:	d008      	beq.n	80018fa <chuki+0x46>
			break;
		}
		while(b != '\0')
 80018e8:	e003      	b.n	80018f2 <chuki+0x3e>
					{
		b = KEYPAD_Read();
 80018ea:	f7ff fc8f 	bl	800120c <KEYPAD_Read>
 80018ee:	4603      	mov	r3, r0
 80018f0:	70fb      	strb	r3, [r7, #3]
		while(b != '\0')
 80018f2:	78fb      	ldrb	r3, [r7, #3]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d1f8      	bne.n	80018ea <chuki+0x36>
	 b=  KEYPAD_Read();
 80018f8:	e7e4      	b.n	80018c4 <chuki+0x10>
			break;
 80018fa:	bf00      	nop
					}
	}
}

}
 80018fc:	bf00      	nop
 80018fe:	3710      	adds	r7, #16
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}

08001904 <hien_thi>:

void hien_thi(const unsigned char * str){
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af02      	add	r7, sp, #8
 800190a:	6078      	str	r0, [r7, #4]
	SSD1306_DrawBitmap(85, 0,str, 64, 64, 1);
 800190c:	2301      	movs	r3, #1
 800190e:	9301      	str	r3, [sp, #4]
 8001910:	2340      	movs	r3, #64	; 0x40
 8001912:	9300      	str	r3, [sp, #0]
 8001914:	2340      	movs	r3, #64	; 0x40
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	2100      	movs	r1, #0
 800191a:	2055      	movs	r0, #85	; 0x55
 800191c:	f000 fcf3 	bl	8002306 <SSD1306_DrawBitmap>
	     SSD1306_UpdateScreen();
 8001920:	f000 fe1e 	bl	8002560 <SSD1306_UpdateScreen>
}
 8001924:	bf00      	nop
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}

0800192c <canh_bao>:
void canh_bao (){
 800192c:	b580      	push	{r7, lr}
 800192e:	af00      	add	r7, sp, #0
	if(Receive.Temp < war_temp && value < war_lux)
 8001930:	4b51      	ldr	r3, [pc, #324]	; (8001a78 <canh_bao+0x14c>)
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	4a51      	ldr	r2, [pc, #324]	; (8001a7c <canh_bao+0x150>)
 8001936:	6812      	ldr	r2, [r2, #0]
 8001938:	4611      	mov	r1, r2
 800193a:	4618      	mov	r0, r3
 800193c:	f7ff fbc0 	bl	80010c0 <__aeabi_fcmplt>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d01a      	beq.n	800197c <canh_bao+0x50>
 8001946:	4b4e      	ldr	r3, [pc, #312]	; (8001a80 <canh_bao+0x154>)
 8001948:	681a      	ldr	r2, [r3, #0]
 800194a:	4b4e      	ldr	r3, [pc, #312]	; (8001a84 <canh_bao+0x158>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	429a      	cmp	r2, r3
 8001950:	da14      	bge.n	800197c <canh_bao+0x50>
	            	    {     m1++;m2=0;m3=0;m4=0;
 8001952:	4b4d      	ldr	r3, [pc, #308]	; (8001a88 <canh_bao+0x15c>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	3301      	adds	r3, #1
 8001958:	4a4b      	ldr	r2, [pc, #300]	; (8001a88 <canh_bao+0x15c>)
 800195a:	6013      	str	r3, [r2, #0]
 800195c:	4b4b      	ldr	r3, [pc, #300]	; (8001a8c <canh_bao+0x160>)
 800195e:	2200      	movs	r2, #0
 8001960:	601a      	str	r2, [r3, #0]
 8001962:	4b4b      	ldr	r3, [pc, #300]	; (8001a90 <canh_bao+0x164>)
 8001964:	2200      	movs	r2, #0
 8001966:	601a      	str	r2, [r3, #0]
 8001968:	4b4a      	ldr	r3, [pc, #296]	; (8001a94 <canh_bao+0x168>)
 800196a:	2200      	movs	r2, #0
 800196c:	601a      	str	r2, [r3, #0]
	            	            if (m1==1) {
 800196e:	4b46      	ldr	r3, [pc, #280]	; (8001a88 <canh_bao+0x15c>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	2b01      	cmp	r3, #1
 8001974:	d17e      	bne.n	8001a74 <canh_bao+0x148>
									SSD1306_Clear();
 8001976:	f000 ff52 	bl	800281e <SSD1306_Clear>
	            	            if (m1==1) {
 800197a:	e07b      	b.n	8001a74 <canh_bao+0x148>
								}
	                     }else if (Receive.Temp > war_temp && value < war_lux) {
 800197c:	4b3e      	ldr	r3, [pc, #248]	; (8001a78 <canh_bao+0x14c>)
 800197e:	689b      	ldr	r3, [r3, #8]
 8001980:	4a3e      	ldr	r2, [pc, #248]	; (8001a7c <canh_bao+0x150>)
 8001982:	6812      	ldr	r2, [r2, #0]
 8001984:	4611      	mov	r1, r2
 8001986:	4618      	mov	r0, r3
 8001988:	f7ff fbb8 	bl	80010fc <__aeabi_fcmpgt>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d01d      	beq.n	80019ce <canh_bao+0xa2>
 8001992:	4b3b      	ldr	r3, [pc, #236]	; (8001a80 <canh_bao+0x154>)
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4b3b      	ldr	r3, [pc, #236]	; (8001a84 <canh_bao+0x158>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	429a      	cmp	r2, r3
 800199c:	da17      	bge.n	80019ce <canh_bao+0xa2>
	                    	 m1=0;m2++;m3=0;m4=0;
 800199e:	4b3a      	ldr	r3, [pc, #232]	; (8001a88 <canh_bao+0x15c>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	4b39      	ldr	r3, [pc, #228]	; (8001a8c <canh_bao+0x160>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	3301      	adds	r3, #1
 80019aa:	4a38      	ldr	r2, [pc, #224]	; (8001a8c <canh_bao+0x160>)
 80019ac:	6013      	str	r3, [r2, #0]
 80019ae:	4b38      	ldr	r3, [pc, #224]	; (8001a90 <canh_bao+0x164>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	4b37      	ldr	r3, [pc, #220]	; (8001a94 <canh_bao+0x168>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	601a      	str	r2, [r3, #0]
	                    	 if (m2==1) {SSD1306_Clear();}
 80019ba:	4b34      	ldr	r3, [pc, #208]	; (8001a8c <canh_bao+0x160>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	2b01      	cmp	r3, #1
 80019c0:	d101      	bne.n	80019c6 <canh_bao+0x9a>
 80019c2:	f000 ff2c 	bl	800281e <SSD1306_Clear>
	                    	 hien_thi(nhietdo);
 80019c6:	4834      	ldr	r0, [pc, #208]	; (8001a98 <canh_bao+0x16c>)
 80019c8:	f7ff ff9c 	bl	8001904 <hien_thi>
 80019cc:	e052      	b.n	8001a74 <canh_bao+0x148>
						}else if (Receive.Temp < war_temp && value > war_lux) {
 80019ce:	4b2a      	ldr	r3, [pc, #168]	; (8001a78 <canh_bao+0x14c>)
 80019d0:	689b      	ldr	r3, [r3, #8]
 80019d2:	4a2a      	ldr	r2, [pc, #168]	; (8001a7c <canh_bao+0x150>)
 80019d4:	6812      	ldr	r2, [r2, #0]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fb71 	bl	80010c0 <__aeabi_fcmplt>
 80019de:	4603      	mov	r3, r0
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d01d      	beq.n	8001a20 <canh_bao+0xf4>
 80019e4:	4b26      	ldr	r3, [pc, #152]	; (8001a80 <canh_bao+0x154>)
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	4b26      	ldr	r3, [pc, #152]	; (8001a84 <canh_bao+0x158>)
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	429a      	cmp	r2, r3
 80019ee:	dd17      	ble.n	8001a20 <canh_bao+0xf4>
							m1=0;m3++;m2=0;m4=0;
 80019f0:	4b25      	ldr	r3, [pc, #148]	; (8001a88 <canh_bao+0x15c>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	601a      	str	r2, [r3, #0]
 80019f6:	4b26      	ldr	r3, [pc, #152]	; (8001a90 <canh_bao+0x164>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	3301      	adds	r3, #1
 80019fc:	4a24      	ldr	r2, [pc, #144]	; (8001a90 <canh_bao+0x164>)
 80019fe:	6013      	str	r3, [r2, #0]
 8001a00:	4b22      	ldr	r3, [pc, #136]	; (8001a8c <canh_bao+0x160>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	601a      	str	r2, [r3, #0]
 8001a06:	4b23      	ldr	r3, [pc, #140]	; (8001a94 <canh_bao+0x168>)
 8001a08:	2200      	movs	r2, #0
 8001a0a:	601a      	str	r2, [r3, #0]
							if (m3==1) {SSD1306_Clear();}
 8001a0c:	4b20      	ldr	r3, [pc, #128]	; (8001a90 <canh_bao+0x164>)
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	2b01      	cmp	r3, #1
 8001a12:	d101      	bne.n	8001a18 <canh_bao+0xec>
 8001a14:	f000 ff03 	bl	800281e <SSD1306_Clear>
							hien_thi(lux);
 8001a18:	4820      	ldr	r0, [pc, #128]	; (8001a9c <canh_bao+0x170>)
 8001a1a:	f7ff ff73 	bl	8001904 <hien_thi>
 8001a1e:	e029      	b.n	8001a74 <canh_bao+0x148>
						}else if (Receive.Temp > war_temp && value > war_lux) {
 8001a20:	4b15      	ldr	r3, [pc, #84]	; (8001a78 <canh_bao+0x14c>)
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	4a15      	ldr	r2, [pc, #84]	; (8001a7c <canh_bao+0x150>)
 8001a26:	6812      	ldr	r2, [r2, #0]
 8001a28:	4611      	mov	r1, r2
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f7ff fb66 	bl	80010fc <__aeabi_fcmpgt>
 8001a30:	4603      	mov	r3, r0
 8001a32:	2b00      	cmp	r3, #0
 8001a34:	d100      	bne.n	8001a38 <canh_bao+0x10c>
							m1=0;m4++;m2=0;m3=0;
							if (m4==1) {SSD1306_Clear();}
							hien_thi(nguyhiem);
						}
}
 8001a36:	e01d      	b.n	8001a74 <canh_bao+0x148>
						}else if (Receive.Temp > war_temp && value > war_lux) {
 8001a38:	4b11      	ldr	r3, [pc, #68]	; (8001a80 <canh_bao+0x154>)
 8001a3a:	681a      	ldr	r2, [r3, #0]
 8001a3c:	4b11      	ldr	r3, [pc, #68]	; (8001a84 <canh_bao+0x158>)
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	429a      	cmp	r2, r3
 8001a42:	dd17      	ble.n	8001a74 <canh_bao+0x148>
							m1=0;m4++;m2=0;m3=0;
 8001a44:	4b10      	ldr	r3, [pc, #64]	; (8001a88 <canh_bao+0x15c>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	601a      	str	r2, [r3, #0]
 8001a4a:	4b12      	ldr	r3, [pc, #72]	; (8001a94 <canh_bao+0x168>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	4a10      	ldr	r2, [pc, #64]	; (8001a94 <canh_bao+0x168>)
 8001a52:	6013      	str	r3, [r2, #0]
 8001a54:	4b0d      	ldr	r3, [pc, #52]	; (8001a8c <canh_bao+0x160>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	601a      	str	r2, [r3, #0]
 8001a5a:	4b0d      	ldr	r3, [pc, #52]	; (8001a90 <canh_bao+0x164>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	601a      	str	r2, [r3, #0]
							if (m4==1) {SSD1306_Clear();}
 8001a60:	4b0c      	ldr	r3, [pc, #48]	; (8001a94 <canh_bao+0x168>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d101      	bne.n	8001a6c <canh_bao+0x140>
 8001a68:	f000 fed9 	bl	800281e <SSD1306_Clear>
							hien_thi(nguyhiem);
 8001a6c:	480c      	ldr	r0, [pc, #48]	; (8001aa0 <canh_bao+0x174>)
 8001a6e:	f7ff ff49 	bl	8001904 <hien_thi>
}
 8001a72:	e7ff      	b.n	8001a74 <canh_bao+0x148>
 8001a74:	bf00      	nop
 8001a76:	bd80      	pop	{r7, pc}
 8001a78:	20000378 	.word	0x20000378
 8001a7c:	20000010 	.word	0x20000010
 8001a80:	20000384 	.word	0x20000384
 8001a84:	20000014 	.word	0x20000014
 8001a88:	200003a0 	.word	0x200003a0
 8001a8c:	200003a4 	.word	0x200003a4
 8001a90:	200003a8 	.word	0x200003a8
 8001a94:	200003ac 	.word	0x200003ac
 8001a98:	0800f45c 	.word	0x0800f45c
 8001a9c:	0800f25c 	.word	0x0800f25c
 8001aa0:	0800f65c 	.word	0x0800f65c

08001aa4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001aa4:	b580      	push	{r7, lr}
 8001aa6:	b082      	sub	sp, #8
 8001aa8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001aaa:	f001 fa03 	bl	8002eb4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001aae:	f000 f87f 	bl	8001bb0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001ab2:	f000 f999 	bl	8001de8 <MX_GPIO_Init>
  MX_I2C1_Init();
 8001ab6:	f000 f8c1 	bl	8001c3c <MX_I2C1_Init>
  MX_I2C2_Init();
 8001aba:	f000 f8ed 	bl	8001c98 <MX_I2C2_Init>
  MX_TIM1_Init();
 8001abe:	f000 f919 	bl	8001cf4 <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001ac2:	f000 f967 	bl	8001d94 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart1,(uint8_t *)buffer, sizeof(buffer));
 8001ac6:	2208      	movs	r2, #8
 8001ac8:	4925      	ldr	r1, [pc, #148]	; (8001b60 <main+0xbc>)
 8001aca:	4826      	ldr	r0, [pc, #152]	; (8001b64 <main+0xc0>)
 8001acc:	f003 fff5 	bl	8005aba <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start(&htim1);
 8001ad0:	4825      	ldr	r0, [pc, #148]	; (8001b68 <main+0xc4>)
 8001ad2:	f003 fb1f 	bl	8005114 <HAL_TIM_Base_Start>
    SSD1306_Init (); // initialize the display
 8001ad6:	f000 fc7f 	bl	80023d8 <SSD1306_Init>

    xTaskCreate(Buttons,"Buttons",50,NULL,4,&Task0);
 8001ada:	4b24      	ldr	r3, [pc, #144]	; (8001b6c <main+0xc8>)
 8001adc:	9301      	str	r3, [sp, #4]
 8001ade:	2304      	movs	r3, #4
 8001ae0:	9300      	str	r3, [sp, #0]
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	2232      	movs	r2, #50	; 0x32
 8001ae6:	4922      	ldr	r1, [pc, #136]	; (8001b70 <main+0xcc>)
 8001ae8:	4822      	ldr	r0, [pc, #136]	; (8001b74 <main+0xd0>)
 8001aea:	f005 fc33 	bl	8007354 <xTaskCreate>
    xTaskCreate(TempRead,"TempRead",100,NULL,4,&Task1);
 8001aee:	4b22      	ldr	r3, [pc, #136]	; (8001b78 <main+0xd4>)
 8001af0:	9301      	str	r3, [sp, #4]
 8001af2:	2304      	movs	r3, #4
 8001af4:	9300      	str	r3, [sp, #0]
 8001af6:	2300      	movs	r3, #0
 8001af8:	2264      	movs	r2, #100	; 0x64
 8001afa:	4920      	ldr	r1, [pc, #128]	; (8001b7c <main+0xd8>)
 8001afc:	4820      	ldr	r0, [pc, #128]	; (8001b80 <main+0xdc>)
 8001afe:	f005 fc29 	bl	8007354 <xTaskCreate>
    xTaskCreate(LuxRead,"LuxRead",100,NULL,4,&Task2);
 8001b02:	4b20      	ldr	r3, [pc, #128]	; (8001b84 <main+0xe0>)
 8001b04:	9301      	str	r3, [sp, #4]
 8001b06:	2304      	movs	r3, #4
 8001b08:	9300      	str	r3, [sp, #0]
 8001b0a:	2300      	movs	r3, #0
 8001b0c:	2264      	movs	r2, #100	; 0x64
 8001b0e:	491e      	ldr	r1, [pc, #120]	; (8001b88 <main+0xe4>)
 8001b10:	481e      	ldr	r0, [pc, #120]	; (8001b8c <main+0xe8>)
 8001b12:	f005 fc1f 	bl	8007354 <xTaskCreate>
    xTaskCreate(Warning_system,"WarningSystem",75,NULL, 8,&Task4);
 8001b16:	4b1e      	ldr	r3, [pc, #120]	; (8001b90 <main+0xec>)
 8001b18:	9301      	str	r3, [sp, #4]
 8001b1a:	2308      	movs	r3, #8
 8001b1c:	9300      	str	r3, [sp, #0]
 8001b1e:	2300      	movs	r3, #0
 8001b20:	224b      	movs	r2, #75	; 0x4b
 8001b22:	491c      	ldr	r1, [pc, #112]	; (8001b94 <main+0xf0>)
 8001b24:	481c      	ldr	r0, [pc, #112]	; (8001b98 <main+0xf4>)
 8001b26:	f005 fc15 	bl	8007354 <xTaskCreate>
    xTaskCreate(ReceiveData,"ReceiveData",200,NULL,6,&Task3);
 8001b2a:	4b1c      	ldr	r3, [pc, #112]	; (8001b9c <main+0xf8>)
 8001b2c:	9301      	str	r3, [sp, #4]
 8001b2e:	2306      	movs	r3, #6
 8001b30:	9300      	str	r3, [sp, #0]
 8001b32:	2300      	movs	r3, #0
 8001b34:	22c8      	movs	r2, #200	; 0xc8
 8001b36:	491a      	ldr	r1, [pc, #104]	; (8001ba0 <main+0xfc>)
 8001b38:	481a      	ldr	r0, [pc, #104]	; (8001ba4 <main+0x100>)
 8001b3a:	f005 fc0b 	bl	8007354 <xTaskCreate>

    myQueue = xQueueCreate(10, sizeof(myStruct_t));
 8001b3e:	2200      	movs	r2, #0
 8001b40:	210c      	movs	r1, #12
 8001b42:	200a      	movs	r0, #10
 8001b44:	f004 ff67 	bl	8006a16 <xQueueGenericCreate>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	4a17      	ldr	r2, [pc, #92]	; (8001ba8 <main+0x104>)
 8001b4c:	6013      	str	r3, [r2, #0]
    xEventGroup = xEventGroupCreate();
 8001b4e:	f004 fc3f 	bl	80063d0 <xEventGroupCreate>
 8001b52:	4603      	mov	r3, r0
 8001b54:	4a15      	ldr	r2, [pc, #84]	; (8001bac <main+0x108>)
 8001b56:	6013      	str	r3, [r2, #0]
    vTaskStartScheduler();
 8001b58:	f005 fdee 	bl	8007738 <vTaskStartScheduler>


  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001b5c:	e7fe      	b.n	8001b5c <main+0xb8>
 8001b5e:	bf00      	nop
 8001b60:	2000038c 	.word	0x2000038c
 8001b64:	2000030c 	.word	0x2000030c
 8001b68:	200002c4 	.word	0x200002c4
 8001b6c:	20000350 	.word	0x20000350
 8001b70:	0800e3d4 	.word	0x0800e3d4
 8001b74:	080021bd 	.word	0x080021bd
 8001b78:	20000354 	.word	0x20000354
 8001b7c:	0800e3dc 	.word	0x0800e3dc
 8001b80:	08001fc1 	.word	0x08001fc1
 8001b84:	20000358 	.word	0x20000358
 8001b88:	0800e3e8 	.word	0x0800e3e8
 8001b8c:	0800201d 	.word	0x0800201d
 8001b90:	20000360 	.word	0x20000360
 8001b94:	0800e3f0 	.word	0x0800e3f0
 8001b98:	0800228d 	.word	0x0800228d
 8001b9c:	2000035c 	.word	0x2000035c
 8001ba0:	0800e400 	.word	0x0800e400
 8001ba4:	0800209d 	.word	0x0800209d
 8001ba8:	20000368 	.word	0x20000368
 8001bac:	20000364 	.word	0x20000364

08001bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b090      	sub	sp, #64	; 0x40
 8001bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001bb6:	f107 0318 	add.w	r3, r7, #24
 8001bba:	2228      	movs	r2, #40	; 0x28
 8001bbc:	2100      	movs	r1, #0
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f007 fad8 	bl	8009174 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001bc4:	1d3b      	adds	r3, r7, #4
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	601a      	str	r2, [r3, #0]
 8001bca:	605a      	str	r2, [r3, #4]
 8001bcc:	609a      	str	r2, [r3, #8]
 8001bce:	60da      	str	r2, [r3, #12]
 8001bd0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001bd6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bda:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001be0:	2301      	movs	r3, #1
 8001be2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001be4:	2302      	movs	r3, #2
 8001be6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001be8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001bec:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001bee:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001bf2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf4:	f107 0318 	add.w	r3, r7, #24
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f002 fdf1 	bl	80047e0 <HAL_RCC_OscConfig>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d001      	beq.n	8001c08 <SystemClock_Config+0x58>
  {
    Error_Handler();
 8001c04:	f000 fb7a 	bl	80022fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c08:	230f      	movs	r3, #15
 8001c0a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c0c:	2302      	movs	r3, #2
 8001c0e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c10:	2300      	movs	r3, #0
 8001c12:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001c14:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001c1e:	1d3b      	adds	r3, r7, #4
 8001c20:	2102      	movs	r1, #2
 8001c22:	4618      	mov	r0, r3
 8001c24:	f003 f85e 	bl	8004ce4 <HAL_RCC_ClockConfig>
 8001c28:	4603      	mov	r3, r0
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d001      	beq.n	8001c32 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001c2e:	f000 fb65 	bl	80022fc <Error_Handler>
  }
}
 8001c32:	bf00      	nop
 8001c34:	3740      	adds	r7, #64	; 0x40
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}
	...

08001c3c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001c40:	4b12      	ldr	r3, [pc, #72]	; (8001c8c <MX_I2C1_Init+0x50>)
 8001c42:	4a13      	ldr	r2, [pc, #76]	; (8001c90 <MX_I2C1_Init+0x54>)
 8001c44:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8001c46:	4b11      	ldr	r3, [pc, #68]	; (8001c8c <MX_I2C1_Init+0x50>)
 8001c48:	4a12      	ldr	r2, [pc, #72]	; (8001c94 <MX_I2C1_Init+0x58>)
 8001c4a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001c4c:	4b0f      	ldr	r3, [pc, #60]	; (8001c8c <MX_I2C1_Init+0x50>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001c52:	4b0e      	ldr	r3, [pc, #56]	; (8001c8c <MX_I2C1_Init+0x50>)
 8001c54:	2200      	movs	r2, #0
 8001c56:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001c58:	4b0c      	ldr	r3, [pc, #48]	; (8001c8c <MX_I2C1_Init+0x50>)
 8001c5a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001c5e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001c60:	4b0a      	ldr	r3, [pc, #40]	; (8001c8c <MX_I2C1_Init+0x50>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001c66:	4b09      	ldr	r3, [pc, #36]	; (8001c8c <MX_I2C1_Init+0x50>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001c6c:	4b07      	ldr	r3, [pc, #28]	; (8001c8c <MX_I2C1_Init+0x50>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001c72:	4b06      	ldr	r3, [pc, #24]	; (8001c8c <MX_I2C1_Init+0x50>)
 8001c74:	2200      	movs	r2, #0
 8001c76:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001c78:	4804      	ldr	r0, [pc, #16]	; (8001c8c <MX_I2C1_Init+0x50>)
 8001c7a:	f001 fcb5 	bl	80035e8 <HAL_I2C_Init>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d001      	beq.n	8001c88 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001c84:	f000 fb3a 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001c88:	bf00      	nop
 8001c8a:	bd80      	pop	{r7, pc}
 8001c8c:	2000021c 	.word	0x2000021c
 8001c90:	40005400 	.word	0x40005400
 8001c94:	00061a80 	.word	0x00061a80

08001c98 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001c9c:	4b12      	ldr	r3, [pc, #72]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001c9e:	4a13      	ldr	r2, [pc, #76]	; (8001cec <MX_I2C2_Init+0x54>)
 8001ca0:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001ca2:	4b11      	ldr	r3, [pc, #68]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001ca4:	4a12      	ldr	r2, [pc, #72]	; (8001cf0 <MX_I2C2_Init+0x58>)
 8001ca6:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001ca8:	4b0f      	ldr	r3, [pc, #60]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001cae:	4b0e      	ldr	r3, [pc, #56]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cb4:	4b0c      	ldr	r3, [pc, #48]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001cb6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cba:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001cbc:	4b0a      	ldr	r3, [pc, #40]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001cc2:	4b09      	ldr	r3, [pc, #36]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001cc4:	2200      	movs	r2, #0
 8001cc6:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001cc8:	4b07      	ldr	r3, [pc, #28]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001cca:	2200      	movs	r2, #0
 8001ccc:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001cce:	4b06      	ldr	r3, [pc, #24]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001cd4:	4804      	ldr	r0, [pc, #16]	; (8001ce8 <MX_I2C2_Init+0x50>)
 8001cd6:	f001 fc87 	bl	80035e8 <HAL_I2C_Init>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d001      	beq.n	8001ce4 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001ce0:	f000 fb0c 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001ce4:	bf00      	nop
 8001ce6:	bd80      	pop	{r7, pc}
 8001ce8:	20000270 	.word	0x20000270
 8001cec:	40005800 	.word	0x40005800
 8001cf0:	000186a0 	.word	0x000186a0

08001cf4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b086      	sub	sp, #24
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cfa:	f107 0308 	add.w	r3, r7, #8
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
 8001d02:	605a      	str	r2, [r3, #4]
 8001d04:	609a      	str	r2, [r3, #8]
 8001d06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d08:	463b      	mov	r3, r7
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	601a      	str	r2, [r3, #0]
 8001d0e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001d10:	4b1e      	ldr	r3, [pc, #120]	; (8001d8c <MX_TIM1_Init+0x98>)
 8001d12:	4a1f      	ldr	r2, [pc, #124]	; (8001d90 <MX_TIM1_Init+0x9c>)
 8001d14:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 50-1;
 8001d16:	4b1d      	ldr	r3, [pc, #116]	; (8001d8c <MX_TIM1_Init+0x98>)
 8001d18:	2231      	movs	r2, #49	; 0x31
 8001d1a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d1c:	4b1b      	ldr	r3, [pc, #108]	; (8001d8c <MX_TIM1_Init+0x98>)
 8001d1e:	2200      	movs	r2, #0
 8001d20:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 8001d22:	4b1a      	ldr	r3, [pc, #104]	; (8001d8c <MX_TIM1_Init+0x98>)
 8001d24:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001d28:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d2a:	4b18      	ldr	r3, [pc, #96]	; (8001d8c <MX_TIM1_Init+0x98>)
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001d30:	4b16      	ldr	r3, [pc, #88]	; (8001d8c <MX_TIM1_Init+0x98>)
 8001d32:	2200      	movs	r2, #0
 8001d34:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d36:	4b15      	ldr	r3, [pc, #84]	; (8001d8c <MX_TIM1_Init+0x98>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001d3c:	4813      	ldr	r0, [pc, #76]	; (8001d8c <MX_TIM1_Init+0x98>)
 8001d3e:	f003 f999 	bl	8005074 <HAL_TIM_Base_Init>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d001      	beq.n	8001d4c <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001d48:	f000 fad8 	bl	80022fc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d4c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d50:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001d52:	f107 0308 	add.w	r3, r7, #8
 8001d56:	4619      	mov	r1, r3
 8001d58:	480c      	ldr	r0, [pc, #48]	; (8001d8c <MX_TIM1_Init+0x98>)
 8001d5a:	f003 fb7f 	bl	800545c <HAL_TIM_ConfigClockSource>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d001      	beq.n	8001d68 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001d64:	f000 faca 	bl	80022fc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d6c:	2300      	movs	r3, #0
 8001d6e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001d70:	463b      	mov	r3, r7
 8001d72:	4619      	mov	r1, r3
 8001d74:	4805      	ldr	r0, [pc, #20]	; (8001d8c <MX_TIM1_Init+0x98>)
 8001d76:	f003 fd51 	bl	800581c <HAL_TIMEx_MasterConfigSynchronization>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	d001      	beq.n	8001d84 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001d80:	f000 fabc 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001d84:	bf00      	nop
 8001d86:	3718      	adds	r7, #24
 8001d88:	46bd      	mov	sp, r7
 8001d8a:	bd80      	pop	{r7, pc}
 8001d8c:	200002c4 	.word	0x200002c4
 8001d90:	40012c00 	.word	0x40012c00

08001d94 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001d98:	4b11      	ldr	r3, [pc, #68]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001d9a:	4a12      	ldr	r2, [pc, #72]	; (8001de4 <MX_USART1_UART_Init+0x50>)
 8001d9c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001d9e:	4b10      	ldr	r3, [pc, #64]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001da0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001da4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001da6:	4b0e      	ldr	r3, [pc, #56]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001da8:	2200      	movs	r2, #0
 8001daa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001dac:	4b0c      	ldr	r3, [pc, #48]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dae:	2200      	movs	r2, #0
 8001db0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001db2:	4b0b      	ldr	r3, [pc, #44]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001db4:	2200      	movs	r2, #0
 8001db6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001db8:	4b09      	ldr	r3, [pc, #36]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dba:	220c      	movs	r2, #12
 8001dbc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001dbe:	4b08      	ldr	r3, [pc, #32]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001dc4:	4b06      	ldr	r3, [pc, #24]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001dca:	4805      	ldr	r0, [pc, #20]	; (8001de0 <MX_USART1_UART_Init+0x4c>)
 8001dcc:	f003 fd96 	bl	80058fc <HAL_UART_Init>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001dd6:	f000 fa91 	bl	80022fc <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001dda:	bf00      	nop
 8001ddc:	bd80      	pop	{r7, pc}
 8001dde:	bf00      	nop
 8001de0:	2000030c 	.word	0x2000030c
 8001de4:	40013800 	.word	0x40013800

08001de8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b088      	sub	sp, #32
 8001dec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dee:	f107 0310 	add.w	r3, r7, #16
 8001df2:	2200      	movs	r2, #0
 8001df4:	601a      	str	r2, [r3, #0]
 8001df6:	605a      	str	r2, [r3, #4]
 8001df8:	609a      	str	r2, [r3, #8]
 8001dfa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfc:	4b33      	ldr	r3, [pc, #204]	; (8001ecc <MX_GPIO_Init+0xe4>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4a32      	ldr	r2, [pc, #200]	; (8001ecc <MX_GPIO_Init+0xe4>)
 8001e02:	f043 0320 	orr.w	r3, r3, #32
 8001e06:	6193      	str	r3, [r2, #24]
 8001e08:	4b30      	ldr	r3, [pc, #192]	; (8001ecc <MX_GPIO_Init+0xe4>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0320 	and.w	r3, r3, #32
 8001e10:	60fb      	str	r3, [r7, #12]
 8001e12:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e14:	4b2d      	ldr	r3, [pc, #180]	; (8001ecc <MX_GPIO_Init+0xe4>)
 8001e16:	699b      	ldr	r3, [r3, #24]
 8001e18:	4a2c      	ldr	r2, [pc, #176]	; (8001ecc <MX_GPIO_Init+0xe4>)
 8001e1a:	f043 0304 	orr.w	r3, r3, #4
 8001e1e:	6193      	str	r3, [r2, #24]
 8001e20:	4b2a      	ldr	r3, [pc, #168]	; (8001ecc <MX_GPIO_Init+0xe4>)
 8001e22:	699b      	ldr	r3, [r3, #24]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	60bb      	str	r3, [r7, #8]
 8001e2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e2c:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <MX_GPIO_Init+0xe4>)
 8001e2e:	699b      	ldr	r3, [r3, #24]
 8001e30:	4a26      	ldr	r2, [pc, #152]	; (8001ecc <MX_GPIO_Init+0xe4>)
 8001e32:	f043 0308 	orr.w	r3, r3, #8
 8001e36:	6193      	str	r3, [r2, #24]
 8001e38:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <MX_GPIO_Init+0xe4>)
 8001e3a:	699b      	ldr	r3, [r3, #24]
 8001e3c:	f003 0308 	and.w	r3, r3, #8
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);
 8001e44:	2200      	movs	r2, #0
 8001e46:	21e1      	movs	r1, #225	; 0xe1
 8001e48:	4821      	ldr	r0, [pc, #132]	; (8001ed0 <MX_GPIO_Init+0xe8>)
 8001e4a:	f001 fbb4 	bl	80035b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0, GPIO_PIN_RESET);
 8001e4e:	2200      	movs	r2, #0
 8001e50:	2101      	movs	r1, #1
 8001e52:	4820      	ldr	r0, [pc, #128]	; (8001ed4 <MX_GPIO_Init+0xec>)
 8001e54:	f001 fbaf 	bl	80035b6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001e58:	2301      	movs	r3, #1
 8001e5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e60:	2300      	movs	r3, #0
 8001e62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e64:	2302      	movs	r3, #2
 8001e66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e68:	f107 0310 	add.w	r3, r7, #16
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	4818      	ldr	r0, [pc, #96]	; (8001ed0 <MX_GPIO_Init+0xe8>)
 8001e70:	f001 fa06 	bl	8003280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 8001e74:	231e      	movs	r3, #30
 8001e76:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001e78:	2300      	movs	r3, #0
 8001e7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e80:	f107 0310 	add.w	r3, r7, #16
 8001e84:	4619      	mov	r1, r3
 8001e86:	4812      	ldr	r0, [pc, #72]	; (8001ed0 <MX_GPIO_Init+0xe8>)
 8001e88:	f001 f9fa 	bl	8003280 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001e8c:	23e0      	movs	r3, #224	; 0xe0
 8001e8e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e90:	2301      	movs	r3, #1
 8001e92:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001e94:	2302      	movs	r3, #2
 8001e96:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e98:	2302      	movs	r3, #2
 8001e9a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e9c:	f107 0310 	add.w	r3, r7, #16
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	480b      	ldr	r0, [pc, #44]	; (8001ed0 <MX_GPIO_Init+0xe8>)
 8001ea4:	f001 f9ec 	bl	8003280 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001ea8:	2301      	movs	r3, #1
 8001eaa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001eac:	2301      	movs	r3, #1
 8001eae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001eb0:	2302      	movs	r3, #2
 8001eb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb8:	f107 0310 	add.w	r3, r7, #16
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	4805      	ldr	r0, [pc, #20]	; (8001ed4 <MX_GPIO_Init+0xec>)
 8001ec0:	f001 f9de 	bl	8003280 <HAL_GPIO_Init>

}
 8001ec4:	bf00      	nop
 8001ec6:	3720      	adds	r7, #32
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40021000 	.word	0x40021000
 8001ed0:	40010800 	.word	0x40010800
 8001ed4:	40010c00 	.word	0x40010c00

08001ed8 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b082      	sub	sp, #8
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	if (huart->Instance == huart1.Instance) {
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b26      	ldr	r3, [pc, #152]	; (8001f80 <HAL_UART_RxCpltCallback+0xa8>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	429a      	cmp	r2, r3
 8001eea:	d145      	bne.n	8001f78 <HAL_UART_RxCpltCallback+0xa0>
		if(strstr(buffer,"che do")!=NULL)
 8001eec:	4925      	ldr	r1, [pc, #148]	; (8001f84 <HAL_UART_RxCpltCallback+0xac>)
 8001eee:	4826      	ldr	r0, [pc, #152]	; (8001f88 <HAL_UART_RxCpltCallback+0xb0>)
 8001ef0:	f008 f9df 	bl	800a2b2 <strstr>
 8001ef4:	4603      	mov	r3, r0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d005      	beq.n	8001f06 <HAL_UART_RxCpltCallback+0x2e>
		 {
			 sscanf(buffer+7, "%d", &chedo);
 8001efa:	4b24      	ldr	r3, [pc, #144]	; (8001f8c <HAL_UART_RxCpltCallback+0xb4>)
 8001efc:	4a24      	ldr	r2, [pc, #144]	; (8001f90 <HAL_UART_RxCpltCallback+0xb8>)
 8001efe:	4925      	ldr	r1, [pc, #148]	; (8001f94 <HAL_UART_RxCpltCallback+0xbc>)
 8001f00:	4618      	mov	r0, r3
 8001f02:	f008 f95f 	bl	800a1c4 <siscanf>
		  }
		if(strstr(buffer,"T1: ")!=NULL)
 8001f06:	4924      	ldr	r1, [pc, #144]	; (8001f98 <HAL_UART_RxCpltCallback+0xc0>)
 8001f08:	481f      	ldr	r0, [pc, #124]	; (8001f88 <HAL_UART_RxCpltCallback+0xb0>)
 8001f0a:	f008 f9d2 	bl	800a2b2 <strstr>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <HAL_UART_RxCpltCallback+0x48>
			{
			sscanf(buffer+4, "%d", (int *)&preid_temp);
 8001f14:	4b21      	ldr	r3, [pc, #132]	; (8001f9c <HAL_UART_RxCpltCallback+0xc4>)
 8001f16:	4a22      	ldr	r2, [pc, #136]	; (8001fa0 <HAL_UART_RxCpltCallback+0xc8>)
 8001f18:	491e      	ldr	r1, [pc, #120]	; (8001f94 <HAL_UART_RxCpltCallback+0xbc>)
 8001f1a:	4618      	mov	r0, r3
 8001f1c:	f008 f952 	bl	800a1c4 <siscanf>
			}
		if(strstr(buffer,"T2: ")!=NULL)
 8001f20:	4920      	ldr	r1, [pc, #128]	; (8001fa4 <HAL_UART_RxCpltCallback+0xcc>)
 8001f22:	4819      	ldr	r0, [pc, #100]	; (8001f88 <HAL_UART_RxCpltCallback+0xb0>)
 8001f24:	f008 f9c5 	bl	800a2b2 <strstr>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d005      	beq.n	8001f3a <HAL_UART_RxCpltCallback+0x62>
			{
					sscanf(buffer+4, "%d", (int *)&preid_lux);
 8001f2e:	4b1b      	ldr	r3, [pc, #108]	; (8001f9c <HAL_UART_RxCpltCallback+0xc4>)
 8001f30:	4a1d      	ldr	r2, [pc, #116]	; (8001fa8 <HAL_UART_RxCpltCallback+0xd0>)
 8001f32:	4918      	ldr	r1, [pc, #96]	; (8001f94 <HAL_UART_RxCpltCallback+0xbc>)
 8001f34:	4618      	mov	r0, r3
 8001f36:	f008 f945 	bl	800a1c4 <siscanf>
			}
		if(strstr(buffer,"Tem:")!=NULL)
 8001f3a:	491c      	ldr	r1, [pc, #112]	; (8001fac <HAL_UART_RxCpltCallback+0xd4>)
 8001f3c:	4812      	ldr	r0, [pc, #72]	; (8001f88 <HAL_UART_RxCpltCallback+0xb0>)
 8001f3e:	f008 f9b8 	bl	800a2b2 <strstr>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d005      	beq.n	8001f54 <HAL_UART_RxCpltCallback+0x7c>
										 {
				  sscanf(buffer+4, "%f", &war_temp);
 8001f48:	4b14      	ldr	r3, [pc, #80]	; (8001f9c <HAL_UART_RxCpltCallback+0xc4>)
 8001f4a:	4a19      	ldr	r2, [pc, #100]	; (8001fb0 <HAL_UART_RxCpltCallback+0xd8>)
 8001f4c:	4919      	ldr	r1, [pc, #100]	; (8001fb4 <HAL_UART_RxCpltCallback+0xdc>)
 8001f4e:	4618      	mov	r0, r3
 8001f50:	f008 f938 	bl	800a1c4 <siscanf>
		  }
		if(strstr(buffer,"Lux:")!=NULL)
 8001f54:	4918      	ldr	r1, [pc, #96]	; (8001fb8 <HAL_UART_RxCpltCallback+0xe0>)
 8001f56:	480c      	ldr	r0, [pc, #48]	; (8001f88 <HAL_UART_RxCpltCallback+0xb0>)
 8001f58:	f008 f9ab 	bl	800a2b2 <strstr>
 8001f5c:	4603      	mov	r3, r0
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d005      	beq.n	8001f6e <HAL_UART_RxCpltCallback+0x96>
		 {
				   sscanf(buffer+4, "%d", &war_lux);
 8001f62:	4b0e      	ldr	r3, [pc, #56]	; (8001f9c <HAL_UART_RxCpltCallback+0xc4>)
 8001f64:	4a15      	ldr	r2, [pc, #84]	; (8001fbc <HAL_UART_RxCpltCallback+0xe4>)
 8001f66:	490b      	ldr	r1, [pc, #44]	; (8001f94 <HAL_UART_RxCpltCallback+0xbc>)
 8001f68:	4618      	mov	r0, r3
 8001f6a:	f008 f92b 	bl	800a1c4 <siscanf>
		  }
	HAL_UART_Receive_IT(&huart1,(uint8_t *)buffer, sizeof(buffer));
 8001f6e:	2208      	movs	r2, #8
 8001f70:	4905      	ldr	r1, [pc, #20]	; (8001f88 <HAL_UART_RxCpltCallback+0xb0>)
 8001f72:	4803      	ldr	r0, [pc, #12]	; (8001f80 <HAL_UART_RxCpltCallback+0xa8>)
 8001f74:	f003 fda1 	bl	8005aba <HAL_UART_Receive_IT>
	}


}
 8001f78:	bf00      	nop
 8001f7a:	3708      	adds	r7, #8
 8001f7c:	46bd      	mov	sp, r7
 8001f7e:	bd80      	pop	{r7, pc}
 8001f80:	2000030c 	.word	0x2000030c
 8001f84:	0800e40c 	.word	0x0800e40c
 8001f88:	2000038c 	.word	0x2000038c
 8001f8c:	20000393 	.word	0x20000393
 8001f90:	20000018 	.word	0x20000018
 8001f94:	0800e414 	.word	0x0800e414
 8001f98:	0800e418 	.word	0x0800e418
 8001f9c:	20000390 	.word	0x20000390
 8001fa0:	20000008 	.word	0x20000008
 8001fa4:	0800e420 	.word	0x0800e420
 8001fa8:	2000000c 	.word	0x2000000c
 8001fac:	0800e428 	.word	0x0800e428
 8001fb0:	20000010 	.word	0x20000010
 8001fb4:	0800e430 	.word	0x0800e430
 8001fb8:	0800e434 	.word	0x0800e434
 8001fbc:	20000014 	.word	0x20000014

08001fc0 <TempRead>:

void TempRead(void * argument)
	  {
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b084      	sub	sp, #16
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]
	    /* USER CODE BEGIN 5 */
	uint32_t ticktemp;
	    /* Infinite loop */
	  	while (1)
	    {
	  		ticktemp= xTaskGetTickCount();
 8001fc8:	f005 fcc8 	bl	800795c <xTaskGetTickCount>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	60fb      	str	r3, [r7, #12]
   	  	  temp=DS18B20_Readvalue ();
 8001fd0:	f7ff fbd8 	bl	8001784 <DS18B20_Readvalue>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	4a0d      	ldr	r2, [pc, #52]	; (800200c <TempRead+0x4c>)
 8001fd8:	6013      	str	r3, [r2, #0]
	  	  Tranfer.ID=1;
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <TempRead+0x50>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	601a      	str	r2, [r3, #0]
	        Tranfer.Temp=temp;
 8001fe0:	4b0a      	ldr	r3, [pc, #40]	; (800200c <TempRead+0x4c>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	4a0a      	ldr	r2, [pc, #40]	; (8002010 <TempRead+0x50>)
 8001fe6:	6093      	str	r3, [r2, #8]
	        xQueueSend(myQueue,&Tranfer,portMAX_DELAY);
 8001fe8:	4b0a      	ldr	r3, [pc, #40]	; (8002014 <TempRead+0x54>)
 8001fea:	6818      	ldr	r0, [r3, #0]
 8001fec:	2300      	movs	r3, #0
 8001fee:	f04f 32ff 	mov.w	r2, #4294967295
 8001ff2:	4907      	ldr	r1, [pc, #28]	; (8002010 <TempRead+0x50>)
 8001ff4:	f004 fd70 	bl	8006ad8 <xQueueGenericSend>
	        vTaskDelayUntil(&ticktemp, preid_temp);
 8001ff8:	4b07      	ldr	r3, [pc, #28]	; (8002018 <TempRead+0x58>)
 8001ffa:	681a      	ldr	r2, [r3, #0]
 8001ffc:	f107 030c 	add.w	r3, r7, #12
 8002000:	4611      	mov	r1, r2
 8002002:	4618      	mov	r0, r3
 8002004:	f005 fae6 	bl	80075d4 <vTaskDelayUntil>
	  		ticktemp= xTaskGetTickCount();
 8002008:	e7de      	b.n	8001fc8 <TempRead+0x8>
 800200a:	bf00      	nop
 800200c:	20000388 	.word	0x20000388
 8002010:	2000036c 	.word	0x2000036c
 8002014:	20000368 	.word	0x20000368
 8002018:	20000008 	.word	0x20000008

0800201c <LuxRead>:
	    /* USER CODE END 5 */
	  }


 void LuxRead(void * argument)
	  {
 800201c:	b580      	push	{r7, lr}
 800201e:	b084      	sub	sp, #16
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
	    /* USER CODE BEGIN LuxRead */
	        uint32_t ticklux;
	  		BH1750_init_i2c(&hi2c2);
 8002024:	4817      	ldr	r0, [pc, #92]	; (8002084 <LuxRead+0x68>)
 8002026:	f7ff f97b 	bl	8001320 <BH1750_init_i2c>
	  		BH1750_device_t* test_dev = BH1750_init_dev_struct(&hi2c2, "test device", true);
 800202a:	2201      	movs	r2, #1
 800202c:	4916      	ldr	r1, [pc, #88]	; (8002088 <LuxRead+0x6c>)
 800202e:	4815      	ldr	r0, [pc, #84]	; (8002084 <LuxRead+0x68>)
 8002030:	f7ff f9da 	bl	80013e8 <BH1750_init_dev_struct>
 8002034:	60f8      	str	r0, [r7, #12]
	  	    BH1750_init_dev(test_dev);
 8002036:	68f8      	ldr	r0, [r7, #12]
 8002038:	f7ff fa1c 	bl	8001474 <BH1750_init_dev>
	    /* Infinite loop */
	   while (1)
	    {//Key = KEYPAD_Read();
		   ticklux= xTaskGetTickCount();
 800203c:	f005 fc8e 	bl	800795c <xTaskGetTickCount>
 8002040:	4603      	mov	r3, r0
 8002042:	60bb      	str	r3, [r7, #8]
		  	  BH1750_get_lumen(test_dev);
 8002044:	68f8      	ldr	r0, [r7, #12]
 8002046:	f7ff fa75 	bl	8001534 <BH1750_get_lumen>
	  	 	  value=test_dev->value;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	895b      	ldrh	r3, [r3, #10]
 800204e:	461a      	mov	r2, r3
 8002050:	4b0e      	ldr	r3, [pc, #56]	; (800208c <LuxRead+0x70>)
 8002052:	601a      	str	r2, [r3, #0]
	  	 	  	 	Tranfer.ID=2;
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <LuxRead+0x74>)
 8002056:	2202      	movs	r2, #2
 8002058:	601a      	str	r2, [r3, #0]
	  	 	  	 	Tranfer.light=value;
 800205a:	4b0c      	ldr	r3, [pc, #48]	; (800208c <LuxRead+0x70>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4a0c      	ldr	r2, [pc, #48]	; (8002090 <LuxRead+0x74>)
 8002060:	6053      	str	r3, [r2, #4]
	  	 	  	xQueueSend(myQueue,&Tranfer,portMAX_DELAY);
 8002062:	4b0c      	ldr	r3, [pc, #48]	; (8002094 <LuxRead+0x78>)
 8002064:	6818      	ldr	r0, [r3, #0]
 8002066:	2300      	movs	r3, #0
 8002068:	f04f 32ff 	mov.w	r2, #4294967295
 800206c:	4908      	ldr	r1, [pc, #32]	; (8002090 <LuxRead+0x74>)
 800206e:	f004 fd33 	bl	8006ad8 <xQueueGenericSend>
	  	 	 vTaskDelayUntil(&ticklux, preid_lux);
 8002072:	4b09      	ldr	r3, [pc, #36]	; (8002098 <LuxRead+0x7c>)
 8002074:	681a      	ldr	r2, [r3, #0]
 8002076:	f107 0308 	add.w	r3, r7, #8
 800207a:	4611      	mov	r1, r2
 800207c:	4618      	mov	r0, r3
 800207e:	f005 faa9 	bl	80075d4 <vTaskDelayUntil>
		   ticklux= xTaskGetTickCount();
 8002082:	e7db      	b.n	800203c <LuxRead+0x20>
 8002084:	20000270 	.word	0x20000270
 8002088:	0800e43c 	.word	0x0800e43c
 800208c:	20000384 	.word	0x20000384
 8002090:	2000036c 	.word	0x2000036c
 8002094:	20000368 	.word	0x20000368
 8002098:	2000000c 	.word	0x2000000c

0800209c <ReceiveData>:
	    /* USER CODE END LuxRead */
	  }


 void ReceiveData(void  * argument)
	  {
 800209c:	b580      	push	{r7, lr}
 800209e:	b08e      	sub	sp, #56	; 0x38
 80020a0:	af02      	add	r7, sp, #8
 80020a2:	6078      	str	r0, [r7, #4]
	  	uint32_t ticknow;

	    /* Infinite loop */
	  	while (1)
	    {
	      xQueueReceive(myQueue,&(Receive), portMAX_DELAY);
 80020a4:	4b3b      	ldr	r3, [pc, #236]	; (8002194 <ReceiveData+0xf8>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f04f 32ff 	mov.w	r2, #4294967295
 80020ac:	493a      	ldr	r1, [pc, #232]	; (8002198 <ReceiveData+0xfc>)
 80020ae:	4618      	mov	r0, r3
 80020b0:	f004 fea8 	bl	8006e04 <xQueueReceive>
	      if (Receive.ID==1)
 80020b4:	4b38      	ldr	r3, [pc, #224]	; (8002198 <ReceiveData+0xfc>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	d13b      	bne.n	8002134 <ReceiveData+0x98>
	        {
	    	ticknow= xTaskGetTickCount();
 80020bc:	f005 fc4e 	bl	800795c <xTaskGetTickCount>
 80020c0:	62f8      	str	r0, [r7, #44]	; 0x2c
	  	  sprintf(Temp, "Temp:%.1f", Receive.Temp);
 80020c2:	4b35      	ldr	r3, [pc, #212]	; (8002198 <ReceiveData+0xfc>)
 80020c4:	689b      	ldr	r3, [r3, #8]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe f9ae 	bl	8000428 <__aeabi_f2d>
 80020cc:	4602      	mov	r2, r0
 80020ce:	460b      	mov	r3, r1
 80020d0:	f107 001c 	add.w	r0, r7, #28
 80020d4:	4931      	ldr	r1, [pc, #196]	; (800219c <ReceiveData+0x100>)
 80020d6:	f008 f855 	bl	800a184 <siprintf>
               canh_bao();
 80020da:	f7ff fc27 	bl	800192c <canh_bao>
	  	       hien_thitemp(Temp);
 80020de:	f107 031c 	add.w	r3, r7, #28
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fbd0 	bl	8001888 <hien_thitemp>
	  	        if (chedo==1 || chedo == 3) {
 80020e8:	4b2d      	ldr	r3, [pc, #180]	; (80021a0 <ReceiveData+0x104>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d003      	beq.n	80020f8 <ReceiveData+0x5c>
 80020f0:	4b2b      	ldr	r3, [pc, #172]	; (80021a0 <ReceiveData+0x104>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d10b      	bne.n	8002110 <ReceiveData+0x74>
	  	        	printf("Temperature: %.1f   S:%d\n",Receive.Temp,(int)ticknow);
 80020f8:	4b27      	ldr	r3, [pc, #156]	; (8002198 <ReceiveData+0xfc>)
 80020fa:	689b      	ldr	r3, [r3, #8]
 80020fc:	4618      	mov	r0, r3
 80020fe:	f7fe f993 	bl	8000428 <__aeabi_f2d>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002108:	9100      	str	r1, [sp, #0]
 800210a:	4826      	ldr	r0, [pc, #152]	; (80021a4 <ReceiveData+0x108>)
 800210c:	f007 ff98 	bl	800a040 <iprintf>
				}
	  	      if (Receive.Temp >= war_temp) {
 8002110:	4b21      	ldr	r3, [pc, #132]	; (8002198 <ReceiveData+0xfc>)
 8002112:	689b      	ldr	r3, [r3, #8]
 8002114:	4a24      	ldr	r2, [pc, #144]	; (80021a8 <ReceiveData+0x10c>)
 8002116:	6812      	ldr	r2, [r2, #0]
 8002118:	4611      	mov	r1, r2
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe ffe4 	bl	80010e8 <__aeabi_fcmpge>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d035      	beq.n	8002192 <ReceiveData+0xf6>
	  	      	  	               	xEventGroupSetBits(xEventGroup,BIT_temp);/* The bits being set. */
 8002126:	4b21      	ldr	r3, [pc, #132]	; (80021ac <ReceiveData+0x110>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	2101      	movs	r1, #1
 800212c:	4618      	mov	r0, r3
 800212e:	f004 fa37 	bl	80065a0 <xEventGroupSetBits>
 8002132:	e7b7      	b.n	80020a4 <ReceiveData+0x8>
	  	      	  	   			}
	        }else if (Receive.ID==2)
 8002134:	4b18      	ldr	r3, [pc, #96]	; (8002198 <ReceiveData+0xfc>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	2b02      	cmp	r3, #2
 800213a:	d1b3      	bne.n	80020a4 <ReceiveData+0x8>
	           {
	            ticknow= xTaskGetTickCount();
 800213c:	f005 fc0e 	bl	800795c <xTaskGetTickCount>
 8002140:	62f8      	str	r0, [r7, #44]	; 0x2c
	  	      sprintf(light, "%d", Receive.light);
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <ReceiveData+0xfc>)
 8002144:	685a      	ldr	r2, [r3, #4]
 8002146:	f107 030c 	add.w	r3, r7, #12
 800214a:	4919      	ldr	r1, [pc, #100]	; (80021b0 <ReceiveData+0x114>)
 800214c:	4618      	mov	r0, r3
 800214e:	f008 f819 	bl	800a184 <siprintf>
	  	       hien_thilux(light);
 8002152:	f107 030c 	add.w	r3, r7, #12
 8002156:	4618      	mov	r0, r3
 8002158:	f7ff fb56 	bl	8001808 <hien_thilux>
	  	     if (chedo==2 || chedo == 3) {
 800215c:	4b10      	ldr	r3, [pc, #64]	; (80021a0 <ReceiveData+0x104>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b02      	cmp	r3, #2
 8002162:	d003      	beq.n	800216c <ReceiveData+0xd0>
 8002164:	4b0e      	ldr	r3, [pc, #56]	; (80021a0 <ReceiveData+0x104>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2b03      	cmp	r3, #3
 800216a:	d106      	bne.n	800217a <ReceiveData+0xde>
	  	       printf("Light: %d   S:%d\n",Receive.light,(int)ticknow);
 800216c:	4b0a      	ldr	r3, [pc, #40]	; (8002198 <ReceiveData+0xfc>)
 800216e:	685b      	ldr	r3, [r3, #4]
 8002170:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002172:	4619      	mov	r1, r3
 8002174:	480f      	ldr	r0, [pc, #60]	; (80021b4 <ReceiveData+0x118>)
 8002176:	f007 ff63 	bl	800a040 <iprintf>

	  	     }

	  	   if (Receive.light >= war_lux) {
 800217a:	4b07      	ldr	r3, [pc, #28]	; (8002198 <ReceiveData+0xfc>)
 800217c:	685a      	ldr	r2, [r3, #4]
 800217e:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <ReceiveData+0x11c>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	429a      	cmp	r2, r3
 8002184:	db8e      	blt.n	80020a4 <ReceiveData+0x8>
	  	               	xEventGroupSetBits(xEventGroup,BIT_lux);/* The bits being set. */
 8002186:	4b09      	ldr	r3, [pc, #36]	; (80021ac <ReceiveData+0x110>)
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2102      	movs	r1, #2
 800218c:	4618      	mov	r0, r3
 800218e:	f004 fa07 	bl	80065a0 <xEventGroupSetBits>
	      xQueueReceive(myQueue,&(Receive), portMAX_DELAY);
 8002192:	e787      	b.n	80020a4 <ReceiveData+0x8>
 8002194:	20000368 	.word	0x20000368
 8002198:	20000378 	.word	0x20000378
 800219c:	0800e448 	.word	0x0800e448
 80021a0:	20000018 	.word	0x20000018
 80021a4:	0800e454 	.word	0x0800e454
 80021a8:	20000010 	.word	0x20000010
 80021ac:	20000364 	.word	0x20000364
 80021b0:	0800e414 	.word	0x0800e414
 80021b4:	0800e470 	.word	0x0800e470
 80021b8:	20000014 	.word	0x20000014

080021bc <Buttons>:
	    }
	    /* USER CODE END ReceiveData */
	  }

 void Buttons(void *argument)
 {
 80021bc:	b580      	push	{r7, lr}
 80021be:	b084      	sub	sp, #16
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]

 	char a;
 	    /* Infinite loop */
 	  	while (1)
 	    {
 	  		Key = KEYPAD_Read();
 80021c4:	f7ff f822 	bl	800120c <KEYPAD_Read>
 80021c8:	4603      	mov	r3, r0
 80021ca:	461a      	mov	r2, r3
 80021cc:	4b2a      	ldr	r3, [pc, #168]	; (8002278 <Buttons+0xbc>)
 80021ce:	701a      	strb	r2, [r3, #0]
 	  		     if (Key != KEYPAD_NOT_PRESSED) {
 80021d0:	4b29      	ldr	r3, [pc, #164]	; (8002278 <Buttons+0xbc>)
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d04a      	beq.n	800226e <Buttons+0xb2>
 	  		    	 if (Key=='*' || Key=='#') {
 80021d8:	4b27      	ldr	r3, [pc, #156]	; (8002278 <Buttons+0xbc>)
 80021da:	781b      	ldrb	r3, [r3, #0]
 80021dc:	2b2a      	cmp	r3, #42	; 0x2a
 80021de:	d003      	beq.n	80021e8 <Buttons+0x2c>
 80021e0:	4b25      	ldr	r3, [pc, #148]	; (8002278 <Buttons+0xbc>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	2b23      	cmp	r3, #35	; 0x23
 80021e6:	d142      	bne.n	800226e <Buttons+0xb2>
 	  					a=Key;
 80021e8:	4b23      	ldr	r3, [pc, #140]	; (8002278 <Buttons+0xbc>)
 80021ea:	781b      	ldrb	r3, [r3, #0]
 80021ec:	73fb      	strb	r3, [r7, #15]
 	  		        	while(Key != '\0')
 80021ee:	e005      	b.n	80021fc <Buttons+0x40>
 	  					{
 	  						Key = KEYPAD_Read();
 80021f0:	f7ff f80c 	bl	800120c <KEYPAD_Read>
 80021f4:	4603      	mov	r3, r0
 80021f6:	461a      	mov	r2, r3
 80021f8:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <Buttons+0xbc>)
 80021fa:	701a      	strb	r2, [r3, #0]
 	  		        	while(Key != '\0')
 80021fc:	4b1e      	ldr	r3, [pc, #120]	; (8002278 <Buttons+0xbc>)
 80021fe:	781b      	ldrb	r3, [r3, #0]
 8002200:	2b00      	cmp	r3, #0
 8002202:	d1f5      	bne.n	80021f0 <Buttons+0x34>
 	  					}
 	  		       if (a=='*') {
 8002204:	7bfb      	ldrb	r3, [r7, #15]
 8002206:	2b2a      	cmp	r3, #42	; 0x2a
 8002208:	d117      	bne.n	800223a <Buttons+0x7e>
 	  		    	   chuki(anhsang, Key);
 800220a:	4b1b      	ldr	r3, [pc, #108]	; (8002278 <Buttons+0xbc>)
 800220c:	781b      	ldrb	r3, [r3, #0]
 800220e:	4619      	mov	r1, r3
 8002210:	481a      	ldr	r0, [pc, #104]	; (800227c <Buttons+0xc0>)
 8002212:	f7ff fb4f 	bl	80018b4 <chuki>
 	  		    	preid_lux = atof(anhsang);
 8002216:	4819      	ldr	r0, [pc, #100]	; (800227c <Buttons+0xc0>)
 8002218:	f006 ff60 	bl	80090dc <atof>
 800221c:	4602      	mov	r2, r0
 800221e:	460b      	mov	r3, r1
 8002220:	4610      	mov	r0, r2
 8002222:	4619      	mov	r1, r3
 8002224:	f7fe fc30 	bl	8000a88 <__aeabi_d2uiz>
 8002228:	4603      	mov	r3, r0
 800222a:	4a15      	ldr	r2, [pc, #84]	; (8002280 <Buttons+0xc4>)
 800222c:	6013      	str	r3, [r2, #0]
 	  		    	memset(anhsang,'\0', sizeof(anhsang));
 800222e:	2204      	movs	r2, #4
 8002230:	2100      	movs	r1, #0
 8002232:	4812      	ldr	r0, [pc, #72]	; (800227c <Buttons+0xc0>)
 8002234:	f006 ff9e 	bl	8009174 <memset>
 8002238:	e019      	b.n	800226e <Buttons+0xb2>
				   }else if (a=='#') {
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	2b23      	cmp	r3, #35	; 0x23
 800223e:	d116      	bne.n	800226e <Buttons+0xb2>
					   chuki(nhiet_do, Key);
 8002240:	4b0d      	ldr	r3, [pc, #52]	; (8002278 <Buttons+0xbc>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4619      	mov	r1, r3
 8002246:	480f      	ldr	r0, [pc, #60]	; (8002284 <Buttons+0xc8>)
 8002248:	f7ff fb34 	bl	80018b4 <chuki>
					   preid_temp = atof(nhiet_do);
 800224c:	480d      	ldr	r0, [pc, #52]	; (8002284 <Buttons+0xc8>)
 800224e:	f006 ff45 	bl	80090dc <atof>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	4610      	mov	r0, r2
 8002258:	4619      	mov	r1, r3
 800225a:	f7fe fc15 	bl	8000a88 <__aeabi_d2uiz>
 800225e:	4603      	mov	r3, r0
 8002260:	4a09      	ldr	r2, [pc, #36]	; (8002288 <Buttons+0xcc>)
 8002262:	6013      	str	r3, [r2, #0]
					   memset(nhiet_do,'\0', sizeof(nhiet_do));
 8002264:	2204      	movs	r2, #4
 8002266:	2100      	movs	r1, #0
 8002268:	4806      	ldr	r0, [pc, #24]	; (8002284 <Buttons+0xc8>)
 800226a:	f006 ff83 	bl	8009174 <memset>
				}
 	  		         }


 	  		     }
                     vTaskDelay(100);
 800226e:	2064      	movs	r0, #100	; 0x64
 8002270:	f005 fa2e 	bl	80076d0 <vTaskDelay>
 	  		Key = KEYPAD_Read();
 8002274:	e7a6      	b.n	80021c4 <Buttons+0x8>
 8002276:	bf00      	nop
 8002278:	20000394 	.word	0x20000394
 800227c:	20000398 	.word	0x20000398
 8002280:	2000000c 	.word	0x2000000c
 8002284:	2000039c 	.word	0x2000039c
 8002288:	20000008 	.word	0x20000008

0800228c <Warning_system>:
 	    }
   /* USER CODE END 5 */
 }
 void Warning_system(void * argument)
 	  {
 800228c:	b580      	push	{r7, lr}
 800228e:	b086      	sub	sp, #24
 8002290:	af02      	add	r7, sp, #8
 8002292:	6078      	str	r0, [r7, #4]
 	    /* USER CODE BEGIN 5 */

 	    /* Infinite loop */
 	  	while (1)
 	    {
 	  		EventBits_t uxBits=xEventGroupWaitBits(
 8002294:	4b0d      	ldr	r3, [pc, #52]	; (80022cc <Warning_system+0x40>)
 8002296:	6818      	ldr	r0, [r3, #0]
 8002298:	f04f 33ff 	mov.w	r3, #4294967295
 800229c:	9300      	str	r3, [sp, #0]
 800229e:	2300      	movs	r3, #0
 80022a0:	2201      	movs	r2, #1
 80022a2:	2103      	movs	r1, #3
 80022a4:	f004 f8ae 	bl	8006404 <xEventGroupWaitBits>
 80022a8:	60f8      	str	r0, [r7, #12]
 	            BIT_temp|BIT_lux , /* The bits within the event group to wait for. */
 	            pdTRUE,        /* BIT_0 & BIT_4 should be cleared before returning. */
 	            pdFALSE,       /* Don't wait for both bits, either bit will do. */
 	            portMAX_DELAY );/* Wait a maximum of 100ms for either bit to be set. */

 	  		if (uxBits & BIT_temp) {
 80022aa:	68fb      	ldr	r3, [r7, #12]
 80022ac:	f003 0301 	and.w	r3, r3, #1
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d002      	beq.n	80022ba <Warning_system+0x2e>
 	  			printf("The temperature is too high\n\n");
 80022b4:	4806      	ldr	r0, [pc, #24]	; (80022d0 <Warning_system+0x44>)
 80022b6:	f007 ff49 	bl	800a14c <puts>
			}
 	  		if (uxBits & BIT_lux) {
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	f003 0302 	and.w	r3, r3, #2
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d0e7      	beq.n	8002294 <Warning_system+0x8>
 	  		 	printf("The light is too high\n\n");
 80022c4:	4803      	ldr	r0, [pc, #12]	; (80022d4 <Warning_system+0x48>)
 80022c6:	f007 ff41 	bl	800a14c <puts>
 	    {
 80022ca:	e7e3      	b.n	8002294 <Warning_system+0x8>
 80022cc:	20000364 	.word	0x20000364
 80022d0:	0800e484 	.word	0x0800e484
 80022d4:	0800e4a4 	.word	0x0800e4a4

080022d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b082      	sub	sp, #8
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM4) {
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	4a04      	ldr	r2, [pc, #16]	; (80022f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d101      	bne.n	80022ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80022ea:	f000 fdf9 	bl	8002ee0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80022ee:	bf00      	nop
 80022f0:	3708      	adds	r7, #8
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	40000800 	.word	0x40000800

080022fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80022fc:	b480      	push	{r7}
 80022fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002300:	b672      	cpsid	i
}
 8002302:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002304:	e7fe      	b.n	8002304 <Error_Handler+0x8>

08002306 <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 8002306:	b580      	push	{r7, lr}
 8002308:	b086      	sub	sp, #24
 800230a:	af00      	add	r7, sp, #0
 800230c:	60ba      	str	r2, [r7, #8]
 800230e:	461a      	mov	r2, r3
 8002310:	4603      	mov	r3, r0
 8002312:	81fb      	strh	r3, [r7, #14]
 8002314:	460b      	mov	r3, r1
 8002316:	81bb      	strh	r3, [r7, #12]
 8002318:	4613      	mov	r3, r2
 800231a:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 800231c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002320:	3307      	adds	r3, #7
 8002322:	2b00      	cmp	r3, #0
 8002324:	da00      	bge.n	8002328 <SSD1306_DrawBitmap+0x22>
 8002326:	3307      	adds	r3, #7
 8002328:	10db      	asrs	r3, r3, #3
 800232a:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 800232c:	2300      	movs	r3, #0
 800232e:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 8002330:	2300      	movs	r3, #0
 8002332:	82bb      	strh	r3, [r7, #20]
 8002334:	e044      	b.n	80023c0 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 8002336:	2300      	movs	r3, #0
 8002338:	827b      	strh	r3, [r7, #18]
 800233a:	e02f      	b.n	800239c <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 800233c:	8a7b      	ldrh	r3, [r7, #18]
 800233e:	f003 0307 	and.w	r3, r3, #7
 8002342:	2b00      	cmp	r3, #0
 8002344:	d003      	beq.n	800234e <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 8002346:	7dfb      	ldrb	r3, [r7, #23]
 8002348:	005b      	lsls	r3, r3, #1
 800234a:	75fb      	strb	r3, [r7, #23]
 800234c:	e012      	b.n	8002374 <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 800234e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8002352:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 8002356:	fb03 f202 	mul.w	r2, r3, r2
 800235a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800235e:	2b00      	cmp	r3, #0
 8002360:	da00      	bge.n	8002364 <SSD1306_DrawBitmap+0x5e>
 8002362:	3307      	adds	r3, #7
 8002364:	10db      	asrs	r3, r3, #3
 8002366:	b21b      	sxth	r3, r3
 8002368:	4413      	add	r3, r2
 800236a:	461a      	mov	r2, r3
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	4413      	add	r3, r2
 8002370:	781b      	ldrb	r3, [r3, #0]
 8002372:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 8002374:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8002378:	2b00      	cmp	r3, #0
 800237a:	da09      	bge.n	8002390 <SSD1306_DrawBitmap+0x8a>
 800237c:	89fa      	ldrh	r2, [r7, #14]
 800237e:	8a7b      	ldrh	r3, [r7, #18]
 8002380:	4413      	add	r3, r2
 8002382:	b29b      	uxth	r3, r3
 8002384:	89b9      	ldrh	r1, [r7, #12]
 8002386:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8002388:	b2d2      	uxtb	r2, r2
 800238a:	4618      	mov	r0, r3
 800238c:	f000 f92e 	bl	80025ec <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8002390:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8002394:	b29b      	uxth	r3, r3
 8002396:	3301      	adds	r3, #1
 8002398:	b29b      	uxth	r3, r3
 800239a:	827b      	strh	r3, [r7, #18]
 800239c:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 80023a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023a4:	429a      	cmp	r2, r3
 80023a6:	dbc9      	blt.n	800233c <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 80023a8:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3301      	adds	r3, #1
 80023b0:	b29b      	uxth	r3, r3
 80023b2:	82bb      	strh	r3, [r7, #20]
 80023b4:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80023b8:	b29b      	uxth	r3, r3
 80023ba:	3301      	adds	r3, #1
 80023bc:	b29b      	uxth	r3, r3
 80023be:	81bb      	strh	r3, [r7, #12]
 80023c0:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 80023c4:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80023c8:	429a      	cmp	r2, r3
 80023ca:	dbb4      	blt.n	8002336 <SSD1306_DrawBitmap+0x30>
        }
    }
}
 80023cc:	bf00      	nop
 80023ce:	bf00      	nop
 80023d0:	3718      	adds	r7, #24
 80023d2:	46bd      	mov	sp, r7
 80023d4:	bd80      	pop	{r7, pc}
	...

080023d8 <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 80023d8:	b580      	push	{r7, lr}
 80023da:	b082      	sub	sp, #8
 80023dc:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 80023de:	f000 fa27 	bl	8002830 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 80023e2:	f644 6320 	movw	r3, #20000	; 0x4e20
 80023e6:	2201      	movs	r2, #1
 80023e8:	2178      	movs	r1, #120	; 0x78
 80023ea:	485b      	ldr	r0, [pc, #364]	; (8002558 <SSD1306_Init+0x180>)
 80023ec:	f001 fd9e 	bl	8003f2c <HAL_I2C_IsDeviceReady>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d001      	beq.n	80023fa <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	e0a9      	b.n	800254e <SSD1306_Init+0x176>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 80023fa:	f640 13c4 	movw	r3, #2500	; 0x9c4
 80023fe:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002400:	e002      	b.n	8002408 <SSD1306_Init+0x30>
		p--;
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	3b01      	subs	r3, #1
 8002406:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d1f9      	bne.n	8002402 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 800240e:	22ae      	movs	r2, #174	; 0xae
 8002410:	2100      	movs	r1, #0
 8002412:	2078      	movs	r0, #120	; 0x78
 8002414:	f000 fa86 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 8002418:	2220      	movs	r2, #32
 800241a:	2100      	movs	r1, #0
 800241c:	2078      	movs	r0, #120	; 0x78
 800241e:	f000 fa81 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8002422:	2210      	movs	r2, #16
 8002424:	2100      	movs	r1, #0
 8002426:	2078      	movs	r0, #120	; 0x78
 8002428:	f000 fa7c 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 800242c:	22b0      	movs	r2, #176	; 0xb0
 800242e:	2100      	movs	r1, #0
 8002430:	2078      	movs	r0, #120	; 0x78
 8002432:	f000 fa77 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 8002436:	22c8      	movs	r2, #200	; 0xc8
 8002438:	2100      	movs	r1, #0
 800243a:	2078      	movs	r0, #120	; 0x78
 800243c:	f000 fa72 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 8002440:	2200      	movs	r2, #0
 8002442:	2100      	movs	r1, #0
 8002444:	2078      	movs	r0, #120	; 0x78
 8002446:	f000 fa6d 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 800244a:	2210      	movs	r2, #16
 800244c:	2100      	movs	r1, #0
 800244e:	2078      	movs	r0, #120	; 0x78
 8002450:	f000 fa68 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 8002454:	2240      	movs	r2, #64	; 0x40
 8002456:	2100      	movs	r1, #0
 8002458:	2078      	movs	r0, #120	; 0x78
 800245a:	f000 fa63 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 800245e:	2281      	movs	r2, #129	; 0x81
 8002460:	2100      	movs	r1, #0
 8002462:	2078      	movs	r0, #120	; 0x78
 8002464:	f000 fa5e 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 8002468:	22ff      	movs	r2, #255	; 0xff
 800246a:	2100      	movs	r1, #0
 800246c:	2078      	movs	r0, #120	; 0x78
 800246e:	f000 fa59 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 8002472:	22a1      	movs	r2, #161	; 0xa1
 8002474:	2100      	movs	r1, #0
 8002476:	2078      	movs	r0, #120	; 0x78
 8002478:	f000 fa54 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 800247c:	22a6      	movs	r2, #166	; 0xa6
 800247e:	2100      	movs	r1, #0
 8002480:	2078      	movs	r0, #120	; 0x78
 8002482:	f000 fa4f 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 8002486:	22a8      	movs	r2, #168	; 0xa8
 8002488:	2100      	movs	r1, #0
 800248a:	2078      	movs	r0, #120	; 0x78
 800248c:	f000 fa4a 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8002490:	223f      	movs	r2, #63	; 0x3f
 8002492:	2100      	movs	r1, #0
 8002494:	2078      	movs	r0, #120	; 0x78
 8002496:	f000 fa45 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800249a:	22a4      	movs	r2, #164	; 0xa4
 800249c:	2100      	movs	r1, #0
 800249e:	2078      	movs	r0, #120	; 0x78
 80024a0:	f000 fa40 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 80024a4:	22d3      	movs	r2, #211	; 0xd3
 80024a6:	2100      	movs	r1, #0
 80024a8:	2078      	movs	r0, #120	; 0x78
 80024aa:	f000 fa3b 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 80024ae:	2200      	movs	r2, #0
 80024b0:	2100      	movs	r1, #0
 80024b2:	2078      	movs	r0, #120	; 0x78
 80024b4:	f000 fa36 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 80024b8:	22d5      	movs	r2, #213	; 0xd5
 80024ba:	2100      	movs	r1, #0
 80024bc:	2078      	movs	r0, #120	; 0x78
 80024be:	f000 fa31 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 80024c2:	22f0      	movs	r2, #240	; 0xf0
 80024c4:	2100      	movs	r1, #0
 80024c6:	2078      	movs	r0, #120	; 0x78
 80024c8:	f000 fa2c 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 80024cc:	22d9      	movs	r2, #217	; 0xd9
 80024ce:	2100      	movs	r1, #0
 80024d0:	2078      	movs	r0, #120	; 0x78
 80024d2:	f000 fa27 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 80024d6:	2222      	movs	r2, #34	; 0x22
 80024d8:	2100      	movs	r1, #0
 80024da:	2078      	movs	r0, #120	; 0x78
 80024dc:	f000 fa22 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 80024e0:	22da      	movs	r2, #218	; 0xda
 80024e2:	2100      	movs	r1, #0
 80024e4:	2078      	movs	r0, #120	; 0x78
 80024e6:	f000 fa1d 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 80024ea:	2212      	movs	r2, #18
 80024ec:	2100      	movs	r1, #0
 80024ee:	2078      	movs	r0, #120	; 0x78
 80024f0:	f000 fa18 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 80024f4:	22db      	movs	r2, #219	; 0xdb
 80024f6:	2100      	movs	r1, #0
 80024f8:	2078      	movs	r0, #120	; 0x78
 80024fa:	f000 fa13 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 80024fe:	2220      	movs	r2, #32
 8002500:	2100      	movs	r1, #0
 8002502:	2078      	movs	r0, #120	; 0x78
 8002504:	f000 fa0e 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 8002508:	228d      	movs	r2, #141	; 0x8d
 800250a:	2100      	movs	r1, #0
 800250c:	2078      	movs	r0, #120	; 0x78
 800250e:	f000 fa09 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8002512:	2214      	movs	r2, #20
 8002514:	2100      	movs	r1, #0
 8002516:	2078      	movs	r0, #120	; 0x78
 8002518:	f000 fa04 	bl	8002924 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 800251c:	22af      	movs	r2, #175	; 0xaf
 800251e:	2100      	movs	r1, #0
 8002520:	2078      	movs	r0, #120	; 0x78
 8002522:	f000 f9ff 	bl	8002924 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 8002526:	222e      	movs	r2, #46	; 0x2e
 8002528:	2100      	movs	r1, #0
 800252a:	2078      	movs	r0, #120	; 0x78
 800252c:	f000 f9fa 	bl	8002924 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 8002530:	2000      	movs	r0, #0
 8002532:	f000 f843 	bl	80025bc <SSD1306_Fill>
	
	/* Update screen */
	SSD1306_UpdateScreen();
 8002536:	f000 f813 	bl	8002560 <SSD1306_UpdateScreen>
	
	/* Set default values */
	SSD1306.CurrentX = 0;
 800253a:	4b08      	ldr	r3, [pc, #32]	; (800255c <SSD1306_Init+0x184>)
 800253c:	2200      	movs	r2, #0
 800253e:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 8002540:	4b06      	ldr	r3, [pc, #24]	; (800255c <SSD1306_Init+0x184>)
 8002542:	2200      	movs	r2, #0
 8002544:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 8002546:	4b05      	ldr	r3, [pc, #20]	; (800255c <SSD1306_Init+0x184>)
 8002548:	2201      	movs	r2, #1
 800254a:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 800254c:	2301      	movs	r3, #1
}
 800254e:	4618      	mov	r0, r3
 8002550:	3708      	adds	r7, #8
 8002552:	46bd      	mov	sp, r7
 8002554:	bd80      	pop	{r7, pc}
 8002556:	bf00      	nop
 8002558:	2000021c 	.word	0x2000021c
 800255c:	200007b0 	.word	0x200007b0

08002560 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 8002566:	2300      	movs	r3, #0
 8002568:	71fb      	strb	r3, [r7, #7]
 800256a:	e01d      	b.n	80025a8 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 800256c:	79fb      	ldrb	r3, [r7, #7]
 800256e:	3b50      	subs	r3, #80	; 0x50
 8002570:	b2db      	uxtb	r3, r3
 8002572:	461a      	mov	r2, r3
 8002574:	2100      	movs	r1, #0
 8002576:	2078      	movs	r0, #120	; 0x78
 8002578:	f000 f9d4 	bl	8002924 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 800257c:	2200      	movs	r2, #0
 800257e:	2100      	movs	r1, #0
 8002580:	2078      	movs	r0, #120	; 0x78
 8002582:	f000 f9cf 	bl	8002924 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 8002586:	2210      	movs	r2, #16
 8002588:	2100      	movs	r1, #0
 800258a:	2078      	movs	r0, #120	; 0x78
 800258c:	f000 f9ca 	bl	8002924 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8002590:	79fb      	ldrb	r3, [r7, #7]
 8002592:	01db      	lsls	r3, r3, #7
 8002594:	4a08      	ldr	r2, [pc, #32]	; (80025b8 <SSD1306_UpdateScreen+0x58>)
 8002596:	441a      	add	r2, r3
 8002598:	2380      	movs	r3, #128	; 0x80
 800259a:	2140      	movs	r1, #64	; 0x40
 800259c:	2078      	movs	r0, #120	; 0x78
 800259e:	f000 f95b 	bl	8002858 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 80025a2:	79fb      	ldrb	r3, [r7, #7]
 80025a4:	3301      	adds	r3, #1
 80025a6:	71fb      	strb	r3, [r7, #7]
 80025a8:	79fb      	ldrb	r3, [r7, #7]
 80025aa:	2b07      	cmp	r3, #7
 80025ac:	d9de      	bls.n	800256c <SSD1306_UpdateScreen+0xc>
	}
}
 80025ae:	bf00      	nop
 80025b0:	bf00      	nop
 80025b2:	3708      	adds	r7, #8
 80025b4:	46bd      	mov	sp, r7
 80025b6:	bd80      	pop	{r7, pc}
 80025b8:	200003b0 	.word	0x200003b0

080025bc <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 80025bc:	b580      	push	{r7, lr}
 80025be:	b082      	sub	sp, #8
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	4603      	mov	r3, r0
 80025c4:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 80025c6:	79fb      	ldrb	r3, [r7, #7]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d101      	bne.n	80025d0 <SSD1306_Fill+0x14>
 80025cc:	2300      	movs	r3, #0
 80025ce:	e000      	b.n	80025d2 <SSD1306_Fill+0x16>
 80025d0:	23ff      	movs	r3, #255	; 0xff
 80025d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80025d6:	4619      	mov	r1, r3
 80025d8:	4803      	ldr	r0, [pc, #12]	; (80025e8 <SSD1306_Fill+0x2c>)
 80025da:	f006 fdcb 	bl	8009174 <memset>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}
 80025e6:	bf00      	nop
 80025e8:	200003b0 	.word	0x200003b0

080025ec <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 80025ec:	b480      	push	{r7}
 80025ee:	b083      	sub	sp, #12
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	4603      	mov	r3, r0
 80025f4:	80fb      	strh	r3, [r7, #6]
 80025f6:	460b      	mov	r3, r1
 80025f8:	80bb      	strh	r3, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	70fb      	strb	r3, [r7, #3]
	if (
 80025fe:	88fb      	ldrh	r3, [r7, #6]
 8002600:	2b7f      	cmp	r3, #127	; 0x7f
 8002602:	d848      	bhi.n	8002696 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8002604:	88bb      	ldrh	r3, [r7, #4]
 8002606:	2b3f      	cmp	r3, #63	; 0x3f
 8002608:	d845      	bhi.n	8002696 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800260a:	4b25      	ldr	r3, [pc, #148]	; (80026a0 <SSD1306_DrawPixel+0xb4>)
 800260c:	791b      	ldrb	r3, [r3, #4]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d006      	beq.n	8002620 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8002612:	78fb      	ldrb	r3, [r7, #3]
 8002614:	2b00      	cmp	r3, #0
 8002616:	bf0c      	ite	eq
 8002618:	2301      	moveq	r3, #1
 800261a:	2300      	movne	r3, #0
 800261c:	b2db      	uxtb	r3, r3
 800261e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8002620:	78fb      	ldrb	r3, [r7, #3]
 8002622:	2b01      	cmp	r3, #1
 8002624:	d11a      	bne.n	800265c <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8002626:	88fa      	ldrh	r2, [r7, #6]
 8002628:	88bb      	ldrh	r3, [r7, #4]
 800262a:	08db      	lsrs	r3, r3, #3
 800262c:	b298      	uxth	r0, r3
 800262e:	4603      	mov	r3, r0
 8002630:	01db      	lsls	r3, r3, #7
 8002632:	4413      	add	r3, r2
 8002634:	4a1b      	ldr	r2, [pc, #108]	; (80026a4 <SSD1306_DrawPixel+0xb8>)
 8002636:	5cd3      	ldrb	r3, [r2, r3]
 8002638:	b25a      	sxtb	r2, r3
 800263a:	88bb      	ldrh	r3, [r7, #4]
 800263c:	f003 0307 	and.w	r3, r3, #7
 8002640:	2101      	movs	r1, #1
 8002642:	fa01 f303 	lsl.w	r3, r1, r3
 8002646:	b25b      	sxtb	r3, r3
 8002648:	4313      	orrs	r3, r2
 800264a:	b259      	sxtb	r1, r3
 800264c:	88fa      	ldrh	r2, [r7, #6]
 800264e:	4603      	mov	r3, r0
 8002650:	01db      	lsls	r3, r3, #7
 8002652:	4413      	add	r3, r2
 8002654:	b2c9      	uxtb	r1, r1
 8002656:	4a13      	ldr	r2, [pc, #76]	; (80026a4 <SSD1306_DrawPixel+0xb8>)
 8002658:	54d1      	strb	r1, [r2, r3]
 800265a:	e01d      	b.n	8002698 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 800265c:	88fa      	ldrh	r2, [r7, #6]
 800265e:	88bb      	ldrh	r3, [r7, #4]
 8002660:	08db      	lsrs	r3, r3, #3
 8002662:	b298      	uxth	r0, r3
 8002664:	4603      	mov	r3, r0
 8002666:	01db      	lsls	r3, r3, #7
 8002668:	4413      	add	r3, r2
 800266a:	4a0e      	ldr	r2, [pc, #56]	; (80026a4 <SSD1306_DrawPixel+0xb8>)
 800266c:	5cd3      	ldrb	r3, [r2, r3]
 800266e:	b25a      	sxtb	r2, r3
 8002670:	88bb      	ldrh	r3, [r7, #4]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	2101      	movs	r1, #1
 8002678:	fa01 f303 	lsl.w	r3, r1, r3
 800267c:	b25b      	sxtb	r3, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	b25b      	sxtb	r3, r3
 8002682:	4013      	ands	r3, r2
 8002684:	b259      	sxtb	r1, r3
 8002686:	88fa      	ldrh	r2, [r7, #6]
 8002688:	4603      	mov	r3, r0
 800268a:	01db      	lsls	r3, r3, #7
 800268c:	4413      	add	r3, r2
 800268e:	b2c9      	uxtb	r1, r1
 8002690:	4a04      	ldr	r2, [pc, #16]	; (80026a4 <SSD1306_DrawPixel+0xb8>)
 8002692:	54d1      	strb	r1, [r2, r3]
 8002694:	e000      	b.n	8002698 <SSD1306_DrawPixel+0xac>
		return;
 8002696:	bf00      	nop
	}
}
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	bc80      	pop	{r7}
 800269e:	4770      	bx	lr
 80026a0:	200007b0 	.word	0x200007b0
 80026a4:	200003b0 	.word	0x200003b0

080026a8 <SSD1306_GotoXY>:

void SSD1306_GotoXY(uint16_t x, uint16_t y) {
 80026a8:	b480      	push	{r7}
 80026aa:	b083      	sub	sp, #12
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	4603      	mov	r3, r0
 80026b0:	460a      	mov	r2, r1
 80026b2:	80fb      	strh	r3, [r7, #6]
 80026b4:	4613      	mov	r3, r2
 80026b6:	80bb      	strh	r3, [r7, #4]
	/* Set write pointers */
	SSD1306.CurrentX = x;
 80026b8:	4a05      	ldr	r2, [pc, #20]	; (80026d0 <SSD1306_GotoXY+0x28>)
 80026ba:	88fb      	ldrh	r3, [r7, #6]
 80026bc:	8013      	strh	r3, [r2, #0]
	SSD1306.CurrentY = y;
 80026be:	4a04      	ldr	r2, [pc, #16]	; (80026d0 <SSD1306_GotoXY+0x28>)
 80026c0:	88bb      	ldrh	r3, [r7, #4]
 80026c2:	8053      	strh	r3, [r2, #2]
}
 80026c4:	bf00      	nop
 80026c6:	370c      	adds	r7, #12
 80026c8:	46bd      	mov	sp, r7
 80026ca:	bc80      	pop	{r7}
 80026cc:	4770      	bx	lr
 80026ce:	bf00      	nop
 80026d0:	200007b0 	.word	0x200007b0

080026d4 <SSD1306_Putc>:

char SSD1306_Putc(char ch, FontDef_t* Font, SSD1306_COLOR_t color) {
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	4603      	mov	r3, r0
 80026dc:	6039      	str	r1, [r7, #0]
 80026de:	71fb      	strb	r3, [r7, #7]
 80026e0:	4613      	mov	r3, r2
 80026e2:	71bb      	strb	r3, [r7, #6]
	uint32_t i, b, j;
	
	/* Check available space in LCD */
	if (
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 80026e4:	4b3a      	ldr	r3, [pc, #232]	; (80027d0 <SSD1306_Putc+0xfc>)
 80026e6:	881b      	ldrh	r3, [r3, #0]
 80026e8:	461a      	mov	r2, r3
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	4413      	add	r3, r2
	if (
 80026f0:	2b7f      	cmp	r3, #127	; 0x7f
 80026f2:	dc07      	bgt.n	8002704 <SSD1306_Putc+0x30>
		SSD1306_HEIGHT <= (SSD1306.CurrentY + Font->FontHeight)
 80026f4:	4b36      	ldr	r3, [pc, #216]	; (80027d0 <SSD1306_Putc+0xfc>)
 80026f6:	885b      	ldrh	r3, [r3, #2]
 80026f8:	461a      	mov	r2, r3
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	785b      	ldrb	r3, [r3, #1]
 80026fe:	4413      	add	r3, r2
		SSD1306_WIDTH <= (SSD1306.CurrentX + Font->FontWidth) ||
 8002700:	2b3f      	cmp	r3, #63	; 0x3f
 8002702:	dd01      	ble.n	8002708 <SSD1306_Putc+0x34>
	) {
		/* Error */
		return 0;
 8002704:	2300      	movs	r3, #0
 8002706:	e05e      	b.n	80027c6 <SSD1306_Putc+0xf2>
	}
	
	/* Go through font */
	for (i = 0; i < Font->FontHeight; i++) {
 8002708:	2300      	movs	r3, #0
 800270a:	617b      	str	r3, [r7, #20]
 800270c:	e04b      	b.n	80027a6 <SSD1306_Putc+0xd2>
		b = Font->data[(ch - 32) * Font->FontHeight + i];
 800270e:	683b      	ldr	r3, [r7, #0]
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	79fb      	ldrb	r3, [r7, #7]
 8002714:	3b20      	subs	r3, #32
 8002716:	6839      	ldr	r1, [r7, #0]
 8002718:	7849      	ldrb	r1, [r1, #1]
 800271a:	fb01 f303 	mul.w	r3, r1, r3
 800271e:	4619      	mov	r1, r3
 8002720:	697b      	ldr	r3, [r7, #20]
 8002722:	440b      	add	r3, r1
 8002724:	005b      	lsls	r3, r3, #1
 8002726:	4413      	add	r3, r2
 8002728:	881b      	ldrh	r3, [r3, #0]
 800272a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < Font->FontWidth; j++) {
 800272c:	2300      	movs	r3, #0
 800272e:	613b      	str	r3, [r7, #16]
 8002730:	e030      	b.n	8002794 <SSD1306_Putc+0xc0>
			if ((b << j) & 0x8000) {
 8002732:	68fa      	ldr	r2, [r7, #12]
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	fa02 f303 	lsl.w	r3, r2, r3
 800273a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d010      	beq.n	8002764 <SSD1306_Putc+0x90>
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t) color);
 8002742:	4b23      	ldr	r3, [pc, #140]	; (80027d0 <SSD1306_Putc+0xfc>)
 8002744:	881a      	ldrh	r2, [r3, #0]
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	b29b      	uxth	r3, r3
 800274a:	4413      	add	r3, r2
 800274c:	b298      	uxth	r0, r3
 800274e:	4b20      	ldr	r3, [pc, #128]	; (80027d0 <SSD1306_Putc+0xfc>)
 8002750:	885a      	ldrh	r2, [r3, #2]
 8002752:	697b      	ldr	r3, [r7, #20]
 8002754:	b29b      	uxth	r3, r3
 8002756:	4413      	add	r3, r2
 8002758:	b29b      	uxth	r3, r3
 800275a:	79ba      	ldrb	r2, [r7, #6]
 800275c:	4619      	mov	r1, r3
 800275e:	f7ff ff45 	bl	80025ec <SSD1306_DrawPixel>
 8002762:	e014      	b.n	800278e <SSD1306_Putc+0xba>
			} else {
				SSD1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR_t)!color);
 8002764:	4b1a      	ldr	r3, [pc, #104]	; (80027d0 <SSD1306_Putc+0xfc>)
 8002766:	881a      	ldrh	r2, [r3, #0]
 8002768:	693b      	ldr	r3, [r7, #16]
 800276a:	b29b      	uxth	r3, r3
 800276c:	4413      	add	r3, r2
 800276e:	b298      	uxth	r0, r3
 8002770:	4b17      	ldr	r3, [pc, #92]	; (80027d0 <SSD1306_Putc+0xfc>)
 8002772:	885a      	ldrh	r2, [r3, #2]
 8002774:	697b      	ldr	r3, [r7, #20]
 8002776:	b29b      	uxth	r3, r3
 8002778:	4413      	add	r3, r2
 800277a:	b299      	uxth	r1, r3
 800277c:	79bb      	ldrb	r3, [r7, #6]
 800277e:	2b00      	cmp	r3, #0
 8002780:	bf0c      	ite	eq
 8002782:	2301      	moveq	r3, #1
 8002784:	2300      	movne	r3, #0
 8002786:	b2db      	uxtb	r3, r3
 8002788:	461a      	mov	r2, r3
 800278a:	f7ff ff2f 	bl	80025ec <SSD1306_DrawPixel>
		for (j = 0; j < Font->FontWidth; j++) {
 800278e:	693b      	ldr	r3, [r7, #16]
 8002790:	3301      	adds	r3, #1
 8002792:	613b      	str	r3, [r7, #16]
 8002794:	683b      	ldr	r3, [r7, #0]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	461a      	mov	r2, r3
 800279a:	693b      	ldr	r3, [r7, #16]
 800279c:	4293      	cmp	r3, r2
 800279e:	d3c8      	bcc.n	8002732 <SSD1306_Putc+0x5e>
	for (i = 0; i < Font->FontHeight; i++) {
 80027a0:	697b      	ldr	r3, [r7, #20]
 80027a2:	3301      	adds	r3, #1
 80027a4:	617b      	str	r3, [r7, #20]
 80027a6:	683b      	ldr	r3, [r7, #0]
 80027a8:	785b      	ldrb	r3, [r3, #1]
 80027aa:	461a      	mov	r2, r3
 80027ac:	697b      	ldr	r3, [r7, #20]
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d3ad      	bcc.n	800270e <SSD1306_Putc+0x3a>
			}
		}
	}
	
	/* Increase pointer */
	SSD1306.CurrentX += Font->FontWidth;
 80027b2:	4b07      	ldr	r3, [pc, #28]	; (80027d0 <SSD1306_Putc+0xfc>)
 80027b4:	881a      	ldrh	r2, [r3, #0]
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	b29b      	uxth	r3, r3
 80027bc:	4413      	add	r3, r2
 80027be:	b29a      	uxth	r2, r3
 80027c0:	4b03      	ldr	r3, [pc, #12]	; (80027d0 <SSD1306_Putc+0xfc>)
 80027c2:	801a      	strh	r2, [r3, #0]
	
	/* Return character written */
	return ch;
 80027c4:	79fb      	ldrb	r3, [r7, #7]
}
 80027c6:	4618      	mov	r0, r3
 80027c8:	3718      	adds	r7, #24
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bd80      	pop	{r7, pc}
 80027ce:	bf00      	nop
 80027d0:	200007b0 	.word	0x200007b0

080027d4 <SSD1306_Puts>:

char SSD1306_Puts(char* str, FontDef_t* Font, SSD1306_COLOR_t color) {
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b084      	sub	sp, #16
 80027d8:	af00      	add	r7, sp, #0
 80027da:	60f8      	str	r0, [r7, #12]
 80027dc:	60b9      	str	r1, [r7, #8]
 80027de:	4613      	mov	r3, r2
 80027e0:	71fb      	strb	r3, [r7, #7]
	/* Write characters */
	while (*str) {
 80027e2:	e012      	b.n	800280a <SSD1306_Puts+0x36>
		/* Write character by character */
		if (SSD1306_Putc(*str, Font, color) != *str) {
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	781b      	ldrb	r3, [r3, #0]
 80027e8:	79fa      	ldrb	r2, [r7, #7]
 80027ea:	68b9      	ldr	r1, [r7, #8]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7ff ff71 	bl	80026d4 <SSD1306_Putc>
 80027f2:	4603      	mov	r3, r0
 80027f4:	461a      	mov	r2, r3
 80027f6:	68fb      	ldr	r3, [r7, #12]
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d002      	beq.n	8002804 <SSD1306_Puts+0x30>
			/* Return error */
			return *str;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	781b      	ldrb	r3, [r3, #0]
 8002802:	e008      	b.n	8002816 <SSD1306_Puts+0x42>
		}
		
		/* Increase string pointer */
		str++;
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	3301      	adds	r3, #1
 8002808:	60fb      	str	r3, [r7, #12]
	while (*str) {
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	781b      	ldrb	r3, [r3, #0]
 800280e:	2b00      	cmp	r3, #0
 8002810:	d1e8      	bne.n	80027e4 <SSD1306_Puts+0x10>
	}
	
	/* Everything OK, zero should be returned */
	return *str;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	781b      	ldrb	r3, [r3, #0]
}
 8002816:	4618      	mov	r0, r3
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800281e:	b580      	push	{r7, lr}
 8002820:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8002822:	2000      	movs	r0, #0
 8002824:	f7ff feca 	bl	80025bc <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8002828:	f7ff fe9a 	bl	8002560 <SSD1306_UpdateScreen>
}
 800282c:	bf00      	nop
 800282e:	bd80      	pop	{r7, pc}

08002830 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8002836:	4b07      	ldr	r3, [pc, #28]	; (8002854 <ssd1306_I2C_Init+0x24>)
 8002838:	607b      	str	r3, [r7, #4]
	while(p>0)
 800283a:	e002      	b.n	8002842 <ssd1306_I2C_Init+0x12>
		p--;
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	3b01      	subs	r3, #1
 8002840:	607b      	str	r3, [r7, #4]
	while(p>0)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d1f9      	bne.n	800283c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8002848:	bf00      	nop
 800284a:	bf00      	nop
 800284c:	370c      	adds	r7, #12
 800284e:	46bd      	mov	sp, r7
 8002850:	bc80      	pop	{r7}
 8002852:	4770      	bx	lr
 8002854:	0003d090 	.word	0x0003d090

08002858 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8002858:	b590      	push	{r4, r7, lr}
 800285a:	b0c7      	sub	sp, #284	; 0x11c
 800285c:	af02      	add	r7, sp, #8
 800285e:	4604      	mov	r4, r0
 8002860:	4608      	mov	r0, r1
 8002862:	f507 7188 	add.w	r1, r7, #272	; 0x110
 8002866:	f5a1 7188 	sub.w	r1, r1, #272	; 0x110
 800286a:	600a      	str	r2, [r1, #0]
 800286c:	4619      	mov	r1, r3
 800286e:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002872:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 8002876:	4622      	mov	r2, r4
 8002878:	701a      	strb	r2, [r3, #0]
 800287a:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800287e:	f5a3 7385 	sub.w	r3, r3, #266	; 0x10a
 8002882:	4602      	mov	r2, r0
 8002884:	701a      	strb	r2, [r3, #0]
 8002886:	f507 7388 	add.w	r3, r7, #272	; 0x110
 800288a:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800288e:	460a      	mov	r2, r1
 8002890:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 8002892:	f507 7388 	add.w	r3, r7, #272	; 0x110
 8002896:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800289a:	f507 7288 	add.w	r2, r7, #272	; 0x110
 800289e:	f5a2 7285 	sub.w	r2, r2, #266	; 0x10a
 80028a2:	7812      	ldrb	r2, [r2, #0]
 80028a4:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 80028a6:	2300      	movs	r3, #0
 80028a8:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80028ac:	e015      	b.n	80028da <ssd1306_I2C_WriteMulti+0x82>
dt[i+1] = data[i];
 80028ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80028b2:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80028b6:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 80028ba:	6812      	ldr	r2, [r2, #0]
 80028bc:	441a      	add	r2, r3
 80028be:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80028c2:	3301      	adds	r3, #1
 80028c4:	7811      	ldrb	r1, [r2, #0]
 80028c6:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80028ca:	f5a2 7282 	sub.w	r2, r2, #260	; 0x104
 80028ce:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80028d0:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80028d4:	3301      	adds	r3, #1
 80028d6:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80028da:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80028de:	b29b      	uxth	r3, r3
 80028e0:	f507 7288 	add.w	r2, r7, #272	; 0x110
 80028e4:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 80028e8:	8812      	ldrh	r2, [r2, #0]
 80028ea:	429a      	cmp	r2, r3
 80028ec:	d8df      	bhi.n	80028ae <ssd1306_I2C_WriteMulti+0x56>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80028ee:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028f2:	f2a3 1309 	subw	r3, r3, #265	; 0x109
 80028f6:	781b      	ldrb	r3, [r3, #0]
 80028f8:	b299      	uxth	r1, r3
 80028fa:	f507 7388 	add.w	r3, r7, #272	; 0x110
 80028fe:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8002902:	881b      	ldrh	r3, [r3, #0]
 8002904:	3301      	adds	r3, #1
 8002906:	b29b      	uxth	r3, r3
 8002908:	f107 020c 	add.w	r2, r7, #12
 800290c:	200a      	movs	r0, #10
 800290e:	9000      	str	r0, [sp, #0]
 8002910:	4803      	ldr	r0, [pc, #12]	; (8002920 <ssd1306_I2C_WriteMulti+0xc8>)
 8002912:	f000 ffad 	bl	8003870 <HAL_I2C_Master_Transmit>
}
 8002916:	bf00      	nop
 8002918:	f507 778a 	add.w	r7, r7, #276	; 0x114
 800291c:	46bd      	mov	sp, r7
 800291e:	bd90      	pop	{r4, r7, pc}
 8002920:	2000021c 	.word	0x2000021c

08002924 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 8002924:	b580      	push	{r7, lr}
 8002926:	b086      	sub	sp, #24
 8002928:	af02      	add	r7, sp, #8
 800292a:	4603      	mov	r3, r0
 800292c:	71fb      	strb	r3, [r7, #7]
 800292e:	460b      	mov	r3, r1
 8002930:	71bb      	strb	r3, [r7, #6]
 8002932:	4613      	mov	r3, r2
 8002934:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 8002936:	79bb      	ldrb	r3, [r7, #6]
 8002938:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 800293a:	797b      	ldrb	r3, [r7, #5]
 800293c:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 800293e:	79fb      	ldrb	r3, [r7, #7]
 8002940:	b299      	uxth	r1, r3
 8002942:	f107 020c 	add.w	r2, r7, #12
 8002946:	230a      	movs	r3, #10
 8002948:	9300      	str	r3, [sp, #0]
 800294a:	2302      	movs	r3, #2
 800294c:	4803      	ldr	r0, [pc, #12]	; (800295c <ssd1306_I2C_Write+0x38>)
 800294e:	f000 ff8f 	bl	8003870 <HAL_I2C_Master_Transmit>
}
 8002952:	bf00      	nop
 8002954:	3710      	adds	r7, #16
 8002956:	46bd      	mov	sp, r7
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	2000021c 	.word	0x2000021c

08002960 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	b084      	sub	sp, #16
 8002964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002966:	4b18      	ldr	r3, [pc, #96]	; (80029c8 <HAL_MspInit+0x68>)
 8002968:	699b      	ldr	r3, [r3, #24]
 800296a:	4a17      	ldr	r2, [pc, #92]	; (80029c8 <HAL_MspInit+0x68>)
 800296c:	f043 0301 	orr.w	r3, r3, #1
 8002970:	6193      	str	r3, [r2, #24]
 8002972:	4b15      	ldr	r3, [pc, #84]	; (80029c8 <HAL_MspInit+0x68>)
 8002974:	699b      	ldr	r3, [r3, #24]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	60bb      	str	r3, [r7, #8]
 800297c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800297e:	4b12      	ldr	r3, [pc, #72]	; (80029c8 <HAL_MspInit+0x68>)
 8002980:	69db      	ldr	r3, [r3, #28]
 8002982:	4a11      	ldr	r2, [pc, #68]	; (80029c8 <HAL_MspInit+0x68>)
 8002984:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002988:	61d3      	str	r3, [r2, #28]
 800298a:	4b0f      	ldr	r3, [pc, #60]	; (80029c8 <HAL_MspInit+0x68>)
 800298c:	69db      	ldr	r3, [r3, #28]
 800298e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002996:	2200      	movs	r2, #0
 8002998:	210f      	movs	r1, #15
 800299a:	f06f 0001 	mvn.w	r0, #1
 800299e:	f000 fb94 	bl	80030ca <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029a2:	4b0a      	ldr	r3, [pc, #40]	; (80029cc <HAL_MspInit+0x6c>)
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	60fb      	str	r3, [r7, #12]
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 80029ae:	60fb      	str	r3, [r7, #12]
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80029b6:	60fb      	str	r3, [r7, #12]
 80029b8:	4a04      	ldr	r2, [pc, #16]	; (80029cc <HAL_MspInit+0x6c>)
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029be:	bf00      	nop
 80029c0:	3710      	adds	r7, #16
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40021000 	.word	0x40021000
 80029cc:	40010000 	.word	0x40010000

080029d0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08a      	sub	sp, #40	; 0x28
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 0318 	add.w	r3, r7, #24
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4a2b      	ldr	r2, [pc, #172]	; (8002a98 <HAL_I2C_MspInit+0xc8>)
 80029ec:	4293      	cmp	r3, r2
 80029ee:	d124      	bne.n	8002a3a <HAL_I2C_MspInit+0x6a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029f0:	4b2a      	ldr	r3, [pc, #168]	; (8002a9c <HAL_I2C_MspInit+0xcc>)
 80029f2:	699b      	ldr	r3, [r3, #24]
 80029f4:	4a29      	ldr	r2, [pc, #164]	; (8002a9c <HAL_I2C_MspInit+0xcc>)
 80029f6:	f043 0308 	orr.w	r3, r3, #8
 80029fa:	6193      	str	r3, [r2, #24]
 80029fc:	4b27      	ldr	r3, [pc, #156]	; (8002a9c <HAL_I2C_MspInit+0xcc>)
 80029fe:	699b      	ldr	r3, [r3, #24]
 8002a00:	f003 0308 	and.w	r3, r3, #8
 8002a04:	617b      	str	r3, [r7, #20]
 8002a06:	697b      	ldr	r3, [r7, #20]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a08:	23c0      	movs	r3, #192	; 0xc0
 8002a0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a0c:	2312      	movs	r3, #18
 8002a0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a10:	2303      	movs	r3, #3
 8002a12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a14:	f107 0318 	add.w	r3, r7, #24
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4821      	ldr	r0, [pc, #132]	; (8002aa0 <HAL_I2C_MspInit+0xd0>)
 8002a1c:	f000 fc30 	bl	8003280 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002a20:	4b1e      	ldr	r3, [pc, #120]	; (8002a9c <HAL_I2C_MspInit+0xcc>)
 8002a22:	69db      	ldr	r3, [r3, #28]
 8002a24:	4a1d      	ldr	r2, [pc, #116]	; (8002a9c <HAL_I2C_MspInit+0xcc>)
 8002a26:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002a2a:	61d3      	str	r3, [r2, #28]
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <HAL_I2C_MspInit+0xcc>)
 8002a2e:	69db      	ldr	r3, [r3, #28]
 8002a30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002a34:	613b      	str	r3, [r7, #16]
 8002a36:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002a38:	e029      	b.n	8002a8e <HAL_I2C_MspInit+0xbe>
  else if(hi2c->Instance==I2C2)
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a19      	ldr	r2, [pc, #100]	; (8002aa4 <HAL_I2C_MspInit+0xd4>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d124      	bne.n	8002a8e <HAL_I2C_MspInit+0xbe>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a44:	4b15      	ldr	r3, [pc, #84]	; (8002a9c <HAL_I2C_MspInit+0xcc>)
 8002a46:	699b      	ldr	r3, [r3, #24]
 8002a48:	4a14      	ldr	r2, [pc, #80]	; (8002a9c <HAL_I2C_MspInit+0xcc>)
 8002a4a:	f043 0308 	orr.w	r3, r3, #8
 8002a4e:	6193      	str	r3, [r2, #24]
 8002a50:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <HAL_I2C_MspInit+0xcc>)
 8002a52:	699b      	ldr	r3, [r3, #24]
 8002a54:	f003 0308 	and.w	r3, r3, #8
 8002a58:	60fb      	str	r3, [r7, #12]
 8002a5a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8002a5c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002a60:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002a62:	2312      	movs	r3, #18
 8002a64:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a66:	2303      	movs	r3, #3
 8002a68:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a6a:	f107 0318 	add.w	r3, r7, #24
 8002a6e:	4619      	mov	r1, r3
 8002a70:	480b      	ldr	r0, [pc, #44]	; (8002aa0 <HAL_I2C_MspInit+0xd0>)
 8002a72:	f000 fc05 	bl	8003280 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002a76:	4b09      	ldr	r3, [pc, #36]	; (8002a9c <HAL_I2C_MspInit+0xcc>)
 8002a78:	69db      	ldr	r3, [r3, #28]
 8002a7a:	4a08      	ldr	r2, [pc, #32]	; (8002a9c <HAL_I2C_MspInit+0xcc>)
 8002a7c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8002a80:	61d3      	str	r3, [r2, #28]
 8002a82:	4b06      	ldr	r3, [pc, #24]	; (8002a9c <HAL_I2C_MspInit+0xcc>)
 8002a84:	69db      	ldr	r3, [r3, #28]
 8002a86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a8a:	60bb      	str	r3, [r7, #8]
 8002a8c:	68bb      	ldr	r3, [r7, #8]
}
 8002a8e:	bf00      	nop
 8002a90:	3728      	adds	r7, #40	; 0x28
 8002a92:	46bd      	mov	sp, r7
 8002a94:	bd80      	pop	{r7, pc}
 8002a96:	bf00      	nop
 8002a98:	40005400 	.word	0x40005400
 8002a9c:	40021000 	.word	0x40021000
 8002aa0:	40010c00 	.word	0x40010c00
 8002aa4:	40005800 	.word	0x40005800

08002aa8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002aa8:	b480      	push	{r7}
 8002aaa:	b085      	sub	sp, #20
 8002aac:	af00      	add	r7, sp, #0
 8002aae:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4a09      	ldr	r2, [pc, #36]	; (8002adc <HAL_TIM_Base_MspInit+0x34>)
 8002ab6:	4293      	cmp	r3, r2
 8002ab8:	d10b      	bne.n	8002ad2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002aba:	4b09      	ldr	r3, [pc, #36]	; (8002ae0 <HAL_TIM_Base_MspInit+0x38>)
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	4a08      	ldr	r2, [pc, #32]	; (8002ae0 <HAL_TIM_Base_MspInit+0x38>)
 8002ac0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002ac4:	6193      	str	r3, [r2, #24]
 8002ac6:	4b06      	ldr	r3, [pc, #24]	; (8002ae0 <HAL_TIM_Base_MspInit+0x38>)
 8002ac8:	699b      	ldr	r3, [r3, #24]
 8002aca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002ace:	60fb      	str	r3, [r7, #12]
 8002ad0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	bc80      	pop	{r7}
 8002ada:	4770      	bx	lr
 8002adc:	40012c00 	.word	0x40012c00
 8002ae0:	40021000 	.word	0x40021000

08002ae4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b088      	sub	sp, #32
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aec:	f107 0310 	add.w	r3, r7, #16
 8002af0:	2200      	movs	r2, #0
 8002af2:	601a      	str	r2, [r3, #0]
 8002af4:	605a      	str	r2, [r3, #4]
 8002af6:	609a      	str	r2, [r3, #8]
 8002af8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	4a20      	ldr	r2, [pc, #128]	; (8002b80 <HAL_UART_MspInit+0x9c>)
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d139      	bne.n	8002b78 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002b04:	4b1f      	ldr	r3, [pc, #124]	; (8002b84 <HAL_UART_MspInit+0xa0>)
 8002b06:	699b      	ldr	r3, [r3, #24]
 8002b08:	4a1e      	ldr	r2, [pc, #120]	; (8002b84 <HAL_UART_MspInit+0xa0>)
 8002b0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002b0e:	6193      	str	r3, [r2, #24]
 8002b10:	4b1c      	ldr	r3, [pc, #112]	; (8002b84 <HAL_UART_MspInit+0xa0>)
 8002b12:	699b      	ldr	r3, [r3, #24]
 8002b14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b18:	60fb      	str	r3, [r7, #12]
 8002b1a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b1c:	4b19      	ldr	r3, [pc, #100]	; (8002b84 <HAL_UART_MspInit+0xa0>)
 8002b1e:	699b      	ldr	r3, [r3, #24]
 8002b20:	4a18      	ldr	r2, [pc, #96]	; (8002b84 <HAL_UART_MspInit+0xa0>)
 8002b22:	f043 0304 	orr.w	r3, r3, #4
 8002b26:	6193      	str	r3, [r2, #24]
 8002b28:	4b16      	ldr	r3, [pc, #88]	; (8002b84 <HAL_UART_MspInit+0xa0>)
 8002b2a:	699b      	ldr	r3, [r3, #24]
 8002b2c:	f003 0304 	and.w	r3, r3, #4
 8002b30:	60bb      	str	r3, [r7, #8]
 8002b32:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b34:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b38:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b3e:	2303      	movs	r3, #3
 8002b40:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b42:	f107 0310 	add.w	r3, r7, #16
 8002b46:	4619      	mov	r1, r3
 8002b48:	480f      	ldr	r0, [pc, #60]	; (8002b88 <HAL_UART_MspInit+0xa4>)
 8002b4a:	f000 fb99 	bl	8003280 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b4e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b52:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b54:	2300      	movs	r3, #0
 8002b56:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b58:	2300      	movs	r3, #0
 8002b5a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b5c:	f107 0310 	add.w	r3, r7, #16
 8002b60:	4619      	mov	r1, r3
 8002b62:	4809      	ldr	r0, [pc, #36]	; (8002b88 <HAL_UART_MspInit+0xa4>)
 8002b64:	f000 fb8c 	bl	8003280 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 7, 0);
 8002b68:	2200      	movs	r2, #0
 8002b6a:	2107      	movs	r1, #7
 8002b6c:	2025      	movs	r0, #37	; 0x25
 8002b6e:	f000 faac 	bl	80030ca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b72:	2025      	movs	r0, #37	; 0x25
 8002b74:	f000 fac5 	bl	8003102 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b78:	bf00      	nop
 8002b7a:	3720      	adds	r7, #32
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	40013800 	.word	0x40013800
 8002b84:	40021000 	.word	0x40021000
 8002b88:	40010800 	.word	0x40010800

08002b8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b08e      	sub	sp, #56	; 0x38
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8002b94:	2300      	movs	r3, #0
 8002b96:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM4 clock */
  __HAL_RCC_TIM4_CLK_ENABLE();
 8002ba2:	4b34      	ldr	r3, [pc, #208]	; (8002c74 <HAL_InitTick+0xe8>)
 8002ba4:	69db      	ldr	r3, [r3, #28]
 8002ba6:	4a33      	ldr	r2, [pc, #204]	; (8002c74 <HAL_InitTick+0xe8>)
 8002ba8:	f043 0304 	orr.w	r3, r3, #4
 8002bac:	61d3      	str	r3, [r2, #28]
 8002bae:	4b31      	ldr	r3, [pc, #196]	; (8002c74 <HAL_InitTick+0xe8>)
 8002bb0:	69db      	ldr	r3, [r3, #28]
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002bba:	f107 0210 	add.w	r2, r7, #16
 8002bbe:	f107 0314 	add.w	r3, r7, #20
 8002bc2:	4611      	mov	r1, r2
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f002 fa07 	bl	8004fd8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8002bca:	6a3b      	ldr	r3, [r7, #32]
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM4 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8002bce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d103      	bne.n	8002bdc <HAL_InitTick+0x50>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8002bd4:	f002 f9d8 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 8002bd8:	6378      	str	r0, [r7, #52]	; 0x34
 8002bda:	e004      	b.n	8002be6 <HAL_InitTick+0x5a>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8002bdc:	f002 f9d4 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 8002be0:	4603      	mov	r3, r0
 8002be2:	005b      	lsls	r3, r3, #1
 8002be4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM4 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002be8:	4a23      	ldr	r2, [pc, #140]	; (8002c78 <HAL_InitTick+0xec>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	0c9b      	lsrs	r3, r3, #18
 8002bf0:	3b01      	subs	r3, #1
 8002bf2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM4 */
  htim4.Instance = TIM4;
 8002bf4:	4b21      	ldr	r3, [pc, #132]	; (8002c7c <HAL_InitTick+0xf0>)
 8002bf6:	4a22      	ldr	r2, [pc, #136]	; (8002c80 <HAL_InitTick+0xf4>)
 8002bf8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM4CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim4.Init.Period = (1000000U / 1000U) - 1U;
 8002bfa:	4b20      	ldr	r3, [pc, #128]	; (8002c7c <HAL_InitTick+0xf0>)
 8002bfc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002c00:	60da      	str	r2, [r3, #12]
  htim4.Init.Prescaler = uwPrescalerValue;
 8002c02:	4a1e      	ldr	r2, [pc, #120]	; (8002c7c <HAL_InitTick+0xf0>)
 8002c04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c06:	6053      	str	r3, [r2, #4]
  htim4.Init.ClockDivision = 0;
 8002c08:	4b1c      	ldr	r3, [pc, #112]	; (8002c7c <HAL_InitTick+0xf0>)
 8002c0a:	2200      	movs	r2, #0
 8002c0c:	611a      	str	r2, [r3, #16]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002c0e:	4b1b      	ldr	r3, [pc, #108]	; (8002c7c <HAL_InitTick+0xf0>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	609a      	str	r2, [r3, #8]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002c14:	4b19      	ldr	r3, [pc, #100]	; (8002c7c <HAL_InitTick+0xf0>)
 8002c16:	2200      	movs	r2, #0
 8002c18:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim4);
 8002c1a:	4818      	ldr	r0, [pc, #96]	; (8002c7c <HAL_InitTick+0xf0>)
 8002c1c:	f002 fa2a 	bl	8005074 <HAL_TIM_Base_Init>
 8002c20:	4603      	mov	r3, r0
 8002c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8002c26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d11b      	bne.n	8002c66 <HAL_InitTick+0xda>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim4);
 8002c2e:	4813      	ldr	r0, [pc, #76]	; (8002c7c <HAL_InitTick+0xf0>)
 8002c30:	f002 faba 	bl	80051a8 <HAL_TIM_Base_Start_IT>
 8002c34:	4603      	mov	r3, r0
 8002c36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8002c3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d111      	bne.n	8002c66 <HAL_InitTick+0xda>
    {
    /* Enable the TIM4 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002c42:	201e      	movs	r0, #30
 8002c44:	f000 fa5d 	bl	8003102 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2b0f      	cmp	r3, #15
 8002c4c:	d808      	bhi.n	8002c60 <HAL_InitTick+0xd4>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM4_IRQn, TickPriority, 0U);
 8002c4e:	2200      	movs	r2, #0
 8002c50:	6879      	ldr	r1, [r7, #4]
 8002c52:	201e      	movs	r0, #30
 8002c54:	f000 fa39 	bl	80030ca <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002c58:	4a0a      	ldr	r2, [pc, #40]	; (8002c84 <HAL_InitTick+0xf8>)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6013      	str	r3, [r2, #0]
 8002c5e:	e002      	b.n	8002c66 <HAL_InitTick+0xda>
      }
      else
      {
        status = HAL_ERROR;
 8002c60:	2301      	movs	r3, #1
 8002c62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8002c66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8002c6a:	4618      	mov	r0, r3
 8002c6c:	3738      	adds	r7, #56	; 0x38
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	40021000 	.word	0x40021000
 8002c78:	431bde83 	.word	0x431bde83
 8002c7c:	200007b8 	.word	0x200007b8
 8002c80:	40000800 	.word	0x40000800
 8002c84:	20000020 	.word	0x20000020

08002c88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c8c:	e7fe      	b.n	8002c8c <NMI_Handler+0x4>

08002c8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c8e:	b480      	push	{r7}
 8002c90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c92:	e7fe      	b.n	8002c92 <HardFault_Handler+0x4>

08002c94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c98:	e7fe      	b.n	8002c98 <MemManage_Handler+0x4>

08002c9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c9a:	b480      	push	{r7}
 8002c9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c9e:	e7fe      	b.n	8002c9e <BusFault_Handler+0x4>

08002ca0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ca4:	e7fe      	b.n	8002ca4 <UsageFault_Handler+0x4>

08002ca6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002caa:	bf00      	nop
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr
	...

08002cb4 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8002cb8:	4802      	ldr	r0, [pc, #8]	; (8002cc4 <TIM4_IRQHandler+0x10>)
 8002cba:	f002 fac7 	bl	800524c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8002cbe:	bf00      	nop
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	200007b8 	.word	0x200007b8

08002cc8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002ccc:	4802      	ldr	r0, [pc, #8]	; (8002cd8 <USART1_IRQHandler+0x10>)
 8002cce:	f002 ff25 	bl	8005b1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002cd2:	bf00      	nop
 8002cd4:	bd80      	pop	{r7, pc}
 8002cd6:	bf00      	nop
 8002cd8:	2000030c 	.word	0x2000030c

08002cdc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	af00      	add	r7, sp, #0
  return 1;
 8002ce0:	2301      	movs	r3, #1
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bc80      	pop	{r7}
 8002ce8:	4770      	bx	lr

08002cea <_kill>:

int _kill(int pid, int sig)
{
 8002cea:	b580      	push	{r7, lr}
 8002cec:	b082      	sub	sp, #8
 8002cee:	af00      	add	r7, sp, #0
 8002cf0:	6078      	str	r0, [r7, #4]
 8002cf2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002cf4:	f006 f9fe 	bl	80090f4 <__errno>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	2216      	movs	r2, #22
 8002cfc:	601a      	str	r2, [r3, #0]
  return -1;
 8002cfe:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d02:	4618      	mov	r0, r3
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <_exit>:

void _exit (int status)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002d12:	f04f 31ff 	mov.w	r1, #4294967295
 8002d16:	6878      	ldr	r0, [r7, #4]
 8002d18:	f7ff ffe7 	bl	8002cea <_kill>
  while (1) {}    /* Make sure we hang here */
 8002d1c:	e7fe      	b.n	8002d1c <_exit+0x12>

08002d1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b086      	sub	sp, #24
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	60f8      	str	r0, [r7, #12]
 8002d26:	60b9      	str	r1, [r7, #8]
 8002d28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d2a:	2300      	movs	r3, #0
 8002d2c:	617b      	str	r3, [r7, #20]
 8002d2e:	e00a      	b.n	8002d46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002d30:	f3af 8000 	nop.w
 8002d34:	4601      	mov	r1, r0
 8002d36:	68bb      	ldr	r3, [r7, #8]
 8002d38:	1c5a      	adds	r2, r3, #1
 8002d3a:	60ba      	str	r2, [r7, #8]
 8002d3c:	b2ca      	uxtb	r2, r1
 8002d3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	3301      	adds	r3, #1
 8002d44:	617b      	str	r3, [r7, #20]
 8002d46:	697a      	ldr	r2, [r7, #20]
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	429a      	cmp	r2, r3
 8002d4c:	dbf0      	blt.n	8002d30 <_read+0x12>
  }

  return len;
 8002d4e:	687b      	ldr	r3, [r7, #4]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}

08002d58 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d58:	b580      	push	{r7, lr}
 8002d5a:	b086      	sub	sp, #24
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	60f8      	str	r0, [r7, #12]
 8002d60:	60b9      	str	r1, [r7, #8]
 8002d62:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]
 8002d68:	e009      	b.n	8002d7e <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	60ba      	str	r2, [r7, #8]
 8002d70:	781b      	ldrb	r3, [r3, #0]
 8002d72:	4618      	mov	r0, r3
 8002d74:	f7fe fbee 	bl	8001554 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	3301      	adds	r3, #1
 8002d7c:	617b      	str	r3, [r7, #20]
 8002d7e:	697a      	ldr	r2, [r7, #20]
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	429a      	cmp	r2, r3
 8002d84:	dbf1      	blt.n	8002d6a <_write+0x12>
  }
  return len;
 8002d86:	687b      	ldr	r3, [r7, #4]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	3718      	adds	r7, #24
 8002d8c:	46bd      	mov	sp, r7
 8002d8e:	bd80      	pop	{r7, pc}

08002d90 <_close>:

int _close(int file)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002d98:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	bc80      	pop	{r7}
 8002da4:	4770      	bx	lr

08002da6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b083      	sub	sp, #12
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
 8002dae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002db6:	605a      	str	r2, [r3, #4]
  return 0;
 8002db8:	2300      	movs	r3, #0
}
 8002dba:	4618      	mov	r0, r3
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	bc80      	pop	{r7}
 8002dc2:	4770      	bx	lr

08002dc4 <_isatty>:

int _isatty(int file)
{
 8002dc4:	b480      	push	{r7}
 8002dc6:	b083      	sub	sp, #12
 8002dc8:	af00      	add	r7, sp, #0
 8002dca:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002dcc:	2301      	movs	r3, #1
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bc80      	pop	{r7}
 8002dd6:	4770      	bx	lr

08002dd8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002dd8:	b480      	push	{r7}
 8002dda:	b085      	sub	sp, #20
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	60f8      	str	r0, [r7, #12]
 8002de0:	60b9      	str	r1, [r7, #8]
 8002de2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002de4:	2300      	movs	r3, #0
}
 8002de6:	4618      	mov	r0, r3
 8002de8:	3714      	adds	r7, #20
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bc80      	pop	{r7}
 8002dee:	4770      	bx	lr

08002df0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002df0:	b580      	push	{r7, lr}
 8002df2:	b086      	sub	sp, #24
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002df8:	4a14      	ldr	r2, [pc, #80]	; (8002e4c <_sbrk+0x5c>)
 8002dfa:	4b15      	ldr	r3, [pc, #84]	; (8002e50 <_sbrk+0x60>)
 8002dfc:	1ad3      	subs	r3, r2, r3
 8002dfe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e00:	697b      	ldr	r3, [r7, #20]
 8002e02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e04:	4b13      	ldr	r3, [pc, #76]	; (8002e54 <_sbrk+0x64>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d102      	bne.n	8002e12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e0c:	4b11      	ldr	r3, [pc, #68]	; (8002e54 <_sbrk+0x64>)
 8002e0e:	4a12      	ldr	r2, [pc, #72]	; (8002e58 <_sbrk+0x68>)
 8002e10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e12:	4b10      	ldr	r3, [pc, #64]	; (8002e54 <_sbrk+0x64>)
 8002e14:	681a      	ldr	r2, [r3, #0]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	4413      	add	r3, r2
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d207      	bcs.n	8002e30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e20:	f006 f968 	bl	80090f4 <__errno>
 8002e24:	4603      	mov	r3, r0
 8002e26:	220c      	movs	r2, #12
 8002e28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e2a:	f04f 33ff 	mov.w	r3, #4294967295
 8002e2e:	e009      	b.n	8002e44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e30:	4b08      	ldr	r3, [pc, #32]	; (8002e54 <_sbrk+0x64>)
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e36:	4b07      	ldr	r3, [pc, #28]	; (8002e54 <_sbrk+0x64>)
 8002e38:	681a      	ldr	r2, [r3, #0]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4413      	add	r3, r2
 8002e3e:	4a05      	ldr	r2, [pc, #20]	; (8002e54 <_sbrk+0x64>)
 8002e40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e42:	68fb      	ldr	r3, [r7, #12]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3718      	adds	r7, #24
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	20005000 	.word	0x20005000
 8002e50:	00000400 	.word	0x00000400
 8002e54:	20000800 	.word	0x20000800
 8002e58:	20002160 	.word	0x20002160

08002e5c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr

08002e68 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e68:	480c      	ldr	r0, [pc, #48]	; (8002e9c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002e6a:	490d      	ldr	r1, [pc, #52]	; (8002ea0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002e6c:	4a0d      	ldr	r2, [pc, #52]	; (8002ea4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002e6e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e70:	e002      	b.n	8002e78 <LoopCopyDataInit>

08002e72 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e72:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e74:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e76:	3304      	adds	r3, #4

08002e78 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e78:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e7a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e7c:	d3f9      	bcc.n	8002e72 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e7e:	4a0a      	ldr	r2, [pc, #40]	; (8002ea8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002e80:	4c0a      	ldr	r4, [pc, #40]	; (8002eac <LoopFillZerobss+0x22>)
  movs r3, #0
 8002e82:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e84:	e001      	b.n	8002e8a <LoopFillZerobss>

08002e86 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e86:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e88:	3204      	adds	r2, #4

08002e8a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e8a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e8c:	d3fb      	bcc.n	8002e86 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002e8e:	f7ff ffe5 	bl	8002e5c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002e92:	f006 f935 	bl	8009100 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002e96:	f7fe fe05 	bl	8001aa4 <main>
  bx lr
 8002e9a:	4770      	bx	lr
  ldr r0, =_sdata
 8002e9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002ea0:	20000200 	.word	0x20000200
  ldr r2, =_sidata
 8002ea4:	0800fd3c 	.word	0x0800fd3c
  ldr r2, =_sbss
 8002ea8:	20000200 	.word	0x20000200
  ldr r4, =_ebss
 8002eac:	2000215c 	.word	0x2000215c

08002eb0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002eb0:	e7fe      	b.n	8002eb0 <ADC1_2_IRQHandler>
	...

08002eb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002eb4:	b580      	push	{r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002eb8:	4b08      	ldr	r3, [pc, #32]	; (8002edc <HAL_Init+0x28>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a07      	ldr	r2, [pc, #28]	; (8002edc <HAL_Init+0x28>)
 8002ebe:	f043 0310 	orr.w	r3, r3, #16
 8002ec2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ec4:	2003      	movs	r0, #3
 8002ec6:	f000 f8f5 	bl	80030b4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002eca:	200f      	movs	r0, #15
 8002ecc:	f7ff fe5e 	bl	8002b8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ed0:	f7ff fd46 	bl	8002960 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	bd80      	pop	{r7, pc}
 8002eda:	bf00      	nop
 8002edc:	40022000 	.word	0x40022000

08002ee0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002ee4:	4b05      	ldr	r3, [pc, #20]	; (8002efc <HAL_IncTick+0x1c>)
 8002ee6:	781b      	ldrb	r3, [r3, #0]
 8002ee8:	461a      	mov	r2, r3
 8002eea:	4b05      	ldr	r3, [pc, #20]	; (8002f00 <HAL_IncTick+0x20>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	4413      	add	r3, r2
 8002ef0:	4a03      	ldr	r2, [pc, #12]	; (8002f00 <HAL_IncTick+0x20>)
 8002ef2:	6013      	str	r3, [r2, #0]
}
 8002ef4:	bf00      	nop
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bc80      	pop	{r7}
 8002efa:	4770      	bx	lr
 8002efc:	20000024 	.word	0x20000024
 8002f00:	20000804 	.word	0x20000804

08002f04 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f04:	b480      	push	{r7}
 8002f06:	af00      	add	r7, sp, #0
  return uwTick;
 8002f08:	4b02      	ldr	r3, [pc, #8]	; (8002f14 <HAL_GetTick+0x10>)
 8002f0a:	681b      	ldr	r3, [r3, #0]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	bc80      	pop	{r7}
 8002f12:	4770      	bx	lr
 8002f14:	20000804 	.word	0x20000804

08002f18 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b084      	sub	sp, #16
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002f20:	f7ff fff0 	bl	8002f04 <HAL_GetTick>
 8002f24:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f30:	d005      	beq.n	8002f3e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f32:	4b0a      	ldr	r3, [pc, #40]	; (8002f5c <HAL_Delay+0x44>)
 8002f34:	781b      	ldrb	r3, [r3, #0]
 8002f36:	461a      	mov	r2, r3
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002f3e:	bf00      	nop
 8002f40:	f7ff ffe0 	bl	8002f04 <HAL_GetTick>
 8002f44:	4602      	mov	r2, r0
 8002f46:	68bb      	ldr	r3, [r7, #8]
 8002f48:	1ad3      	subs	r3, r2, r3
 8002f4a:	68fa      	ldr	r2, [r7, #12]
 8002f4c:	429a      	cmp	r2, r3
 8002f4e:	d8f7      	bhi.n	8002f40 <HAL_Delay+0x28>
  {
  }
}
 8002f50:	bf00      	nop
 8002f52:	bf00      	nop
 8002f54:	3710      	adds	r7, #16
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	20000024 	.word	0x20000024

08002f60 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002f70:	4b0c      	ldr	r3, [pc, #48]	; (8002fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f72:	68db      	ldr	r3, [r3, #12]
 8002f74:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002f76:	68ba      	ldr	r2, [r7, #8]
 8002f78:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002f7c:	4013      	ands	r3, r2
 8002f7e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002f88:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002f8c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002f90:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002f92:	4a04      	ldr	r2, [pc, #16]	; (8002fa4 <__NVIC_SetPriorityGrouping+0x44>)
 8002f94:	68bb      	ldr	r3, [r7, #8]
 8002f96:	60d3      	str	r3, [r2, #12]
}
 8002f98:	bf00      	nop
 8002f9a:	3714      	adds	r7, #20
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	bc80      	pop	{r7}
 8002fa0:	4770      	bx	lr
 8002fa2:	bf00      	nop
 8002fa4:	e000ed00 	.word	0xe000ed00

08002fa8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002fac:	4b04      	ldr	r3, [pc, #16]	; (8002fc0 <__NVIC_GetPriorityGrouping+0x18>)
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	0a1b      	lsrs	r3, r3, #8
 8002fb2:	f003 0307 	and.w	r3, r3, #7
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	e000ed00 	.word	0xe000ed00

08002fc4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	b083      	sub	sp, #12
 8002fc8:	af00      	add	r7, sp, #0
 8002fca:	4603      	mov	r3, r0
 8002fcc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002fce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	db0b      	blt.n	8002fee <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fd6:	79fb      	ldrb	r3, [r7, #7]
 8002fd8:	f003 021f 	and.w	r2, r3, #31
 8002fdc:	4906      	ldr	r1, [pc, #24]	; (8002ff8 <__NVIC_EnableIRQ+0x34>)
 8002fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fe2:	095b      	lsrs	r3, r3, #5
 8002fe4:	2001      	movs	r0, #1
 8002fe6:	fa00 f202 	lsl.w	r2, r0, r2
 8002fea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bc80      	pop	{r7}
 8002ff6:	4770      	bx	lr
 8002ff8:	e000e100 	.word	0xe000e100

08002ffc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	b083      	sub	sp, #12
 8003000:	af00      	add	r7, sp, #0
 8003002:	4603      	mov	r3, r0
 8003004:	6039      	str	r1, [r7, #0]
 8003006:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003008:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800300c:	2b00      	cmp	r3, #0
 800300e:	db0a      	blt.n	8003026 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	b2da      	uxtb	r2, r3
 8003014:	490c      	ldr	r1, [pc, #48]	; (8003048 <__NVIC_SetPriority+0x4c>)
 8003016:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800301a:	0112      	lsls	r2, r2, #4
 800301c:	b2d2      	uxtb	r2, r2
 800301e:	440b      	add	r3, r1
 8003020:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003024:	e00a      	b.n	800303c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	b2da      	uxtb	r2, r3
 800302a:	4908      	ldr	r1, [pc, #32]	; (800304c <__NVIC_SetPriority+0x50>)
 800302c:	79fb      	ldrb	r3, [r7, #7]
 800302e:	f003 030f 	and.w	r3, r3, #15
 8003032:	3b04      	subs	r3, #4
 8003034:	0112      	lsls	r2, r2, #4
 8003036:	b2d2      	uxtb	r2, r2
 8003038:	440b      	add	r3, r1
 800303a:	761a      	strb	r2, [r3, #24]
}
 800303c:	bf00      	nop
 800303e:	370c      	adds	r7, #12
 8003040:	46bd      	mov	sp, r7
 8003042:	bc80      	pop	{r7}
 8003044:	4770      	bx	lr
 8003046:	bf00      	nop
 8003048:	e000e100 	.word	0xe000e100
 800304c:	e000ed00 	.word	0xe000ed00

08003050 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003050:	b480      	push	{r7}
 8003052:	b089      	sub	sp, #36	; 0x24
 8003054:	af00      	add	r7, sp, #0
 8003056:	60f8      	str	r0, [r7, #12]
 8003058:	60b9      	str	r1, [r7, #8]
 800305a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003064:	69fb      	ldr	r3, [r7, #28]
 8003066:	f1c3 0307 	rsb	r3, r3, #7
 800306a:	2b04      	cmp	r3, #4
 800306c:	bf28      	it	cs
 800306e:	2304      	movcs	r3, #4
 8003070:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003072:	69fb      	ldr	r3, [r7, #28]
 8003074:	3304      	adds	r3, #4
 8003076:	2b06      	cmp	r3, #6
 8003078:	d902      	bls.n	8003080 <NVIC_EncodePriority+0x30>
 800307a:	69fb      	ldr	r3, [r7, #28]
 800307c:	3b03      	subs	r3, #3
 800307e:	e000      	b.n	8003082 <NVIC_EncodePriority+0x32>
 8003080:	2300      	movs	r3, #0
 8003082:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003084:	f04f 32ff 	mov.w	r2, #4294967295
 8003088:	69bb      	ldr	r3, [r7, #24]
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43da      	mvns	r2, r3
 8003090:	68bb      	ldr	r3, [r7, #8]
 8003092:	401a      	ands	r2, r3
 8003094:	697b      	ldr	r3, [r7, #20]
 8003096:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003098:	f04f 31ff 	mov.w	r1, #4294967295
 800309c:	697b      	ldr	r3, [r7, #20]
 800309e:	fa01 f303 	lsl.w	r3, r1, r3
 80030a2:	43d9      	mvns	r1, r3
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80030a8:	4313      	orrs	r3, r2
         );
}
 80030aa:	4618      	mov	r0, r3
 80030ac:	3724      	adds	r7, #36	; 0x24
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bc80      	pop	{r7}
 80030b2:	4770      	bx	lr

080030b4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80030bc:	6878      	ldr	r0, [r7, #4]
 80030be:	f7ff ff4f 	bl	8002f60 <__NVIC_SetPriorityGrouping>
}
 80030c2:	bf00      	nop
 80030c4:	3708      	adds	r7, #8
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd80      	pop	{r7, pc}

080030ca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80030ca:	b580      	push	{r7, lr}
 80030cc:	b086      	sub	sp, #24
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	4603      	mov	r3, r0
 80030d2:	60b9      	str	r1, [r7, #8]
 80030d4:	607a      	str	r2, [r7, #4]
 80030d6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80030d8:	2300      	movs	r3, #0
 80030da:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80030dc:	f7ff ff64 	bl	8002fa8 <__NVIC_GetPriorityGrouping>
 80030e0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80030e2:	687a      	ldr	r2, [r7, #4]
 80030e4:	68b9      	ldr	r1, [r7, #8]
 80030e6:	6978      	ldr	r0, [r7, #20]
 80030e8:	f7ff ffb2 	bl	8003050 <NVIC_EncodePriority>
 80030ec:	4602      	mov	r2, r0
 80030ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80030f2:	4611      	mov	r1, r2
 80030f4:	4618      	mov	r0, r3
 80030f6:	f7ff ff81 	bl	8002ffc <__NVIC_SetPriority>
}
 80030fa:	bf00      	nop
 80030fc:	3718      	adds	r7, #24
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}

08003102 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	4603      	mov	r3, r0
 800310a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800310c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003110:	4618      	mov	r0, r3
 8003112:	f7ff ff57 	bl	8002fc4 <__NVIC_EnableIRQ>
}
 8003116:	bf00      	nop
 8003118:	3708      	adds	r7, #8
 800311a:	46bd      	mov	sp, r7
 800311c:	bd80      	pop	{r7, pc}

0800311e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800311e:	b480      	push	{r7}
 8003120:	b085      	sub	sp, #20
 8003122:	af00      	add	r7, sp, #0
 8003124:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003130:	2b02      	cmp	r3, #2
 8003132:	d008      	beq.n	8003146 <HAL_DMA_Abort+0x28>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2204      	movs	r2, #4
 8003138:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e020      	b.n	8003188 <HAL_DMA_Abort+0x6a>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	681a      	ldr	r2, [r3, #0]
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	f022 020e 	bic.w	r2, r2, #14
 8003154:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	681a      	ldr	r2, [r3, #0]
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f022 0201 	bic.w	r2, r2, #1
 8003164:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800316e:	2101      	movs	r1, #1
 8003170:	fa01 f202 	lsl.w	r2, r1, r2
 8003174:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	2200      	movs	r2, #0
 8003182:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003186:	7bfb      	ldrb	r3, [r7, #15]
}
 8003188:	4618      	mov	r0, r3
 800318a:	3714      	adds	r7, #20
 800318c:	46bd      	mov	sp, r7
 800318e:	bc80      	pop	{r7}
 8003190:	4770      	bx	lr
	...

08003194 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003194:	b580      	push	{r7, lr}
 8003196:	b084      	sub	sp, #16
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800319c:	2300      	movs	r3, #0
 800319e:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d005      	beq.n	80031b6 <HAL_DMA_Abort_IT+0x22>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2204      	movs	r2, #4
 80031ae:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	73fb      	strb	r3, [r7, #15]
 80031b4:	e051      	b.n	800325a <HAL_DMA_Abort_IT+0xc6>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	681a      	ldr	r2, [r3, #0]
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f022 020e 	bic.w	r2, r2, #14
 80031c4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f022 0201 	bic.w	r2, r2, #1
 80031d4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	4a22      	ldr	r2, [pc, #136]	; (8003264 <HAL_DMA_Abort_IT+0xd0>)
 80031dc:	4293      	cmp	r3, r2
 80031de:	d029      	beq.n	8003234 <HAL_DMA_Abort_IT+0xa0>
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	4a20      	ldr	r2, [pc, #128]	; (8003268 <HAL_DMA_Abort_IT+0xd4>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d022      	beq.n	8003230 <HAL_DMA_Abort_IT+0x9c>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4a1f      	ldr	r2, [pc, #124]	; (800326c <HAL_DMA_Abort_IT+0xd8>)
 80031f0:	4293      	cmp	r3, r2
 80031f2:	d01a      	beq.n	800322a <HAL_DMA_Abort_IT+0x96>
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1d      	ldr	r2, [pc, #116]	; (8003270 <HAL_DMA_Abort_IT+0xdc>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d012      	beq.n	8003224 <HAL_DMA_Abort_IT+0x90>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	4a1c      	ldr	r2, [pc, #112]	; (8003274 <HAL_DMA_Abort_IT+0xe0>)
 8003204:	4293      	cmp	r3, r2
 8003206:	d00a      	beq.n	800321e <HAL_DMA_Abort_IT+0x8a>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1a      	ldr	r2, [pc, #104]	; (8003278 <HAL_DMA_Abort_IT+0xe4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d102      	bne.n	8003218 <HAL_DMA_Abort_IT+0x84>
 8003212:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003216:	e00e      	b.n	8003236 <HAL_DMA_Abort_IT+0xa2>
 8003218:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800321c:	e00b      	b.n	8003236 <HAL_DMA_Abort_IT+0xa2>
 800321e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003222:	e008      	b.n	8003236 <HAL_DMA_Abort_IT+0xa2>
 8003224:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003228:	e005      	b.n	8003236 <HAL_DMA_Abort_IT+0xa2>
 800322a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800322e:	e002      	b.n	8003236 <HAL_DMA_Abort_IT+0xa2>
 8003230:	2310      	movs	r3, #16
 8003232:	e000      	b.n	8003236 <HAL_DMA_Abort_IT+0xa2>
 8003234:	2301      	movs	r3, #1
 8003236:	4a11      	ldr	r2, [pc, #68]	; (800327c <HAL_DMA_Abort_IT+0xe8>)
 8003238:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2201      	movs	r2, #1
 800323e:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	2200      	movs	r2, #0
 8003246:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800324e:	2b00      	cmp	r3, #0
 8003250:	d003      	beq.n	800325a <HAL_DMA_Abort_IT+0xc6>
    {
      hdma->XferAbortCallback(hdma);
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	4798      	blx	r3
    } 
  }
  return status;
 800325a:	7bfb      	ldrb	r3, [r7, #15]
}
 800325c:	4618      	mov	r0, r3
 800325e:	3710      	adds	r7, #16
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	40020008 	.word	0x40020008
 8003268:	4002001c 	.word	0x4002001c
 800326c:	40020030 	.word	0x40020030
 8003270:	40020044 	.word	0x40020044
 8003274:	40020058 	.word	0x40020058
 8003278:	4002006c 	.word	0x4002006c
 800327c:	40020000 	.word	0x40020000

08003280 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003280:	b480      	push	{r7}
 8003282:	b08b      	sub	sp, #44	; 0x2c
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
 8003288:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800328a:	2300      	movs	r3, #0
 800328c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800328e:	2300      	movs	r3, #0
 8003290:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003292:	e169      	b.n	8003568 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8003294:	2201      	movs	r2, #1
 8003296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003298:	fa02 f303 	lsl.w	r3, r2, r3
 800329c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69fa      	ldr	r2, [r7, #28]
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80032a8:	69ba      	ldr	r2, [r7, #24]
 80032aa:	69fb      	ldr	r3, [r7, #28]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	f040 8158 	bne.w	8003562 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4a9a      	ldr	r2, [pc, #616]	; (8003520 <HAL_GPIO_Init+0x2a0>)
 80032b8:	4293      	cmp	r3, r2
 80032ba:	d05e      	beq.n	800337a <HAL_GPIO_Init+0xfa>
 80032bc:	4a98      	ldr	r2, [pc, #608]	; (8003520 <HAL_GPIO_Init+0x2a0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d875      	bhi.n	80033ae <HAL_GPIO_Init+0x12e>
 80032c2:	4a98      	ldr	r2, [pc, #608]	; (8003524 <HAL_GPIO_Init+0x2a4>)
 80032c4:	4293      	cmp	r3, r2
 80032c6:	d058      	beq.n	800337a <HAL_GPIO_Init+0xfa>
 80032c8:	4a96      	ldr	r2, [pc, #600]	; (8003524 <HAL_GPIO_Init+0x2a4>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d86f      	bhi.n	80033ae <HAL_GPIO_Init+0x12e>
 80032ce:	4a96      	ldr	r2, [pc, #600]	; (8003528 <HAL_GPIO_Init+0x2a8>)
 80032d0:	4293      	cmp	r3, r2
 80032d2:	d052      	beq.n	800337a <HAL_GPIO_Init+0xfa>
 80032d4:	4a94      	ldr	r2, [pc, #592]	; (8003528 <HAL_GPIO_Init+0x2a8>)
 80032d6:	4293      	cmp	r3, r2
 80032d8:	d869      	bhi.n	80033ae <HAL_GPIO_Init+0x12e>
 80032da:	4a94      	ldr	r2, [pc, #592]	; (800352c <HAL_GPIO_Init+0x2ac>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d04c      	beq.n	800337a <HAL_GPIO_Init+0xfa>
 80032e0:	4a92      	ldr	r2, [pc, #584]	; (800352c <HAL_GPIO_Init+0x2ac>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d863      	bhi.n	80033ae <HAL_GPIO_Init+0x12e>
 80032e6:	4a92      	ldr	r2, [pc, #584]	; (8003530 <HAL_GPIO_Init+0x2b0>)
 80032e8:	4293      	cmp	r3, r2
 80032ea:	d046      	beq.n	800337a <HAL_GPIO_Init+0xfa>
 80032ec:	4a90      	ldr	r2, [pc, #576]	; (8003530 <HAL_GPIO_Init+0x2b0>)
 80032ee:	4293      	cmp	r3, r2
 80032f0:	d85d      	bhi.n	80033ae <HAL_GPIO_Init+0x12e>
 80032f2:	2b12      	cmp	r3, #18
 80032f4:	d82a      	bhi.n	800334c <HAL_GPIO_Init+0xcc>
 80032f6:	2b12      	cmp	r3, #18
 80032f8:	d859      	bhi.n	80033ae <HAL_GPIO_Init+0x12e>
 80032fa:	a201      	add	r2, pc, #4	; (adr r2, 8003300 <HAL_GPIO_Init+0x80>)
 80032fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003300:	0800337b 	.word	0x0800337b
 8003304:	08003355 	.word	0x08003355
 8003308:	08003367 	.word	0x08003367
 800330c:	080033a9 	.word	0x080033a9
 8003310:	080033af 	.word	0x080033af
 8003314:	080033af 	.word	0x080033af
 8003318:	080033af 	.word	0x080033af
 800331c:	080033af 	.word	0x080033af
 8003320:	080033af 	.word	0x080033af
 8003324:	080033af 	.word	0x080033af
 8003328:	080033af 	.word	0x080033af
 800332c:	080033af 	.word	0x080033af
 8003330:	080033af 	.word	0x080033af
 8003334:	080033af 	.word	0x080033af
 8003338:	080033af 	.word	0x080033af
 800333c:	080033af 	.word	0x080033af
 8003340:	080033af 	.word	0x080033af
 8003344:	0800335d 	.word	0x0800335d
 8003348:	08003371 	.word	0x08003371
 800334c:	4a79      	ldr	r2, [pc, #484]	; (8003534 <HAL_GPIO_Init+0x2b4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d013      	beq.n	800337a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003352:	e02c      	b.n	80033ae <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	68db      	ldr	r3, [r3, #12]
 8003358:	623b      	str	r3, [r7, #32]
          break;
 800335a:	e029      	b.n	80033b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	3304      	adds	r3, #4
 8003362:	623b      	str	r3, [r7, #32]
          break;
 8003364:	e024      	b.n	80033b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003366:	683b      	ldr	r3, [r7, #0]
 8003368:	68db      	ldr	r3, [r3, #12]
 800336a:	3308      	adds	r3, #8
 800336c:	623b      	str	r3, [r7, #32]
          break;
 800336e:	e01f      	b.n	80033b0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	68db      	ldr	r3, [r3, #12]
 8003374:	330c      	adds	r3, #12
 8003376:	623b      	str	r3, [r7, #32]
          break;
 8003378:	e01a      	b.n	80033b0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d102      	bne.n	8003388 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8003382:	2304      	movs	r3, #4
 8003384:	623b      	str	r3, [r7, #32]
          break;
 8003386:	e013      	b.n	80033b0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	2b01      	cmp	r3, #1
 800338e:	d105      	bne.n	800339c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003390:	2308      	movs	r3, #8
 8003392:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	69fa      	ldr	r2, [r7, #28]
 8003398:	611a      	str	r2, [r3, #16]
          break;
 800339a:	e009      	b.n	80033b0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800339c:	2308      	movs	r3, #8
 800339e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	69fa      	ldr	r2, [r7, #28]
 80033a4:	615a      	str	r2, [r3, #20]
          break;
 80033a6:	e003      	b.n	80033b0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80033a8:	2300      	movs	r3, #0
 80033aa:	623b      	str	r3, [r7, #32]
          break;
 80033ac:	e000      	b.n	80033b0 <HAL_GPIO_Init+0x130>
          break;
 80033ae:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80033b0:	69bb      	ldr	r3, [r7, #24]
 80033b2:	2bff      	cmp	r3, #255	; 0xff
 80033b4:	d801      	bhi.n	80033ba <HAL_GPIO_Init+0x13a>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	e001      	b.n	80033be <HAL_GPIO_Init+0x13e>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	3304      	adds	r3, #4
 80033be:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	2bff      	cmp	r3, #255	; 0xff
 80033c4:	d802      	bhi.n	80033cc <HAL_GPIO_Init+0x14c>
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	e002      	b.n	80033d2 <HAL_GPIO_Init+0x152>
 80033cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ce:	3b08      	subs	r3, #8
 80033d0:	009b      	lsls	r3, r3, #2
 80033d2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	681a      	ldr	r2, [r3, #0]
 80033d8:	210f      	movs	r1, #15
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	fa01 f303 	lsl.w	r3, r1, r3
 80033e0:	43db      	mvns	r3, r3
 80033e2:	401a      	ands	r2, r3
 80033e4:	6a39      	ldr	r1, [r7, #32]
 80033e6:	693b      	ldr	r3, [r7, #16]
 80033e8:	fa01 f303 	lsl.w	r3, r1, r3
 80033ec:	431a      	orrs	r2, r3
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80033f2:	683b      	ldr	r3, [r7, #0]
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	f000 80b1 	beq.w	8003562 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003400:	4b4d      	ldr	r3, [pc, #308]	; (8003538 <HAL_GPIO_Init+0x2b8>)
 8003402:	699b      	ldr	r3, [r3, #24]
 8003404:	4a4c      	ldr	r2, [pc, #304]	; (8003538 <HAL_GPIO_Init+0x2b8>)
 8003406:	f043 0301 	orr.w	r3, r3, #1
 800340a:	6193      	str	r3, [r2, #24]
 800340c:	4b4a      	ldr	r3, [pc, #296]	; (8003538 <HAL_GPIO_Init+0x2b8>)
 800340e:	699b      	ldr	r3, [r3, #24]
 8003410:	f003 0301 	and.w	r3, r3, #1
 8003414:	60bb      	str	r3, [r7, #8]
 8003416:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003418:	4a48      	ldr	r2, [pc, #288]	; (800353c <HAL_GPIO_Init+0x2bc>)
 800341a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341c:	089b      	lsrs	r3, r3, #2
 800341e:	3302      	adds	r3, #2
 8003420:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003424:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003426:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003428:	f003 0303 	and.w	r3, r3, #3
 800342c:	009b      	lsls	r3, r3, #2
 800342e:	220f      	movs	r2, #15
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	43db      	mvns	r3, r3
 8003436:	68fa      	ldr	r2, [r7, #12]
 8003438:	4013      	ands	r3, r2
 800343a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a40      	ldr	r2, [pc, #256]	; (8003540 <HAL_GPIO_Init+0x2c0>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d013      	beq.n	800346c <HAL_GPIO_Init+0x1ec>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	4a3f      	ldr	r2, [pc, #252]	; (8003544 <HAL_GPIO_Init+0x2c4>)
 8003448:	4293      	cmp	r3, r2
 800344a:	d00d      	beq.n	8003468 <HAL_GPIO_Init+0x1e8>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a3e      	ldr	r2, [pc, #248]	; (8003548 <HAL_GPIO_Init+0x2c8>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d007      	beq.n	8003464 <HAL_GPIO_Init+0x1e4>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a3d      	ldr	r2, [pc, #244]	; (800354c <HAL_GPIO_Init+0x2cc>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d101      	bne.n	8003460 <HAL_GPIO_Init+0x1e0>
 800345c:	2303      	movs	r3, #3
 800345e:	e006      	b.n	800346e <HAL_GPIO_Init+0x1ee>
 8003460:	2304      	movs	r3, #4
 8003462:	e004      	b.n	800346e <HAL_GPIO_Init+0x1ee>
 8003464:	2302      	movs	r3, #2
 8003466:	e002      	b.n	800346e <HAL_GPIO_Init+0x1ee>
 8003468:	2301      	movs	r3, #1
 800346a:	e000      	b.n	800346e <HAL_GPIO_Init+0x1ee>
 800346c:	2300      	movs	r3, #0
 800346e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003470:	f002 0203 	and.w	r2, r2, #3
 8003474:	0092      	lsls	r2, r2, #2
 8003476:	4093      	lsls	r3, r2
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800347e:	492f      	ldr	r1, [pc, #188]	; (800353c <HAL_GPIO_Init+0x2bc>)
 8003480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003482:	089b      	lsrs	r3, r3, #2
 8003484:	3302      	adds	r3, #2
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003494:	2b00      	cmp	r3, #0
 8003496:	d006      	beq.n	80034a6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003498:	4b2d      	ldr	r3, [pc, #180]	; (8003550 <HAL_GPIO_Init+0x2d0>)
 800349a:	681a      	ldr	r2, [r3, #0]
 800349c:	492c      	ldr	r1, [pc, #176]	; (8003550 <HAL_GPIO_Init+0x2d0>)
 800349e:	69bb      	ldr	r3, [r7, #24]
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]
 80034a4:	e006      	b.n	80034b4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80034a6:	4b2a      	ldr	r3, [pc, #168]	; (8003550 <HAL_GPIO_Init+0x2d0>)
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	43db      	mvns	r3, r3
 80034ae:	4928      	ldr	r1, [pc, #160]	; (8003550 <HAL_GPIO_Init+0x2d0>)
 80034b0:	4013      	ands	r3, r2
 80034b2:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d006      	beq.n	80034ce <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80034c0:	4b23      	ldr	r3, [pc, #140]	; (8003550 <HAL_GPIO_Init+0x2d0>)
 80034c2:	685a      	ldr	r2, [r3, #4]
 80034c4:	4922      	ldr	r1, [pc, #136]	; (8003550 <HAL_GPIO_Init+0x2d0>)
 80034c6:	69bb      	ldr	r3, [r7, #24]
 80034c8:	4313      	orrs	r3, r2
 80034ca:	604b      	str	r3, [r1, #4]
 80034cc:	e006      	b.n	80034dc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80034ce:	4b20      	ldr	r3, [pc, #128]	; (8003550 <HAL_GPIO_Init+0x2d0>)
 80034d0:	685a      	ldr	r2, [r3, #4]
 80034d2:	69bb      	ldr	r3, [r7, #24]
 80034d4:	43db      	mvns	r3, r3
 80034d6:	491e      	ldr	r1, [pc, #120]	; (8003550 <HAL_GPIO_Init+0x2d0>)
 80034d8:	4013      	ands	r3, r2
 80034da:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d006      	beq.n	80034f6 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80034e8:	4b19      	ldr	r3, [pc, #100]	; (8003550 <HAL_GPIO_Init+0x2d0>)
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	4918      	ldr	r1, [pc, #96]	; (8003550 <HAL_GPIO_Init+0x2d0>)
 80034ee:	69bb      	ldr	r3, [r7, #24]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	608b      	str	r3, [r1, #8]
 80034f4:	e006      	b.n	8003504 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80034f6:	4b16      	ldr	r3, [pc, #88]	; (8003550 <HAL_GPIO_Init+0x2d0>)
 80034f8:	689a      	ldr	r2, [r3, #8]
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	43db      	mvns	r3, r3
 80034fe:	4914      	ldr	r1, [pc, #80]	; (8003550 <HAL_GPIO_Init+0x2d0>)
 8003500:	4013      	ands	r3, r2
 8003502:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800350c:	2b00      	cmp	r3, #0
 800350e:	d021      	beq.n	8003554 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003510:	4b0f      	ldr	r3, [pc, #60]	; (8003550 <HAL_GPIO_Init+0x2d0>)
 8003512:	68da      	ldr	r2, [r3, #12]
 8003514:	490e      	ldr	r1, [pc, #56]	; (8003550 <HAL_GPIO_Init+0x2d0>)
 8003516:	69bb      	ldr	r3, [r7, #24]
 8003518:	4313      	orrs	r3, r2
 800351a:	60cb      	str	r3, [r1, #12]
 800351c:	e021      	b.n	8003562 <HAL_GPIO_Init+0x2e2>
 800351e:	bf00      	nop
 8003520:	10320000 	.word	0x10320000
 8003524:	10310000 	.word	0x10310000
 8003528:	10220000 	.word	0x10220000
 800352c:	10210000 	.word	0x10210000
 8003530:	10120000 	.word	0x10120000
 8003534:	10110000 	.word	0x10110000
 8003538:	40021000 	.word	0x40021000
 800353c:	40010000 	.word	0x40010000
 8003540:	40010800 	.word	0x40010800
 8003544:	40010c00 	.word	0x40010c00
 8003548:	40011000 	.word	0x40011000
 800354c:	40011400 	.word	0x40011400
 8003550:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003554:	4b0b      	ldr	r3, [pc, #44]	; (8003584 <HAL_GPIO_Init+0x304>)
 8003556:	68da      	ldr	r2, [r3, #12]
 8003558:	69bb      	ldr	r3, [r7, #24]
 800355a:	43db      	mvns	r3, r3
 800355c:	4909      	ldr	r1, [pc, #36]	; (8003584 <HAL_GPIO_Init+0x304>)
 800355e:	4013      	ands	r3, r2
 8003560:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	3301      	adds	r3, #1
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	681a      	ldr	r2, [r3, #0]
 800356c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356e:	fa22 f303 	lsr.w	r3, r2, r3
 8003572:	2b00      	cmp	r3, #0
 8003574:	f47f ae8e 	bne.w	8003294 <HAL_GPIO_Init+0x14>
  }
}
 8003578:	bf00      	nop
 800357a:	bf00      	nop
 800357c:	372c      	adds	r7, #44	; 0x2c
 800357e:	46bd      	mov	sp, r7
 8003580:	bc80      	pop	{r7}
 8003582:	4770      	bx	lr
 8003584:	40010400 	.word	0x40010400

08003588 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003588:	b480      	push	{r7}
 800358a:	b085      	sub	sp, #20
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	689a      	ldr	r2, [r3, #8]
 8003598:	887b      	ldrh	r3, [r7, #2]
 800359a:	4013      	ands	r3, r2
 800359c:	2b00      	cmp	r3, #0
 800359e:	d002      	beq.n	80035a6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80035a0:	2301      	movs	r3, #1
 80035a2:	73fb      	strb	r3, [r7, #15]
 80035a4:	e001      	b.n	80035aa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80035a6:	2300      	movs	r3, #0
 80035a8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80035aa:	7bfb      	ldrb	r3, [r7, #15]
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3714      	adds	r7, #20
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bc80      	pop	{r7}
 80035b4:	4770      	bx	lr

080035b6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80035b6:	b480      	push	{r7}
 80035b8:	b083      	sub	sp, #12
 80035ba:	af00      	add	r7, sp, #0
 80035bc:	6078      	str	r0, [r7, #4]
 80035be:	460b      	mov	r3, r1
 80035c0:	807b      	strh	r3, [r7, #2]
 80035c2:	4613      	mov	r3, r2
 80035c4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80035c6:	787b      	ldrb	r3, [r7, #1]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d003      	beq.n	80035d4 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80035cc:	887a      	ldrh	r2, [r7, #2]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80035d2:	e003      	b.n	80035dc <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80035d4:	887b      	ldrh	r3, [r7, #2]
 80035d6:	041a      	lsls	r2, r3, #16
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	611a      	str	r2, [r3, #16]
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bc80      	pop	{r7}
 80035e4:	4770      	bx	lr
	...

080035e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d101      	bne.n	80035fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e12b      	b.n	8003852 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003600:	b2db      	uxtb	r3, r3
 8003602:	2b00      	cmp	r3, #0
 8003604:	d106      	bne.n	8003614 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	2200      	movs	r2, #0
 800360a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800360e:	6878      	ldr	r0, [r7, #4]
 8003610:	f7ff f9de 	bl	80029d0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2224      	movs	r2, #36	; 0x24
 8003618:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681a      	ldr	r2, [r3, #0]
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	f022 0201 	bic.w	r2, r2, #1
 800362a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800363a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	681a      	ldr	r2, [r3, #0]
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800364a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800364c:	f001 fc9c 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 8003650:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	685b      	ldr	r3, [r3, #4]
 8003656:	4a81      	ldr	r2, [pc, #516]	; (800385c <HAL_I2C_Init+0x274>)
 8003658:	4293      	cmp	r3, r2
 800365a:	d807      	bhi.n	800366c <HAL_I2C_Init+0x84>
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	4a80      	ldr	r2, [pc, #512]	; (8003860 <HAL_I2C_Init+0x278>)
 8003660:	4293      	cmp	r3, r2
 8003662:	bf94      	ite	ls
 8003664:	2301      	movls	r3, #1
 8003666:	2300      	movhi	r3, #0
 8003668:	b2db      	uxtb	r3, r3
 800366a:	e006      	b.n	800367a <HAL_I2C_Init+0x92>
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4a7d      	ldr	r2, [pc, #500]	; (8003864 <HAL_I2C_Init+0x27c>)
 8003670:	4293      	cmp	r3, r2
 8003672:	bf94      	ite	ls
 8003674:	2301      	movls	r3, #1
 8003676:	2300      	movhi	r3, #0
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800367e:	2301      	movs	r3, #1
 8003680:	e0e7      	b.n	8003852 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	4a78      	ldr	r2, [pc, #480]	; (8003868 <HAL_I2C_Init+0x280>)
 8003686:	fba2 2303 	umull	r2, r3, r2, r3
 800368a:	0c9b      	lsrs	r3, r3, #18
 800368c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	68ba      	ldr	r2, [r7, #8]
 800369e:	430a      	orrs	r2, r1
 80036a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	6a1b      	ldr	r3, [r3, #32]
 80036a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	4a6a      	ldr	r2, [pc, #424]	; (800385c <HAL_I2C_Init+0x274>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d802      	bhi.n	80036bc <HAL_I2C_Init+0xd4>
 80036b6:	68bb      	ldr	r3, [r7, #8]
 80036b8:	3301      	adds	r3, #1
 80036ba:	e009      	b.n	80036d0 <HAL_I2C_Init+0xe8>
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80036c2:	fb02 f303 	mul.w	r3, r2, r3
 80036c6:	4a69      	ldr	r2, [pc, #420]	; (800386c <HAL_I2C_Init+0x284>)
 80036c8:	fba2 2303 	umull	r2, r3, r2, r3
 80036cc:	099b      	lsrs	r3, r3, #6
 80036ce:	3301      	adds	r3, #1
 80036d0:	687a      	ldr	r2, [r7, #4]
 80036d2:	6812      	ldr	r2, [r2, #0]
 80036d4:	430b      	orrs	r3, r1
 80036d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	69db      	ldr	r3, [r3, #28]
 80036de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80036e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	685b      	ldr	r3, [r3, #4]
 80036ea:	495c      	ldr	r1, [pc, #368]	; (800385c <HAL_I2C_Init+0x274>)
 80036ec:	428b      	cmp	r3, r1
 80036ee:	d819      	bhi.n	8003724 <HAL_I2C_Init+0x13c>
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	1e59      	subs	r1, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	005b      	lsls	r3, r3, #1
 80036fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80036fe:	1c59      	adds	r1, r3, #1
 8003700:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003704:	400b      	ands	r3, r1
 8003706:	2b00      	cmp	r3, #0
 8003708:	d00a      	beq.n	8003720 <HAL_I2C_Init+0x138>
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	1e59      	subs	r1, r3, #1
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	685b      	ldr	r3, [r3, #4]
 8003712:	005b      	lsls	r3, r3, #1
 8003714:	fbb1 f3f3 	udiv	r3, r1, r3
 8003718:	3301      	adds	r3, #1
 800371a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800371e:	e051      	b.n	80037c4 <HAL_I2C_Init+0x1dc>
 8003720:	2304      	movs	r3, #4
 8003722:	e04f      	b.n	80037c4 <HAL_I2C_Init+0x1dc>
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d111      	bne.n	8003750 <HAL_I2C_Init+0x168>
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	1e58      	subs	r0, r3, #1
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	6859      	ldr	r1, [r3, #4]
 8003734:	460b      	mov	r3, r1
 8003736:	005b      	lsls	r3, r3, #1
 8003738:	440b      	add	r3, r1
 800373a:	fbb0 f3f3 	udiv	r3, r0, r3
 800373e:	3301      	adds	r3, #1
 8003740:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003744:	2b00      	cmp	r3, #0
 8003746:	bf0c      	ite	eq
 8003748:	2301      	moveq	r3, #1
 800374a:	2300      	movne	r3, #0
 800374c:	b2db      	uxtb	r3, r3
 800374e:	e012      	b.n	8003776 <HAL_I2C_Init+0x18e>
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	1e58      	subs	r0, r3, #1
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	6859      	ldr	r1, [r3, #4]
 8003758:	460b      	mov	r3, r1
 800375a:	009b      	lsls	r3, r3, #2
 800375c:	440b      	add	r3, r1
 800375e:	0099      	lsls	r1, r3, #2
 8003760:	440b      	add	r3, r1
 8003762:	fbb0 f3f3 	udiv	r3, r0, r3
 8003766:	3301      	adds	r3, #1
 8003768:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800376c:	2b00      	cmp	r3, #0
 800376e:	bf0c      	ite	eq
 8003770:	2301      	moveq	r3, #1
 8003772:	2300      	movne	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	2b00      	cmp	r3, #0
 8003778:	d001      	beq.n	800377e <HAL_I2C_Init+0x196>
 800377a:	2301      	movs	r3, #1
 800377c:	e022      	b.n	80037c4 <HAL_I2C_Init+0x1dc>
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	689b      	ldr	r3, [r3, #8]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d10e      	bne.n	80037a4 <HAL_I2C_Init+0x1bc>
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	1e58      	subs	r0, r3, #1
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	6859      	ldr	r1, [r3, #4]
 800378e:	460b      	mov	r3, r1
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	440b      	add	r3, r1
 8003794:	fbb0 f3f3 	udiv	r3, r0, r3
 8003798:	3301      	adds	r3, #1
 800379a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800379e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80037a2:	e00f      	b.n	80037c4 <HAL_I2C_Init+0x1dc>
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	1e58      	subs	r0, r3, #1
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	6859      	ldr	r1, [r3, #4]
 80037ac:	460b      	mov	r3, r1
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	440b      	add	r3, r1
 80037b2:	0099      	lsls	r1, r3, #2
 80037b4:	440b      	add	r3, r1
 80037b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80037ba:	3301      	adds	r3, #1
 80037bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80037c4:	6879      	ldr	r1, [r7, #4]
 80037c6:	6809      	ldr	r1, [r1, #0]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	681b      	ldr	r3, [r3, #0]
 80037d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	69da      	ldr	r2, [r3, #28]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	6a1b      	ldr	r3, [r3, #32]
 80037de:	431a      	orrs	r2, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	430a      	orrs	r2, r1
 80037e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	689b      	ldr	r3, [r3, #8]
 80037ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80037f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80037f6:	687a      	ldr	r2, [r7, #4]
 80037f8:	6911      	ldr	r1, [r2, #16]
 80037fa:	687a      	ldr	r2, [r7, #4]
 80037fc:	68d2      	ldr	r2, [r2, #12]
 80037fe:	4311      	orrs	r1, r2
 8003800:	687a      	ldr	r2, [r7, #4]
 8003802:	6812      	ldr	r2, [r2, #0]
 8003804:	430b      	orrs	r3, r1
 8003806:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68db      	ldr	r3, [r3, #12]
 800380e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	695a      	ldr	r2, [r3, #20]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	431a      	orrs	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681a      	ldr	r2, [r3, #0]
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	f042 0201 	orr.w	r2, r2, #1
 8003832:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	2200      	movs	r2, #0
 8003838:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	2220      	movs	r2, #32
 800383e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2200      	movs	r2, #0
 8003846:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	2200      	movs	r2, #0
 800384c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	000186a0 	.word	0x000186a0
 8003860:	001e847f 	.word	0x001e847f
 8003864:	003d08ff 	.word	0x003d08ff
 8003868:	431bde83 	.word	0x431bde83
 800386c:	10624dd3 	.word	0x10624dd3

08003870 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003870:	b580      	push	{r7, lr}
 8003872:	b088      	sub	sp, #32
 8003874:	af02      	add	r7, sp, #8
 8003876:	60f8      	str	r0, [r7, #12]
 8003878:	607a      	str	r2, [r7, #4]
 800387a:	461a      	mov	r2, r3
 800387c:	460b      	mov	r3, r1
 800387e:	817b      	strh	r3, [r7, #10]
 8003880:	4613      	mov	r3, r2
 8003882:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003884:	f7ff fb3e 	bl	8002f04 <HAL_GetTick>
 8003888:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003890:	b2db      	uxtb	r3, r3
 8003892:	2b20      	cmp	r3, #32
 8003894:	f040 80e0 	bne.w	8003a58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003898:	697b      	ldr	r3, [r7, #20]
 800389a:	9300      	str	r3, [sp, #0]
 800389c:	2319      	movs	r3, #25
 800389e:	2201      	movs	r2, #1
 80038a0:	4970      	ldr	r1, [pc, #448]	; (8003a64 <HAL_I2C_Master_Transmit+0x1f4>)
 80038a2:	68f8      	ldr	r0, [r7, #12]
 80038a4:	f000 fdc0 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 80038a8:	4603      	mov	r3, r0
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80038ae:	2302      	movs	r3, #2
 80038b0:	e0d3      	b.n	8003a5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d101      	bne.n	80038c0 <HAL_I2C_Master_Transmit+0x50>
 80038bc:	2302      	movs	r3, #2
 80038be:	e0cc      	b.n	8003a5a <HAL_I2C_Master_Transmit+0x1ea>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	2201      	movs	r2, #1
 80038c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d007      	beq.n	80038e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f042 0201 	orr.w	r2, r2, #1
 80038e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	681a      	ldr	r2, [r3, #0]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2221      	movs	r2, #33	; 0x21
 80038fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2210      	movs	r2, #16
 8003902:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	893a      	ldrh	r2, [r7, #8]
 8003916:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800391c:	b29a      	uxth	r2, r3
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	4a50      	ldr	r2, [pc, #320]	; (8003a68 <HAL_I2C_Master_Transmit+0x1f8>)
 8003926:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003928:	8979      	ldrh	r1, [r7, #10]
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	6a3a      	ldr	r2, [r7, #32]
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 fc2a 	bl	8004188 <I2C_MasterRequestWrite>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d001      	beq.n	800393e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e08d      	b.n	8003a5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800393e:	2300      	movs	r3, #0
 8003940:	613b      	str	r3, [r7, #16]
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	695b      	ldr	r3, [r3, #20]
 8003948:	613b      	str	r3, [r7, #16]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	613b      	str	r3, [r7, #16]
 8003952:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003954:	e066      	b.n	8003a24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003956:	697a      	ldr	r2, [r7, #20]
 8003958:	6a39      	ldr	r1, [r7, #32]
 800395a:	68f8      	ldr	r0, [r7, #12]
 800395c:	f000 fe3a 	bl	80045d4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003960:	4603      	mov	r3, r0
 8003962:	2b00      	cmp	r3, #0
 8003964:	d00d      	beq.n	8003982 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800396a:	2b04      	cmp	r3, #4
 800396c:	d107      	bne.n	800397e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	681a      	ldr	r2, [r3, #0]
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800397c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800397e:	2301      	movs	r3, #1
 8003980:	e06b      	b.n	8003a5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003986:	781a      	ldrb	r2, [r3, #0]
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003992:	1c5a      	adds	r2, r3, #1
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800399c:	b29b      	uxth	r3, r3
 800399e:	3b01      	subs	r3, #1
 80039a0:	b29a      	uxth	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039aa:	3b01      	subs	r3, #1
 80039ac:	b29a      	uxth	r2, r3
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	695b      	ldr	r3, [r3, #20]
 80039b8:	f003 0304 	and.w	r3, r3, #4
 80039bc:	2b04      	cmp	r3, #4
 80039be:	d11b      	bne.n	80039f8 <HAL_I2C_Master_Transmit+0x188>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d017      	beq.n	80039f8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039cc:	781a      	ldrb	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039d4:	68fb      	ldr	r3, [r7, #12]
 80039d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d8:	1c5a      	adds	r2, r3, #1
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e2:	b29b      	uxth	r3, r3
 80039e4:	3b01      	subs	r3, #1
 80039e6:	b29a      	uxth	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f0:	3b01      	subs	r3, #1
 80039f2:	b29a      	uxth	r2, r3
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039f8:	697a      	ldr	r2, [r7, #20]
 80039fa:	6a39      	ldr	r1, [r7, #32]
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f000 fe2a 	bl	8004656 <I2C_WaitOnBTFFlagUntilTimeout>
 8003a02:	4603      	mov	r3, r0
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d00d      	beq.n	8003a24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a0c:	2b04      	cmp	r3, #4
 8003a0e:	d107      	bne.n	8003a20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	681a      	ldr	r2, [r3, #0]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a20:	2301      	movs	r3, #1
 8003a22:	e01a      	b.n	8003a5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d194      	bne.n	8003956 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	681a      	ldr	r2, [r3, #0]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	2200      	movs	r2, #0
 8003a48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e000      	b.n	8003a5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003a58:	2302      	movs	r3, #2
  }
}
 8003a5a:	4618      	mov	r0, r3
 8003a5c:	3718      	adds	r7, #24
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	00100002 	.word	0x00100002
 8003a68:	ffff0000 	.word	0xffff0000

08003a6c <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b08c      	sub	sp, #48	; 0x30
 8003a70:	af02      	add	r7, sp, #8
 8003a72:	60f8      	str	r0, [r7, #12]
 8003a74:	607a      	str	r2, [r7, #4]
 8003a76:	461a      	mov	r2, r3
 8003a78:	460b      	mov	r3, r1
 8003a7a:	817b      	strh	r3, [r7, #10]
 8003a7c:	4613      	mov	r3, r2
 8003a7e:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003a80:	2300      	movs	r3, #0
 8003a82:	623b      	str	r3, [r7, #32]

  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a84:	f7ff fa3e 	bl	8002f04 <HAL_GetTick>
 8003a88:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a90:	b2db      	uxtb	r3, r3
 8003a92:	2b20      	cmp	r3, #32
 8003a94:	f040 823f 	bne.w	8003f16 <HAL_I2C_Master_Receive+0x4aa>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a9a:	9300      	str	r3, [sp, #0]
 8003a9c:	2319      	movs	r3, #25
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	497f      	ldr	r1, [pc, #508]	; (8003ca0 <HAL_I2C_Master_Receive+0x234>)
 8003aa2:	68f8      	ldr	r0, [r7, #12]
 8003aa4:	f000 fcc0 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8003aa8:	4603      	mov	r3, r0
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_I2C_Master_Receive+0x46>
    {
      return HAL_BUSY;
 8003aae:	2302      	movs	r3, #2
 8003ab0:	e232      	b.n	8003f18 <HAL_I2C_Master_Receive+0x4ac>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab8:	2b01      	cmp	r3, #1
 8003aba:	d101      	bne.n	8003ac0 <HAL_I2C_Master_Receive+0x54>
 8003abc:	2302      	movs	r3, #2
 8003abe:	e22b      	b.n	8003f18 <HAL_I2C_Master_Receive+0x4ac>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f003 0301 	and.w	r3, r3, #1
 8003ad2:	2b01      	cmp	r3, #1
 8003ad4:	d007      	beq.n	8003ae6 <HAL_I2C_Master_Receive+0x7a>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f042 0201 	orr.w	r2, r2, #1
 8003ae4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	681a      	ldr	r2, [r3, #0]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	2222      	movs	r2, #34	; 0x22
 8003afa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	2210      	movs	r2, #16
 8003b02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	687a      	ldr	r2, [r7, #4]
 8003b10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	893a      	ldrh	r2, [r7, #8]
 8003b16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b1c:	b29a      	uxth	r2, r3
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	4a5f      	ldr	r2, [pc, #380]	; (8003ca4 <HAL_I2C_Master_Receive+0x238>)
 8003b26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b28:	8979      	ldrh	r1, [r7, #10]
 8003b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f000 fbac 	bl	800428c <I2C_MasterRequestRead>
 8003b34:	4603      	mov	r3, r0
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d001      	beq.n	8003b3e <HAL_I2C_Master_Receive+0xd2>
    {
      return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e1ec      	b.n	8003f18 <HAL_I2C_Master_Receive+0x4ac>
    }

    if (hi2c->XferSize == 0U)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d113      	bne.n	8003b6e <HAL_I2C_Master_Receive+0x102>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b46:	2300      	movs	r3, #0
 8003b48:	61fb      	str	r3, [r7, #28]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	695b      	ldr	r3, [r3, #20]
 8003b50:	61fb      	str	r3, [r7, #28]
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	61fb      	str	r3, [r7, #28]
 8003b5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	e1c0      	b.n	8003ef0 <HAL_I2C_Master_Receive+0x484>
    }
    else if (hi2c->XferSize == 1U)
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d11e      	bne.n	8003bb4 <HAL_I2C_Master_Receive+0x148>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b84:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003b86:	b672      	cpsid	i
}
 8003b88:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	61bb      	str	r3, [r7, #24]
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	695b      	ldr	r3, [r3, #20]
 8003b94:	61bb      	str	r3, [r7, #24]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	699b      	ldr	r3, [r3, #24]
 8003b9c:	61bb      	str	r3, [r7, #24]
 8003b9e:	69bb      	ldr	r3, [r7, #24]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bae:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003bb0:	b662      	cpsie	i
}
 8003bb2:	e035      	b.n	8003c20 <HAL_I2C_Master_Receive+0x1b4>

      /* Re-enable IRQs */
      __enable_irq();
    }
    else if (hi2c->XferSize == 2U)
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d11e      	bne.n	8003bfa <HAL_I2C_Master_Receive+0x18e>
    {
      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003bca:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003bcc:	b672      	cpsid	i
}
 8003bce:	bf00      	nop
      /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
      software sequence must complete before the current byte end of transfer */
      __disable_irq();

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	695b      	ldr	r3, [r3, #20]
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	699b      	ldr	r3, [r3, #24]
 8003be2:	617b      	str	r3, [r7, #20]
 8003be4:	697b      	ldr	r3, [r7, #20]

      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf4:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8003bf6:	b662      	cpsie	i
}
 8003bf8:	e012      	b.n	8003c20 <HAL_I2C_Master_Receive+0x1b4>
      __enable_irq();
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	681a      	ldr	r2, [r3, #0]
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003c08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	613b      	str	r3, [r7, #16]
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	699b      	ldr	r3, [r3, #24]
 8003c1c:	613b      	str	r3, [r7, #16]
 8003c1e:	693b      	ldr	r3, [r7, #16]
    }

    while (hi2c->XferSize > 0U)
 8003c20:	e166      	b.n	8003ef0 <HAL_I2C_Master_Receive+0x484>
    {
      if (hi2c->XferSize <= 3U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	2b03      	cmp	r3, #3
 8003c28:	f200 811f 	bhi.w	8003e6a <HAL_I2C_Master_Receive+0x3fe>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d123      	bne.n	8003c7c <HAL_I2C_Master_Receive+0x210>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c34:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c36:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f000 fd4d 	bl	80046d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c3e:	4603      	mov	r3, r0
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	d001      	beq.n	8003c48 <HAL_I2C_Master_Receive+0x1dc>
          {
            return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e167      	b.n	8003f18 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	b2d2      	uxtb	r2, r2
 8003c54:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c5a:	1c5a      	adds	r2, r3, #1
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c64:	3b01      	subs	r3, #1
 8003c66:	b29a      	uxth	r2, r3
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c70:	b29b      	uxth	r3, r3
 8003c72:	3b01      	subs	r3, #1
 8003c74:	b29a      	uxth	r2, r3
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c7a:	e139      	b.n	8003ef0 <HAL_I2C_Master_Receive+0x484>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c80:	2b02      	cmp	r3, #2
 8003c82:	d152      	bne.n	8003d2a <HAL_I2C_Master_Receive+0x2be>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c86:	9300      	str	r3, [sp, #0]
 8003c88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	4906      	ldr	r1, [pc, #24]	; (8003ca8 <HAL_I2C_Master_Receive+0x23c>)
 8003c8e:	68f8      	ldr	r0, [r7, #12]
 8003c90:	f000 fbca 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8003c94:	4603      	mov	r3, r0
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d008      	beq.n	8003cac <HAL_I2C_Master_Receive+0x240>
          {
            return HAL_ERROR;
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e13c      	b.n	8003f18 <HAL_I2C_Master_Receive+0x4ac>
 8003c9e:	bf00      	nop
 8003ca0:	00100002 	.word	0x00100002
 8003ca4:	ffff0000 	.word	0xffff0000
 8003ca8:	00010004 	.word	0x00010004
  __ASM volatile ("cpsid i" : : : "memory");
 8003cac:	b672      	cpsid	i
}
 8003cae:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003cbe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	691a      	ldr	r2, [r3, #16]
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cca:	b2d2      	uxtb	r2, r2
 8003ccc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd2:	1c5a      	adds	r2, r3, #1
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cdc:	3b01      	subs	r3, #1
 8003cde:	b29a      	uxth	r2, r3
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ce8:	b29b      	uxth	r3, r3
 8003cea:	3b01      	subs	r3, #1
 8003cec:	b29a      	uxth	r2, r3
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003cf2:	b662      	cpsie	i
}
 8003cf4:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	691a      	ldr	r2, [r3, #16]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d00:	b2d2      	uxtb	r2, r2
 8003d02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d08:	1c5a      	adds	r2, r3, #1
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d12:	3b01      	subs	r3, #1
 8003d14:	b29a      	uxth	r2, r3
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	3b01      	subs	r3, #1
 8003d22:	b29a      	uxth	r2, r3
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003d28:	e0e2      	b.n	8003ef0 <HAL_I2C_Master_Receive+0x484>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	9300      	str	r3, [sp, #0]
 8003d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d30:	2200      	movs	r2, #0
 8003d32:	497b      	ldr	r1, [pc, #492]	; (8003f20 <HAL_I2C_Master_Receive+0x4b4>)
 8003d34:	68f8      	ldr	r0, [r7, #12]
 8003d36:	f000 fb77 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8003d3a:	4603      	mov	r3, r0
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d001      	beq.n	8003d44 <HAL_I2C_Master_Receive+0x2d8>
          {
            return HAL_ERROR;
 8003d40:	2301      	movs	r3, #1
 8003d42:	e0e9      	b.n	8003f18 <HAL_I2C_Master_Receive+0x4ac>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d52:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsid i" : : : "memory");
 8003d54:	b672      	cpsid	i
}
 8003d56:	bf00      	nop
          /* Disable all active IRQs around ADDR clearing and STOP programming because the EV6_3
             software sequence must complete before the current byte end of transfer */
          __disable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	691a      	ldr	r2, [r3, #16]
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d62:	b2d2      	uxtb	r2, r2
 8003d64:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d6a:	1c5a      	adds	r2, r3, #1
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d74:	3b01      	subs	r3, #1
 8003d76:	b29a      	uxth	r2, r3
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d80:	b29b      	uxth	r3, r3
 8003d82:	3b01      	subs	r3, #1
 8003d84:	b29a      	uxth	r2, r3
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8003d8a:	4b66      	ldr	r3, [pc, #408]	; (8003f24 <HAL_I2C_Master_Receive+0x4b8>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	08db      	lsrs	r3, r3, #3
 8003d90:	4a65      	ldr	r2, [pc, #404]	; (8003f28 <HAL_I2C_Master_Receive+0x4bc>)
 8003d92:	fba2 2303 	umull	r2, r3, r2, r3
 8003d96:	0a1a      	lsrs	r2, r3, #8
 8003d98:	4613      	mov	r3, r2
 8003d9a:	009b      	lsls	r3, r3, #2
 8003d9c:	4413      	add	r3, r2
 8003d9e:	00da      	lsls	r2, r3, #3
 8003da0:	1ad3      	subs	r3, r2, r3
 8003da2:	623b      	str	r3, [r7, #32]
          do
          {
            count--;
 8003da4:	6a3b      	ldr	r3, [r7, #32]
 8003da6:	3b01      	subs	r3, #1
 8003da8:	623b      	str	r3, [r7, #32]
            if (count == 0U)
 8003daa:	6a3b      	ldr	r3, [r7, #32]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d118      	bne.n	8003de2 <HAL_I2C_Master_Receive+0x376>
            {
              hi2c->PreviousState       = I2C_STATE_NONE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	2200      	movs	r2, #0
 8003db4:	631a      	str	r2, [r3, #48]	; 0x30
              hi2c->State               = HAL_I2C_STATE_READY;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2220      	movs	r2, #32
 8003dba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
              hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
              hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dca:	f043 0220 	orr.w	r2, r3, #32
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	641a      	str	r2, [r3, #64]	; 0x40
  __ASM volatile ("cpsie i" : : : "memory");
 8003dd2:	b662      	cpsie	i
}
 8003dd4:	bf00      	nop

              /* Re-enable IRQs */
              __enable_irq();

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

              return HAL_ERROR;
 8003dde:	2301      	movs	r3, #1
 8003de0:	e09a      	b.n	8003f18 <HAL_I2C_Master_Receive+0x4ac>
            }
          }
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	695b      	ldr	r3, [r3, #20]
 8003de8:	f003 0304 	and.w	r3, r3, #4
 8003dec:	2b04      	cmp	r3, #4
 8003dee:	d1d9      	bne.n	8003da4 <HAL_I2C_Master_Receive+0x338>

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	681b      	ldr	r3, [r3, #0]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dfe:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	691a      	ldr	r2, [r3, #16]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0a:	b2d2      	uxtb	r2, r2
 8003e0c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e1c:	3b01      	subs	r3, #1
 8003e1e:	b29a      	uxth	r2, r3
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e28:	b29b      	uxth	r3, r3
 8003e2a:	3b01      	subs	r3, #1
 8003e2c:	b29a      	uxth	r2, r3
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	855a      	strh	r2, [r3, #42]	; 0x2a
  __ASM volatile ("cpsie i" : : : "memory");
 8003e32:	b662      	cpsie	i
}
 8003e34:	bf00      	nop

          /* Re-enable IRQs */
          __enable_irq();

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	691a      	ldr	r2, [r3, #16]
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e40:	b2d2      	uxtb	r2, r2
 8003e42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	1c5a      	adds	r2, r3, #1
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e52:	3b01      	subs	r3, #1
 8003e54:	b29a      	uxth	r2, r3
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e5e:	b29b      	uxth	r3, r3
 8003e60:	3b01      	subs	r3, #1
 8003e62:	b29a      	uxth	r2, r3
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003e68:	e042      	b.n	8003ef0 <HAL_I2C_Master_Receive+0x484>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 fc32 	bl	80046d8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e74:	4603      	mov	r3, r0
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d001      	beq.n	8003e7e <HAL_I2C_Master_Receive+0x412>
        {
          return HAL_ERROR;
 8003e7a:	2301      	movs	r3, #1
 8003e7c:	e04c      	b.n	8003f18 <HAL_I2C_Master_Receive+0x4ac>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	691a      	ldr	r2, [r3, #16]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e88:	b2d2      	uxtb	r2, r2
 8003e8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	1c5a      	adds	r2, r3, #1
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e9a:	3b01      	subs	r3, #1
 8003e9c:	b29a      	uxth	r2, r3
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea6:	b29b      	uxth	r3, r3
 8003ea8:	3b01      	subs	r3, #1
 8003eaa:	b29a      	uxth	r2, r3
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	695b      	ldr	r3, [r3, #20]
 8003eb6:	f003 0304 	and.w	r3, r3, #4
 8003eba:	2b04      	cmp	r3, #4
 8003ebc:	d118      	bne.n	8003ef0 <HAL_I2C_Master_Receive+0x484>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	691a      	ldr	r2, [r3, #16]
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ec8:	b2d2      	uxtb	r2, r2
 8003eca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed0:	1c5a      	adds	r2, r3, #1
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ee6:	b29b      	uxth	r3, r3
 8003ee8:	3b01      	subs	r3, #1
 8003eea:	b29a      	uxth	r2, r3
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	f47f ae94 	bne.w	8003c22 <HAL_I2C_Master_Receive+0x1b6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2220      	movs	r2, #32
 8003efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003f12:	2300      	movs	r3, #0
 8003f14:	e000      	b.n	8003f18 <HAL_I2C_Master_Receive+0x4ac>
  }
  else
  {
    return HAL_BUSY;
 8003f16:	2302      	movs	r3, #2
  }
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3728      	adds	r7, #40	; 0x28
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	00010004 	.word	0x00010004
 8003f24:	2000001c 	.word	0x2000001c
 8003f28:	14f8b589 	.word	0x14f8b589

08003f2c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b08a      	sub	sp, #40	; 0x28
 8003f30:	af02      	add	r7, sp, #8
 8003f32:	60f8      	str	r0, [r7, #12]
 8003f34:	607a      	str	r2, [r7, #4]
 8003f36:	603b      	str	r3, [r7, #0]
 8003f38:	460b      	mov	r3, r1
 8003f3a:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003f3c:	f7fe ffe2 	bl	8002f04 <HAL_GetTick>
 8003f40:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 1U;
 8003f42:	2301      	movs	r3, #1
 8003f44:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	2b20      	cmp	r3, #32
 8003f50:	f040 8111 	bne.w	8004176 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	9300      	str	r3, [sp, #0]
 8003f58:	2319      	movs	r3, #25
 8003f5a:	2201      	movs	r2, #1
 8003f5c:	4988      	ldr	r1, [pc, #544]	; (8004180 <HAL_I2C_IsDeviceReady+0x254>)
 8003f5e:	68f8      	ldr	r0, [r7, #12]
 8003f60:	f000 fa62 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8003f64:	4603      	mov	r3, r0
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d001      	beq.n	8003f6e <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003f6a:	2302      	movs	r3, #2
 8003f6c:	e104      	b.n	8004178 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d101      	bne.n	8003f7c <HAL_I2C_IsDeviceReady+0x50>
 8003f78:	2302      	movs	r3, #2
 8003f7a:	e0fd      	b.n	8004178 <HAL_I2C_IsDeviceReady+0x24c>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2201      	movs	r2, #1
 8003f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0301 	and.w	r3, r3, #1
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d007      	beq.n	8003fa2 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681a      	ldr	r2, [r3, #0]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f042 0201 	orr.w	r2, r2, #1
 8003fa0:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003fb0:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2224      	movs	r2, #36	; 0x24
 8003fb6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4a70      	ldr	r2, [pc, #448]	; (8004184 <HAL_I2C_IsDeviceReady+0x258>)
 8003fc4:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	681a      	ldr	r2, [r3, #0]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003fd4:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003fd6:	69fb      	ldr	r3, [r7, #28]
 8003fd8:	9300      	str	r3, [sp, #0]
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003fe2:	68f8      	ldr	r0, [r7, #12]
 8003fe4:	f000 fa20 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00d      	beq.n	800400a <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ff8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003ffc:	d103      	bne.n	8004006 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004004:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8004006:	2303      	movs	r3, #3
 8004008:	e0b6      	b.n	8004178 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800400a:	897b      	ldrh	r3, [r7, #10]
 800400c:	b2db      	uxtb	r3, r3
 800400e:	461a      	mov	r2, r3
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004018:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800401a:	f7fe ff73 	bl	8002f04 <HAL_GetTick>
 800401e:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	695b      	ldr	r3, [r3, #20]
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b02      	cmp	r3, #2
 800402c:	bf0c      	ite	eq
 800402e:	2301      	moveq	r3, #1
 8004030:	2300      	movne	r3, #0
 8004032:	b2db      	uxtb	r3, r3
 8004034:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004040:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004044:	bf0c      	ite	eq
 8004046:	2301      	moveq	r3, #1
 8004048:	2300      	movne	r3, #0
 800404a:	b2db      	uxtb	r3, r3
 800404c:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800404e:	e025      	b.n	800409c <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004050:	f7fe ff58 	bl	8002f04 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	69fb      	ldr	r3, [r7, #28]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	683a      	ldr	r2, [r7, #0]
 800405c:	429a      	cmp	r2, r3
 800405e:	d302      	bcc.n	8004066 <HAL_I2C_IsDeviceReady+0x13a>
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	2b00      	cmp	r3, #0
 8004064:	d103      	bne.n	800406e <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	22a0      	movs	r2, #160	; 0xa0
 800406a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	695b      	ldr	r3, [r3, #20]
 8004074:	f003 0302 	and.w	r3, r3, #2
 8004078:	2b02      	cmp	r3, #2
 800407a:	bf0c      	ite	eq
 800407c:	2301      	moveq	r3, #1
 800407e:	2300      	movne	r3, #0
 8004080:	b2db      	uxtb	r3, r3
 8004082:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	695b      	ldr	r3, [r3, #20]
 800408a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004092:	bf0c      	ite	eq
 8004094:	2301      	moveq	r3, #1
 8004096:	2300      	movne	r3, #0
 8004098:	b2db      	uxtb	r3, r3
 800409a:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2ba0      	cmp	r3, #160	; 0xa0
 80040a6:	d005      	beq.n	80040b4 <HAL_I2C_IsDeviceReady+0x188>
 80040a8:	7dfb      	ldrb	r3, [r7, #23]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d102      	bne.n	80040b4 <HAL_I2C_IsDeviceReady+0x188>
 80040ae:	7dbb      	ldrb	r3, [r7, #22]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d0cd      	beq.n	8004050 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2220      	movs	r2, #32
 80040b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	695b      	ldr	r3, [r3, #20]
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b02      	cmp	r3, #2
 80040c8:	d129      	bne.n	800411e <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681a      	ldr	r2, [r3, #0]
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80040d8:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040da:	2300      	movs	r3, #0
 80040dc:	613b      	str	r3, [r7, #16]
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	695b      	ldr	r3, [r3, #20]
 80040e4:	613b      	str	r3, [r7, #16]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	699b      	ldr	r3, [r3, #24]
 80040ec:	613b      	str	r3, [r7, #16]
 80040ee:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040f0:	69fb      	ldr	r3, [r7, #28]
 80040f2:	9300      	str	r3, [sp, #0]
 80040f4:	2319      	movs	r3, #25
 80040f6:	2201      	movs	r2, #1
 80040f8:	4921      	ldr	r1, [pc, #132]	; (8004180 <HAL_I2C_IsDeviceReady+0x254>)
 80040fa:	68f8      	ldr	r0, [r7, #12]
 80040fc:	f000 f994 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8004100:	4603      	mov	r3, r0
 8004102:	2b00      	cmp	r3, #0
 8004104:	d001      	beq.n	800410a <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e036      	b.n	8004178 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2220      	movs	r2, #32
 800410e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	2200      	movs	r2, #0
 8004116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 800411a:	2300      	movs	r3, #0
 800411c:	e02c      	b.n	8004178 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800412c:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004136:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004138:	69fb      	ldr	r3, [r7, #28]
 800413a:	9300      	str	r3, [sp, #0]
 800413c:	2319      	movs	r3, #25
 800413e:	2201      	movs	r2, #1
 8004140:	490f      	ldr	r1, [pc, #60]	; (8004180 <HAL_I2C_IsDeviceReady+0x254>)
 8004142:	68f8      	ldr	r0, [r7, #12]
 8004144:	f000 f970 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8004148:	4603      	mov	r3, r0
 800414a:	2b00      	cmp	r3, #0
 800414c:	d001      	beq.n	8004152 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	e012      	b.n	8004178 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8004152:	69bb      	ldr	r3, [r7, #24]
 8004154:	3301      	adds	r3, #1
 8004156:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8004158:	69ba      	ldr	r2, [r7, #24]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	429a      	cmp	r2, r3
 800415e:	f4ff af32 	bcc.w	8003fc6 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2200      	movs	r2, #0
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e000      	b.n	8004178 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8004176:	2302      	movs	r3, #2
  }
}
 8004178:	4618      	mov	r0, r3
 800417a:	3720      	adds	r7, #32
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}
 8004180:	00100002 	.word	0x00100002
 8004184:	ffff0000 	.word	0xffff0000

08004188 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b088      	sub	sp, #32
 800418c:	af02      	add	r7, sp, #8
 800418e:	60f8      	str	r0, [r7, #12]
 8004190:	607a      	str	r2, [r7, #4]
 8004192:	603b      	str	r3, [r7, #0]
 8004194:	460b      	mov	r3, r1
 8004196:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419c:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b08      	cmp	r3, #8
 80041a2:	d006      	beq.n	80041b2 <I2C_MasterRequestWrite+0x2a>
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2b01      	cmp	r3, #1
 80041a8:	d003      	beq.n	80041b2 <I2C_MasterRequestWrite+0x2a>
 80041aa:	697b      	ldr	r3, [r7, #20]
 80041ac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80041b0:	d108      	bne.n	80041c4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	681a      	ldr	r2, [r3, #0]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041c0:	601a      	str	r2, [r3, #0]
 80041c2:	e00b      	b.n	80041dc <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041c8:	2b12      	cmp	r3, #18
 80041ca:	d107      	bne.n	80041dc <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80041da:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041dc:	683b      	ldr	r3, [r7, #0]
 80041de:	9300      	str	r3, [sp, #0]
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80041e8:	68f8      	ldr	r0, [r7, #12]
 80041ea:	f000 f91d 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 80041ee:	4603      	mov	r3, r0
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00d      	beq.n	8004210 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004202:	d103      	bne.n	800420c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	f44f 7200 	mov.w	r2, #512	; 0x200
 800420a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800420c:	2303      	movs	r3, #3
 800420e:	e035      	b.n	800427c <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	691b      	ldr	r3, [r3, #16]
 8004214:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004218:	d108      	bne.n	800422c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800421a:	897b      	ldrh	r3, [r7, #10]
 800421c:	b2db      	uxtb	r3, r3
 800421e:	461a      	mov	r2, r3
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004228:	611a      	str	r2, [r3, #16]
 800422a:	e01b      	b.n	8004264 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800422c:	897b      	ldrh	r3, [r7, #10]
 800422e:	11db      	asrs	r3, r3, #7
 8004230:	b2db      	uxtb	r3, r3
 8004232:	f003 0306 	and.w	r3, r3, #6
 8004236:	b2db      	uxtb	r3, r3
 8004238:	f063 030f 	orn	r3, r3, #15
 800423c:	b2da      	uxtb	r2, r3
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	490e      	ldr	r1, [pc, #56]	; (8004284 <I2C_MasterRequestWrite+0xfc>)
 800424a:	68f8      	ldr	r0, [r7, #12]
 800424c:	f000 f943 	bl	80044d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004250:	4603      	mov	r3, r0
 8004252:	2b00      	cmp	r3, #0
 8004254:	d001      	beq.n	800425a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e010      	b.n	800427c <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800425a:	897b      	ldrh	r3, [r7, #10]
 800425c:	b2da      	uxtb	r2, r3
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	687a      	ldr	r2, [r7, #4]
 8004268:	4907      	ldr	r1, [pc, #28]	; (8004288 <I2C_MasterRequestWrite+0x100>)
 800426a:	68f8      	ldr	r0, [r7, #12]
 800426c:	f000 f933 	bl	80044d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004270:	4603      	mov	r3, r0
 8004272:	2b00      	cmp	r3, #0
 8004274:	d001      	beq.n	800427a <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004276:	2301      	movs	r3, #1
 8004278:	e000      	b.n	800427c <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3718      	adds	r7, #24
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}
 8004284:	00010008 	.word	0x00010008
 8004288:	00010002 	.word	0x00010002

0800428c <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af02      	add	r7, sp, #8
 8004292:	60f8      	str	r0, [r7, #12]
 8004294:	607a      	str	r2, [r7, #4]
 8004296:	603b      	str	r3, [r7, #0]
 8004298:	460b      	mov	r3, r1
 800429a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042a0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042b0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80042b2:	697b      	ldr	r3, [r7, #20]
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d006      	beq.n	80042c6 <I2C_MasterRequestRead+0x3a>
 80042b8:	697b      	ldr	r3, [r7, #20]
 80042ba:	2b01      	cmp	r3, #1
 80042bc:	d003      	beq.n	80042c6 <I2C_MasterRequestRead+0x3a>
 80042be:	697b      	ldr	r3, [r7, #20]
 80042c0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042c4:	d108      	bne.n	80042d8 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042d4:	601a      	str	r2, [r3, #0]
 80042d6:	e00b      	b.n	80042f0 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042dc:	2b11      	cmp	r3, #17
 80042de:	d107      	bne.n	80042f0 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	681a      	ldr	r2, [r3, #0]
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80042ee:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042f0:	683b      	ldr	r3, [r7, #0]
 80042f2:	9300      	str	r3, [sp, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80042fc:	68f8      	ldr	r0, [r7, #12]
 80042fe:	f000 f893 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 8004302:	4603      	mov	r3, r0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d00d      	beq.n	8004324 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004312:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004316:	d103      	bne.n	8004320 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800431e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004320:	2303      	movs	r3, #3
 8004322:	e079      	b.n	8004418 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	691b      	ldr	r3, [r3, #16]
 8004328:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800432c:	d108      	bne.n	8004340 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800432e:	897b      	ldrh	r3, [r7, #10]
 8004330:	b2db      	uxtb	r3, r3
 8004332:	f043 0301 	orr.w	r3, r3, #1
 8004336:	b2da      	uxtb	r2, r3
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	611a      	str	r2, [r3, #16]
 800433e:	e05f      	b.n	8004400 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004340:	897b      	ldrh	r3, [r7, #10]
 8004342:	11db      	asrs	r3, r3, #7
 8004344:	b2db      	uxtb	r3, r3
 8004346:	f003 0306 	and.w	r3, r3, #6
 800434a:	b2db      	uxtb	r3, r3
 800434c:	f063 030f 	orn	r3, r3, #15
 8004350:	b2da      	uxtb	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004358:	683b      	ldr	r3, [r7, #0]
 800435a:	687a      	ldr	r2, [r7, #4]
 800435c:	4930      	ldr	r1, [pc, #192]	; (8004420 <I2C_MasterRequestRead+0x194>)
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 f8b9 	bl	80044d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004364:	4603      	mov	r3, r0
 8004366:	2b00      	cmp	r3, #0
 8004368:	d001      	beq.n	800436e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e054      	b.n	8004418 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800436e:	897b      	ldrh	r3, [r7, #10]
 8004370:	b2da      	uxtb	r2, r3
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	687a      	ldr	r2, [r7, #4]
 800437c:	4929      	ldr	r1, [pc, #164]	; (8004424 <I2C_MasterRequestRead+0x198>)
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f8a9 	bl	80044d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e044      	b.n	8004418 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438e:	2300      	movs	r3, #0
 8004390:	613b      	str	r3, [r7, #16]
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	695b      	ldr	r3, [r3, #20]
 8004398:	613b      	str	r3, [r7, #16]
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	699b      	ldr	r3, [r3, #24]
 80043a0:	613b      	str	r3, [r7, #16]
 80043a2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80043b2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043b4:	683b      	ldr	r3, [r7, #0]
 80043b6:	9300      	str	r3, [sp, #0]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80043c0:	68f8      	ldr	r0, [r7, #12]
 80043c2:	f000 f831 	bl	8004428 <I2C_WaitOnFlagUntilTimeout>
 80043c6:	4603      	mov	r3, r0
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d00d      	beq.n	80043e8 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80043da:	d103      	bne.n	80043e4 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043e2:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e017      	b.n	8004418 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80043e8:	897b      	ldrh	r3, [r7, #10]
 80043ea:	11db      	asrs	r3, r3, #7
 80043ec:	b2db      	uxtb	r3, r3
 80043ee:	f003 0306 	and.w	r3, r3, #6
 80043f2:	b2db      	uxtb	r3, r3
 80043f4:	f063 030e 	orn	r3, r3, #14
 80043f8:	b2da      	uxtb	r2, r3
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	687a      	ldr	r2, [r7, #4]
 8004404:	4907      	ldr	r1, [pc, #28]	; (8004424 <I2C_MasterRequestRead+0x198>)
 8004406:	68f8      	ldr	r0, [r7, #12]
 8004408:	f000 f865 	bl	80044d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d001      	beq.n	8004416 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	e000      	b.n	8004418 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004416:	2300      	movs	r3, #0
}
 8004418:	4618      	mov	r0, r3
 800441a:	3718      	adds	r7, #24
 800441c:	46bd      	mov	sp, r7
 800441e:	bd80      	pop	{r7, pc}
 8004420:	00010008 	.word	0x00010008
 8004424:	00010002 	.word	0x00010002

08004428 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	b084      	sub	sp, #16
 800442c:	af00      	add	r7, sp, #0
 800442e:	60f8      	str	r0, [r7, #12]
 8004430:	60b9      	str	r1, [r7, #8]
 8004432:	603b      	str	r3, [r7, #0]
 8004434:	4613      	mov	r3, r2
 8004436:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004438:	e025      	b.n	8004486 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004440:	d021      	beq.n	8004486 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004442:	f7fe fd5f 	bl	8002f04 <HAL_GetTick>
 8004446:	4602      	mov	r2, r0
 8004448:	69bb      	ldr	r3, [r7, #24]
 800444a:	1ad3      	subs	r3, r2, r3
 800444c:	683a      	ldr	r2, [r7, #0]
 800444e:	429a      	cmp	r2, r3
 8004450:	d302      	bcc.n	8004458 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	2b00      	cmp	r3, #0
 8004456:	d116      	bne.n	8004486 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2200      	movs	r2, #0
 800445c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	2220      	movs	r2, #32
 8004462:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2200      	movs	r2, #0
 800446a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004472:	f043 0220 	orr.w	r2, r3, #32
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	2200      	movs	r2, #0
 800447e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004482:	2301      	movs	r3, #1
 8004484:	e023      	b.n	80044ce <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004486:	68bb      	ldr	r3, [r7, #8]
 8004488:	0c1b      	lsrs	r3, r3, #16
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	d10d      	bne.n	80044ac <I2C_WaitOnFlagUntilTimeout+0x84>
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	695b      	ldr	r3, [r3, #20]
 8004496:	43da      	mvns	r2, r3
 8004498:	68bb      	ldr	r3, [r7, #8]
 800449a:	4013      	ands	r3, r2
 800449c:	b29b      	uxth	r3, r3
 800449e:	2b00      	cmp	r3, #0
 80044a0:	bf0c      	ite	eq
 80044a2:	2301      	moveq	r3, #1
 80044a4:	2300      	movne	r3, #0
 80044a6:	b2db      	uxtb	r3, r3
 80044a8:	461a      	mov	r2, r3
 80044aa:	e00c      	b.n	80044c6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	699b      	ldr	r3, [r3, #24]
 80044b2:	43da      	mvns	r2, r3
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	4013      	ands	r3, r2
 80044b8:	b29b      	uxth	r3, r3
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	bf0c      	ite	eq
 80044be:	2301      	moveq	r3, #1
 80044c0:	2300      	movne	r3, #0
 80044c2:	b2db      	uxtb	r3, r3
 80044c4:	461a      	mov	r2, r3
 80044c6:	79fb      	ldrb	r3, [r7, #7]
 80044c8:	429a      	cmp	r2, r3
 80044ca:	d0b6      	beq.n	800443a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80044cc:	2300      	movs	r3, #0
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3710      	adds	r7, #16
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b084      	sub	sp, #16
 80044da:	af00      	add	r7, sp, #0
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	607a      	str	r2, [r7, #4]
 80044e2:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80044e4:	e051      	b.n	800458a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	695b      	ldr	r3, [r3, #20]
 80044ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80044f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044f4:	d123      	bne.n	800453e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	681a      	ldr	r2, [r3, #0]
 80044fc:	68fb      	ldr	r3, [r7, #12]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004504:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800450e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2200      	movs	r2, #0
 8004514:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	2220      	movs	r2, #32
 800451a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2200      	movs	r2, #0
 8004522:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800452a:	f043 0204 	orr.w	r2, r3, #4
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	2200      	movs	r2, #0
 8004536:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e046      	b.n	80045cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004544:	d021      	beq.n	800458a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004546:	f7fe fcdd 	bl	8002f04 <HAL_GetTick>
 800454a:	4602      	mov	r2, r0
 800454c:	683b      	ldr	r3, [r7, #0]
 800454e:	1ad3      	subs	r3, r2, r3
 8004550:	687a      	ldr	r2, [r7, #4]
 8004552:	429a      	cmp	r2, r3
 8004554:	d302      	bcc.n	800455c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d116      	bne.n	800458a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	2200      	movs	r2, #0
 8004560:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	2220      	movs	r2, #32
 8004566:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2200      	movs	r2, #0
 800456e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004576:	f043 0220 	orr.w	r2, r3, #32
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	2200      	movs	r2, #0
 8004582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e020      	b.n	80045cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800458a:	68bb      	ldr	r3, [r7, #8]
 800458c:	0c1b      	lsrs	r3, r3, #16
 800458e:	b2db      	uxtb	r3, r3
 8004590:	2b01      	cmp	r3, #1
 8004592:	d10c      	bne.n	80045ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	695b      	ldr	r3, [r3, #20]
 800459a:	43da      	mvns	r2, r3
 800459c:	68bb      	ldr	r3, [r7, #8]
 800459e:	4013      	ands	r3, r2
 80045a0:	b29b      	uxth	r3, r3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	bf14      	ite	ne
 80045a6:	2301      	movne	r3, #1
 80045a8:	2300      	moveq	r3, #0
 80045aa:	b2db      	uxtb	r3, r3
 80045ac:	e00b      	b.n	80045c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	699b      	ldr	r3, [r3, #24]
 80045b4:	43da      	mvns	r2, r3
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	4013      	ands	r3, r2
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	2b00      	cmp	r3, #0
 80045be:	bf14      	ite	ne
 80045c0:	2301      	movne	r3, #1
 80045c2:	2300      	moveq	r3, #0
 80045c4:	b2db      	uxtb	r3, r3
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d18d      	bne.n	80044e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80045ca:	2300      	movs	r3, #0
}
 80045cc:	4618      	mov	r0, r3
 80045ce:	3710      	adds	r7, #16
 80045d0:	46bd      	mov	sp, r7
 80045d2:	bd80      	pop	{r7, pc}

080045d4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80045d4:	b580      	push	{r7, lr}
 80045d6:	b084      	sub	sp, #16
 80045d8:	af00      	add	r7, sp, #0
 80045da:	60f8      	str	r0, [r7, #12]
 80045dc:	60b9      	str	r1, [r7, #8]
 80045de:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80045e0:	e02d      	b.n	800463e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80045e2:	68f8      	ldr	r0, [r7, #12]
 80045e4:	f000 f8ce 	bl	8004784 <I2C_IsAcknowledgeFailed>
 80045e8:	4603      	mov	r3, r0
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e02d      	b.n	800464e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045f8:	d021      	beq.n	800463e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045fa:	f7fe fc83 	bl	8002f04 <HAL_GetTick>
 80045fe:	4602      	mov	r2, r0
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	1ad3      	subs	r3, r2, r3
 8004604:	68ba      	ldr	r2, [r7, #8]
 8004606:	429a      	cmp	r2, r3
 8004608:	d302      	bcc.n	8004610 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800460a:	68bb      	ldr	r3, [r7, #8]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d116      	bne.n	800463e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	2200      	movs	r2, #0
 8004614:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	2220      	movs	r2, #32
 800461a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	2200      	movs	r2, #0
 8004622:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800462a:	f043 0220 	orr.w	r2, r3, #32
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2200      	movs	r2, #0
 8004636:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800463a:	2301      	movs	r3, #1
 800463c:	e007      	b.n	800464e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	695b      	ldr	r3, [r3, #20]
 8004644:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004648:	2b80      	cmp	r3, #128	; 0x80
 800464a:	d1ca      	bne.n	80045e2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800464c:	2300      	movs	r3, #0
}
 800464e:	4618      	mov	r0, r3
 8004650:	3710      	adds	r7, #16
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}

08004656 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004656:	b580      	push	{r7, lr}
 8004658:	b084      	sub	sp, #16
 800465a:	af00      	add	r7, sp, #0
 800465c:	60f8      	str	r0, [r7, #12]
 800465e:	60b9      	str	r1, [r7, #8]
 8004660:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004662:	e02d      	b.n	80046c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f000 f88d 	bl	8004784 <I2C_IsAcknowledgeFailed>
 800466a:	4603      	mov	r3, r0
 800466c:	2b00      	cmp	r3, #0
 800466e:	d001      	beq.n	8004674 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004670:	2301      	movs	r3, #1
 8004672:	e02d      	b.n	80046d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004674:	68bb      	ldr	r3, [r7, #8]
 8004676:	f1b3 3fff 	cmp.w	r3, #4294967295
 800467a:	d021      	beq.n	80046c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800467c:	f7fe fc42 	bl	8002f04 <HAL_GetTick>
 8004680:	4602      	mov	r2, r0
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	1ad3      	subs	r3, r2, r3
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	429a      	cmp	r2, r3
 800468a:	d302      	bcc.n	8004692 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	2b00      	cmp	r3, #0
 8004690:	d116      	bne.n	80046c0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	2200      	movs	r2, #0
 8004696:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2220      	movs	r2, #32
 800469c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	2200      	movs	r2, #0
 80046a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046ac:	f043 0220 	orr.w	r2, r3, #32
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80046b4:	68fb      	ldr	r3, [r7, #12]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80046bc:	2301      	movs	r3, #1
 80046be:	e007      	b.n	80046d0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d1ca      	bne.n	8004664 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80046ce:	2300      	movs	r3, #0
}
 80046d0:	4618      	mov	r0, r3
 80046d2:	3710      	adds	r7, #16
 80046d4:	46bd      	mov	sp, r7
 80046d6:	bd80      	pop	{r7, pc}

080046d8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80046d8:	b580      	push	{r7, lr}
 80046da:	b084      	sub	sp, #16
 80046dc:	af00      	add	r7, sp, #0
 80046de:	60f8      	str	r0, [r7, #12]
 80046e0:	60b9      	str	r1, [r7, #8]
 80046e2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80046e4:	e042      	b.n	800476c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	695b      	ldr	r3, [r3, #20]
 80046ec:	f003 0310 	and.w	r3, r3, #16
 80046f0:	2b10      	cmp	r3, #16
 80046f2:	d119      	bne.n	8004728 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f06f 0210 	mvn.w	r2, #16
 80046fc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	2200      	movs	r2, #0
 8004702:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	2220      	movs	r2, #32
 8004708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	2200      	movs	r2, #0
 8004710:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e029      	b.n	800477c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004728:	f7fe fbec 	bl	8002f04 <HAL_GetTick>
 800472c:	4602      	mov	r2, r0
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	1ad3      	subs	r3, r2, r3
 8004732:	68ba      	ldr	r2, [r7, #8]
 8004734:	429a      	cmp	r2, r3
 8004736:	d302      	bcc.n	800473e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d116      	bne.n	800476c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	2200      	movs	r2, #0
 8004742:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	2220      	movs	r2, #32
 8004748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	2200      	movs	r2, #0
 8004750:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004758:	f043 0220 	orr.w	r2, r3, #32
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	2200      	movs	r2, #0
 8004764:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004768:	2301      	movs	r3, #1
 800476a:	e007      	b.n	800477c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004776:	2b40      	cmp	r3, #64	; 0x40
 8004778:	d1b5      	bne.n	80046e6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800477a:	2300      	movs	r3, #0
}
 800477c:	4618      	mov	r0, r3
 800477e:	3710      	adds	r7, #16
 8004780:	46bd      	mov	sp, r7
 8004782:	bd80      	pop	{r7, pc}

08004784 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004796:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800479a:	d11b      	bne.n	80047d4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80047a4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2220      	movs	r2, #32
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	2200      	movs	r2, #0
 80047b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047c0:	f043 0204 	orr.w	r2, r3, #4
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80047d0:	2301      	movs	r3, #1
 80047d2:	e000      	b.n	80047d6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	bc80      	pop	{r7}
 80047de:	4770      	bx	lr

080047e0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80047e0:	b580      	push	{r7, lr}
 80047e2:	b086      	sub	sp, #24
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d101      	bne.n	80047f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e272      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	f003 0301 	and.w	r3, r3, #1
 80047fa:	2b00      	cmp	r3, #0
 80047fc:	f000 8087 	beq.w	800490e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004800:	4b92      	ldr	r3, [pc, #584]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004802:	685b      	ldr	r3, [r3, #4]
 8004804:	f003 030c 	and.w	r3, r3, #12
 8004808:	2b04      	cmp	r3, #4
 800480a:	d00c      	beq.n	8004826 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800480c:	4b8f      	ldr	r3, [pc, #572]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 030c 	and.w	r3, r3, #12
 8004814:	2b08      	cmp	r3, #8
 8004816:	d112      	bne.n	800483e <HAL_RCC_OscConfig+0x5e>
 8004818:	4b8c      	ldr	r3, [pc, #560]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004820:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004824:	d10b      	bne.n	800483e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004826:	4b89      	ldr	r3, [pc, #548]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d06c      	beq.n	800490c <HAL_RCC_OscConfig+0x12c>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d168      	bne.n	800490c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e24c      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004846:	d106      	bne.n	8004856 <HAL_RCC_OscConfig+0x76>
 8004848:	4b80      	ldr	r3, [pc, #512]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	4a7f      	ldr	r2, [pc, #508]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 800484e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004852:	6013      	str	r3, [r2, #0]
 8004854:	e02e      	b.n	80048b4 <HAL_RCC_OscConfig+0xd4>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	685b      	ldr	r3, [r3, #4]
 800485a:	2b00      	cmp	r3, #0
 800485c:	d10c      	bne.n	8004878 <HAL_RCC_OscConfig+0x98>
 800485e:	4b7b      	ldr	r3, [pc, #492]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	4a7a      	ldr	r2, [pc, #488]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004864:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004868:	6013      	str	r3, [r2, #0]
 800486a:	4b78      	ldr	r3, [pc, #480]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	4a77      	ldr	r2, [pc, #476]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004870:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004874:	6013      	str	r3, [r2, #0]
 8004876:	e01d      	b.n	80048b4 <HAL_RCC_OscConfig+0xd4>
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	685b      	ldr	r3, [r3, #4]
 800487c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004880:	d10c      	bne.n	800489c <HAL_RCC_OscConfig+0xbc>
 8004882:	4b72      	ldr	r3, [pc, #456]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	4a71      	ldr	r2, [pc, #452]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004888:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800488c:	6013      	str	r3, [r2, #0]
 800488e:	4b6f      	ldr	r3, [pc, #444]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	4a6e      	ldr	r2, [pc, #440]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004894:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004898:	6013      	str	r3, [r2, #0]
 800489a:	e00b      	b.n	80048b4 <HAL_RCC_OscConfig+0xd4>
 800489c:	4b6b      	ldr	r3, [pc, #428]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	4a6a      	ldr	r2, [pc, #424]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 80048a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048a6:	6013      	str	r3, [r2, #0]
 80048a8:	4b68      	ldr	r3, [pc, #416]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	4a67      	ldr	r2, [pc, #412]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 80048ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80048b2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d013      	beq.n	80048e4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048bc:	f7fe fb22 	bl	8002f04 <HAL_GetTick>
 80048c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048c2:	e008      	b.n	80048d6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048c4:	f7fe fb1e 	bl	8002f04 <HAL_GetTick>
 80048c8:	4602      	mov	r2, r0
 80048ca:	693b      	ldr	r3, [r7, #16]
 80048cc:	1ad3      	subs	r3, r2, r3
 80048ce:	2b64      	cmp	r3, #100	; 0x64
 80048d0:	d901      	bls.n	80048d6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80048d2:	2303      	movs	r3, #3
 80048d4:	e200      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048d6:	4b5d      	ldr	r3, [pc, #372]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d0f0      	beq.n	80048c4 <HAL_RCC_OscConfig+0xe4>
 80048e2:	e014      	b.n	800490e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048e4:	f7fe fb0e 	bl	8002f04 <HAL_GetTick>
 80048e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048ea:	e008      	b.n	80048fe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80048ec:	f7fe fb0a 	bl	8002f04 <HAL_GetTick>
 80048f0:	4602      	mov	r2, r0
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	1ad3      	subs	r3, r2, r3
 80048f6:	2b64      	cmp	r3, #100	; 0x64
 80048f8:	d901      	bls.n	80048fe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80048fa:	2303      	movs	r3, #3
 80048fc:	e1ec      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80048fe:	4b53      	ldr	r3, [pc, #332]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004906:	2b00      	cmp	r3, #0
 8004908:	d1f0      	bne.n	80048ec <HAL_RCC_OscConfig+0x10c>
 800490a:	e000      	b.n	800490e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800490c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	f003 0302 	and.w	r3, r3, #2
 8004916:	2b00      	cmp	r3, #0
 8004918:	d063      	beq.n	80049e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800491a:	4b4c      	ldr	r3, [pc, #304]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 800491c:	685b      	ldr	r3, [r3, #4]
 800491e:	f003 030c 	and.w	r3, r3, #12
 8004922:	2b00      	cmp	r3, #0
 8004924:	d00b      	beq.n	800493e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004926:	4b49      	ldr	r3, [pc, #292]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004928:	685b      	ldr	r3, [r3, #4]
 800492a:	f003 030c 	and.w	r3, r3, #12
 800492e:	2b08      	cmp	r3, #8
 8004930:	d11c      	bne.n	800496c <HAL_RCC_OscConfig+0x18c>
 8004932:	4b46      	ldr	r3, [pc, #280]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800493a:	2b00      	cmp	r3, #0
 800493c:	d116      	bne.n	800496c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800493e:	4b43      	ldr	r3, [pc, #268]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f003 0302 	and.w	r3, r3, #2
 8004946:	2b00      	cmp	r3, #0
 8004948:	d005      	beq.n	8004956 <HAL_RCC_OscConfig+0x176>
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	691b      	ldr	r3, [r3, #16]
 800494e:	2b01      	cmp	r3, #1
 8004950:	d001      	beq.n	8004956 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e1c0      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004956:	4b3d      	ldr	r3, [pc, #244]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	00db      	lsls	r3, r3, #3
 8004964:	4939      	ldr	r1, [pc, #228]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004966:	4313      	orrs	r3, r2
 8004968:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800496a:	e03a      	b.n	80049e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	691b      	ldr	r3, [r3, #16]
 8004970:	2b00      	cmp	r3, #0
 8004972:	d020      	beq.n	80049b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004974:	4b36      	ldr	r3, [pc, #216]	; (8004a50 <HAL_RCC_OscConfig+0x270>)
 8004976:	2201      	movs	r2, #1
 8004978:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800497a:	f7fe fac3 	bl	8002f04 <HAL_GetTick>
 800497e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004980:	e008      	b.n	8004994 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004982:	f7fe fabf 	bl	8002f04 <HAL_GetTick>
 8004986:	4602      	mov	r2, r0
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	1ad3      	subs	r3, r2, r3
 800498c:	2b02      	cmp	r3, #2
 800498e:	d901      	bls.n	8004994 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8004990:	2303      	movs	r3, #3
 8004992:	e1a1      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004994:	4b2d      	ldr	r3, [pc, #180]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f003 0302 	and.w	r3, r3, #2
 800499c:	2b00      	cmp	r3, #0
 800499e:	d0f0      	beq.n	8004982 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049a0:	4b2a      	ldr	r3, [pc, #168]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	695b      	ldr	r3, [r3, #20]
 80049ac:	00db      	lsls	r3, r3, #3
 80049ae:	4927      	ldr	r1, [pc, #156]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 80049b0:	4313      	orrs	r3, r2
 80049b2:	600b      	str	r3, [r1, #0]
 80049b4:	e015      	b.n	80049e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80049b6:	4b26      	ldr	r3, [pc, #152]	; (8004a50 <HAL_RCC_OscConfig+0x270>)
 80049b8:	2200      	movs	r2, #0
 80049ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049bc:	f7fe faa2 	bl	8002f04 <HAL_GetTick>
 80049c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049c2:	e008      	b.n	80049d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80049c4:	f7fe fa9e 	bl	8002f04 <HAL_GetTick>
 80049c8:	4602      	mov	r2, r0
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	1ad3      	subs	r3, r2, r3
 80049ce:	2b02      	cmp	r3, #2
 80049d0:	d901      	bls.n	80049d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80049d2:	2303      	movs	r3, #3
 80049d4:	e180      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80049d6:	4b1d      	ldr	r3, [pc, #116]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f003 0302 	and.w	r3, r3, #2
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1f0      	bne.n	80049c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f003 0308 	and.w	r3, r3, #8
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d03a      	beq.n	8004a64 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	699b      	ldr	r3, [r3, #24]
 80049f2:	2b00      	cmp	r3, #0
 80049f4:	d019      	beq.n	8004a2a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80049f6:	4b17      	ldr	r3, [pc, #92]	; (8004a54 <HAL_RCC_OscConfig+0x274>)
 80049f8:	2201      	movs	r2, #1
 80049fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80049fc:	f7fe fa82 	bl	8002f04 <HAL_GetTick>
 8004a00:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a02:	e008      	b.n	8004a16 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a04:	f7fe fa7e 	bl	8002f04 <HAL_GetTick>
 8004a08:	4602      	mov	r2, r0
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	1ad3      	subs	r3, r2, r3
 8004a0e:	2b02      	cmp	r3, #2
 8004a10:	d901      	bls.n	8004a16 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8004a12:	2303      	movs	r3, #3
 8004a14:	e160      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004a16:	4b0d      	ldr	r3, [pc, #52]	; (8004a4c <HAL_RCC_OscConfig+0x26c>)
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	f003 0302 	and.w	r3, r3, #2
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d0f0      	beq.n	8004a04 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8004a22:	2001      	movs	r0, #1
 8004a24:	f000 fb08 	bl	8005038 <RCC_Delay>
 8004a28:	e01c      	b.n	8004a64 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004a2a:	4b0a      	ldr	r3, [pc, #40]	; (8004a54 <HAL_RCC_OscConfig+0x274>)
 8004a2c:	2200      	movs	r2, #0
 8004a2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004a30:	f7fe fa68 	bl	8002f04 <HAL_GetTick>
 8004a34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a36:	e00f      	b.n	8004a58 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004a38:	f7fe fa64 	bl	8002f04 <HAL_GetTick>
 8004a3c:	4602      	mov	r2, r0
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	1ad3      	subs	r3, r2, r3
 8004a42:	2b02      	cmp	r3, #2
 8004a44:	d908      	bls.n	8004a58 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e146      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4f8>
 8004a4a:	bf00      	nop
 8004a4c:	40021000 	.word	0x40021000
 8004a50:	42420000 	.word	0x42420000
 8004a54:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004a58:	4b92      	ldr	r3, [pc, #584]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004a5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5c:	f003 0302 	and.w	r3, r3, #2
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1e9      	bne.n	8004a38 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	f003 0304 	and.w	r3, r3, #4
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f000 80a6 	beq.w	8004bbe <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004a72:	2300      	movs	r3, #0
 8004a74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004a76:	4b8b      	ldr	r3, [pc, #556]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004a78:	69db      	ldr	r3, [r3, #28]
 8004a7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d10d      	bne.n	8004a9e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004a82:	4b88      	ldr	r3, [pc, #544]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004a84:	69db      	ldr	r3, [r3, #28]
 8004a86:	4a87      	ldr	r2, [pc, #540]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a8c:	61d3      	str	r3, [r2, #28]
 8004a8e:	4b85      	ldr	r3, [pc, #532]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004a90:	69db      	ldr	r3, [r3, #28]
 8004a92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a96:	60bb      	str	r3, [r7, #8]
 8004a98:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a9e:	4b82      	ldr	r3, [pc, #520]	; (8004ca8 <HAL_RCC_OscConfig+0x4c8>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d118      	bne.n	8004adc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004aaa:	4b7f      	ldr	r3, [pc, #508]	; (8004ca8 <HAL_RCC_OscConfig+0x4c8>)
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	4a7e      	ldr	r2, [pc, #504]	; (8004ca8 <HAL_RCC_OscConfig+0x4c8>)
 8004ab0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ab4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004ab6:	f7fe fa25 	bl	8002f04 <HAL_GetTick>
 8004aba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004abc:	e008      	b.n	8004ad0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004abe:	f7fe fa21 	bl	8002f04 <HAL_GetTick>
 8004ac2:	4602      	mov	r2, r0
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	1ad3      	subs	r3, r2, r3
 8004ac8:	2b64      	cmp	r3, #100	; 0x64
 8004aca:	d901      	bls.n	8004ad0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8004acc:	2303      	movs	r3, #3
 8004ace:	e103      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004ad0:	4b75      	ldr	r3, [pc, #468]	; (8004ca8 <HAL_RCC_OscConfig+0x4c8>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d0f0      	beq.n	8004abe <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	68db      	ldr	r3, [r3, #12]
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d106      	bne.n	8004af2 <HAL_RCC_OscConfig+0x312>
 8004ae4:	4b6f      	ldr	r3, [pc, #444]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004ae6:	6a1b      	ldr	r3, [r3, #32]
 8004ae8:	4a6e      	ldr	r2, [pc, #440]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004aea:	f043 0301 	orr.w	r3, r3, #1
 8004aee:	6213      	str	r3, [r2, #32]
 8004af0:	e02d      	b.n	8004b4e <HAL_RCC_OscConfig+0x36e>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d10c      	bne.n	8004b14 <HAL_RCC_OscConfig+0x334>
 8004afa:	4b6a      	ldr	r3, [pc, #424]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004afc:	6a1b      	ldr	r3, [r3, #32]
 8004afe:	4a69      	ldr	r2, [pc, #420]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004b00:	f023 0301 	bic.w	r3, r3, #1
 8004b04:	6213      	str	r3, [r2, #32]
 8004b06:	4b67      	ldr	r3, [pc, #412]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004b08:	6a1b      	ldr	r3, [r3, #32]
 8004b0a:	4a66      	ldr	r2, [pc, #408]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004b0c:	f023 0304 	bic.w	r3, r3, #4
 8004b10:	6213      	str	r3, [r2, #32]
 8004b12:	e01c      	b.n	8004b4e <HAL_RCC_OscConfig+0x36e>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	2b05      	cmp	r3, #5
 8004b1a:	d10c      	bne.n	8004b36 <HAL_RCC_OscConfig+0x356>
 8004b1c:	4b61      	ldr	r3, [pc, #388]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004b1e:	6a1b      	ldr	r3, [r3, #32]
 8004b20:	4a60      	ldr	r2, [pc, #384]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004b22:	f043 0304 	orr.w	r3, r3, #4
 8004b26:	6213      	str	r3, [r2, #32]
 8004b28:	4b5e      	ldr	r3, [pc, #376]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004b2a:	6a1b      	ldr	r3, [r3, #32]
 8004b2c:	4a5d      	ldr	r2, [pc, #372]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004b2e:	f043 0301 	orr.w	r3, r3, #1
 8004b32:	6213      	str	r3, [r2, #32]
 8004b34:	e00b      	b.n	8004b4e <HAL_RCC_OscConfig+0x36e>
 8004b36:	4b5b      	ldr	r3, [pc, #364]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004b38:	6a1b      	ldr	r3, [r3, #32]
 8004b3a:	4a5a      	ldr	r2, [pc, #360]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004b3c:	f023 0301 	bic.w	r3, r3, #1
 8004b40:	6213      	str	r3, [r2, #32]
 8004b42:	4b58      	ldr	r3, [pc, #352]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004b44:	6a1b      	ldr	r3, [r3, #32]
 8004b46:	4a57      	ldr	r2, [pc, #348]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004b48:	f023 0304 	bic.w	r3, r3, #4
 8004b4c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	68db      	ldr	r3, [r3, #12]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d015      	beq.n	8004b82 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b56:	f7fe f9d5 	bl	8002f04 <HAL_GetTick>
 8004b5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b5c:	e00a      	b.n	8004b74 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b5e:	f7fe f9d1 	bl	8002f04 <HAL_GetTick>
 8004b62:	4602      	mov	r2, r0
 8004b64:	693b      	ldr	r3, [r7, #16]
 8004b66:	1ad3      	subs	r3, r2, r3
 8004b68:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b6c:	4293      	cmp	r3, r2
 8004b6e:	d901      	bls.n	8004b74 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8004b70:	2303      	movs	r3, #3
 8004b72:	e0b1      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004b74:	4b4b      	ldr	r3, [pc, #300]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004b76:	6a1b      	ldr	r3, [r3, #32]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d0ee      	beq.n	8004b5e <HAL_RCC_OscConfig+0x37e>
 8004b80:	e014      	b.n	8004bac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004b82:	f7fe f9bf 	bl	8002f04 <HAL_GetTick>
 8004b86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004b88:	e00a      	b.n	8004ba0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004b8a:	f7fe f9bb 	bl	8002f04 <HAL_GetTick>
 8004b8e:	4602      	mov	r2, r0
 8004b90:	693b      	ldr	r3, [r7, #16]
 8004b92:	1ad3      	subs	r3, r2, r3
 8004b94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d901      	bls.n	8004ba0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004b9c:	2303      	movs	r3, #3
 8004b9e:	e09b      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ba0:	4b40      	ldr	r3, [pc, #256]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004ba2:	6a1b      	ldr	r3, [r3, #32]
 8004ba4:	f003 0302 	and.w	r3, r3, #2
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d1ee      	bne.n	8004b8a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004bac:	7dfb      	ldrb	r3, [r7, #23]
 8004bae:	2b01      	cmp	r3, #1
 8004bb0:	d105      	bne.n	8004bbe <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004bb2:	4b3c      	ldr	r3, [pc, #240]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004bb4:	69db      	ldr	r3, [r3, #28]
 8004bb6:	4a3b      	ldr	r2, [pc, #236]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004bb8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004bbc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	69db      	ldr	r3, [r3, #28]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	f000 8087 	beq.w	8004cd6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004bc8:	4b36      	ldr	r3, [pc, #216]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f003 030c 	and.w	r3, r3, #12
 8004bd0:	2b08      	cmp	r3, #8
 8004bd2:	d061      	beq.n	8004c98 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	69db      	ldr	r3, [r3, #28]
 8004bd8:	2b02      	cmp	r3, #2
 8004bda:	d146      	bne.n	8004c6a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004bdc:	4b33      	ldr	r3, [pc, #204]	; (8004cac <HAL_RCC_OscConfig+0x4cc>)
 8004bde:	2200      	movs	r2, #0
 8004be0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004be2:	f7fe f98f 	bl	8002f04 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004bea:	f7fe f98b 	bl	8002f04 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b02      	cmp	r3, #2
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e06d      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004bfc:	4b29      	ldr	r3, [pc, #164]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d1f0      	bne.n	8004bea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	6a1b      	ldr	r3, [r3, #32]
 8004c0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004c10:	d108      	bne.n	8004c24 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004c12:	4b24      	ldr	r3, [pc, #144]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689b      	ldr	r3, [r3, #8]
 8004c1e:	4921      	ldr	r1, [pc, #132]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004c20:	4313      	orrs	r3, r2
 8004c22:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c24:	4b1f      	ldr	r3, [pc, #124]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004c26:	685b      	ldr	r3, [r3, #4]
 8004c28:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	6a19      	ldr	r1, [r3, #32]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c34:	430b      	orrs	r3, r1
 8004c36:	491b      	ldr	r1, [pc, #108]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004c3c:	4b1b      	ldr	r3, [pc, #108]	; (8004cac <HAL_RCC_OscConfig+0x4cc>)
 8004c3e:	2201      	movs	r2, #1
 8004c40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c42:	f7fe f95f 	bl	8002f04 <HAL_GetTick>
 8004c46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c48:	e008      	b.n	8004c5c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c4a:	f7fe f95b 	bl	8002f04 <HAL_GetTick>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	2b02      	cmp	r3, #2
 8004c56:	d901      	bls.n	8004c5c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004c58:	2303      	movs	r3, #3
 8004c5a:	e03d      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004c5c:	4b11      	ldr	r3, [pc, #68]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d0f0      	beq.n	8004c4a <HAL_RCC_OscConfig+0x46a>
 8004c68:	e035      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6a:	4b10      	ldr	r3, [pc, #64]	; (8004cac <HAL_RCC_OscConfig+0x4cc>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c70:	f7fe f948 	bl	8002f04 <HAL_GetTick>
 8004c74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c76:	e008      	b.n	8004c8a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c78:	f7fe f944 	bl	8002f04 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	693b      	ldr	r3, [r7, #16]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d901      	bls.n	8004c8a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e026      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004c8a:	4b06      	ldr	r3, [pc, #24]	; (8004ca4 <HAL_RCC_OscConfig+0x4c4>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1f0      	bne.n	8004c78 <HAL_RCC_OscConfig+0x498>
 8004c96:	e01e      	b.n	8004cd6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	69db      	ldr	r3, [r3, #28]
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d107      	bne.n	8004cb0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004ca0:	2301      	movs	r3, #1
 8004ca2:	e019      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4f8>
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	40007000 	.word	0x40007000
 8004cac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004cb0:	4b0b      	ldr	r3, [pc, #44]	; (8004ce0 <HAL_RCC_OscConfig+0x500>)
 8004cb2:	685b      	ldr	r3, [r3, #4]
 8004cb4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6a1b      	ldr	r3, [r3, #32]
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d106      	bne.n	8004cd2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004cce:	429a      	cmp	r2, r3
 8004cd0:	d001      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004cd2:	2301      	movs	r3, #1
 8004cd4:	e000      	b.n	8004cd8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004cd6:	2300      	movs	r3, #0
}
 8004cd8:	4618      	mov	r0, r3
 8004cda:	3718      	adds	r7, #24
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	bd80      	pop	{r7, pc}
 8004ce0:	40021000 	.word	0x40021000

08004ce4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ce4:	b580      	push	{r7, lr}
 8004ce6:	b084      	sub	sp, #16
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
 8004cec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e0d0      	b.n	8004e9a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004cf8:	4b6a      	ldr	r3, [pc, #424]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	f003 0307 	and.w	r3, r3, #7
 8004d00:	683a      	ldr	r2, [r7, #0]
 8004d02:	429a      	cmp	r2, r3
 8004d04:	d910      	bls.n	8004d28 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004d06:	4b67      	ldr	r3, [pc, #412]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f023 0207 	bic.w	r2, r3, #7
 8004d0e:	4965      	ldr	r1, [pc, #404]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	4313      	orrs	r3, r2
 8004d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004d16:	4b63      	ldr	r3, [pc, #396]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 0307 	and.w	r3, r3, #7
 8004d1e:	683a      	ldr	r2, [r7, #0]
 8004d20:	429a      	cmp	r2, r3
 8004d22:	d001      	beq.n	8004d28 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004d24:	2301      	movs	r3, #1
 8004d26:	e0b8      	b.n	8004e9a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 0302 	and.w	r3, r3, #2
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d020      	beq.n	8004d76 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f003 0304 	and.w	r3, r3, #4
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d005      	beq.n	8004d4c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004d40:	4b59      	ldr	r3, [pc, #356]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d42:	685b      	ldr	r3, [r3, #4]
 8004d44:	4a58      	ldr	r2, [pc, #352]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d46:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004d4a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f003 0308 	and.w	r3, r3, #8
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d005      	beq.n	8004d64 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004d58:	4b53      	ldr	r3, [pc, #332]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	4a52      	ldr	r2, [pc, #328]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d5e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004d62:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004d64:	4b50      	ldr	r3, [pc, #320]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	689b      	ldr	r3, [r3, #8]
 8004d70:	494d      	ldr	r1, [pc, #308]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d72:	4313      	orrs	r3, r2
 8004d74:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f003 0301 	and.w	r3, r3, #1
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d040      	beq.n	8004e04 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	2b01      	cmp	r3, #1
 8004d88:	d107      	bne.n	8004d9a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d8a:	4b47      	ldr	r3, [pc, #284]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	d115      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004d96:	2301      	movs	r3, #1
 8004d98:	e07f      	b.n	8004e9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	2b02      	cmp	r3, #2
 8004da0:	d107      	bne.n	8004db2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004da2:	4b41      	ldr	r3, [pc, #260]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d109      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dae:	2301      	movs	r3, #1
 8004db0:	e073      	b.n	8004e9a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004db2:	4b3d      	ldr	r3, [pc, #244]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	f003 0302 	and.w	r3, r3, #2
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d101      	bne.n	8004dc2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e06b      	b.n	8004e9a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004dc2:	4b39      	ldr	r3, [pc, #228]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004dc4:	685b      	ldr	r3, [r3, #4]
 8004dc6:	f023 0203 	bic.w	r2, r3, #3
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685b      	ldr	r3, [r3, #4]
 8004dce:	4936      	ldr	r1, [pc, #216]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd0:	4313      	orrs	r3, r2
 8004dd2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004dd4:	f7fe f896 	bl	8002f04 <HAL_GetTick>
 8004dd8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004dda:	e00a      	b.n	8004df2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ddc:	f7fe f892 	bl	8002f04 <HAL_GetTick>
 8004de0:	4602      	mov	r2, r0
 8004de2:	68fb      	ldr	r3, [r7, #12]
 8004de4:	1ad3      	subs	r3, r2, r3
 8004de6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004dea:	4293      	cmp	r3, r2
 8004dec:	d901      	bls.n	8004df2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e053      	b.n	8004e9a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004df2:	4b2d      	ldr	r3, [pc, #180]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004df4:	685b      	ldr	r3, [r3, #4]
 8004df6:	f003 020c 	and.w	r2, r3, #12
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	685b      	ldr	r3, [r3, #4]
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d1eb      	bne.n	8004ddc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004e04:	4b27      	ldr	r3, [pc, #156]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0307 	and.w	r3, r3, #7
 8004e0c:	683a      	ldr	r2, [r7, #0]
 8004e0e:	429a      	cmp	r2, r3
 8004e10:	d210      	bcs.n	8004e34 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e12:	4b24      	ldr	r3, [pc, #144]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e14:	681b      	ldr	r3, [r3, #0]
 8004e16:	f023 0207 	bic.w	r2, r3, #7
 8004e1a:	4922      	ldr	r1, [pc, #136]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	4313      	orrs	r3, r2
 8004e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e22:	4b20      	ldr	r3, [pc, #128]	; (8004ea4 <HAL_RCC_ClockConfig+0x1c0>)
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	f003 0307 	and.w	r3, r3, #7
 8004e2a:	683a      	ldr	r2, [r7, #0]
 8004e2c:	429a      	cmp	r2, r3
 8004e2e:	d001      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004e30:	2301      	movs	r3, #1
 8004e32:	e032      	b.n	8004e9a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f003 0304 	and.w	r3, r3, #4
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d008      	beq.n	8004e52 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004e40:	4b19      	ldr	r3, [pc, #100]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	4916      	ldr	r1, [pc, #88]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e4e:	4313      	orrs	r3, r2
 8004e50:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	f003 0308 	and.w	r3, r3, #8
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d009      	beq.n	8004e72 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004e5e:	4b12      	ldr	r3, [pc, #72]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	691b      	ldr	r3, [r3, #16]
 8004e6a:	00db      	lsls	r3, r3, #3
 8004e6c:	490e      	ldr	r1, [pc, #56]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e6e:	4313      	orrs	r3, r2
 8004e70:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004e72:	f000 f821 	bl	8004eb8 <HAL_RCC_GetSysClockFreq>
 8004e76:	4602      	mov	r2, r0
 8004e78:	4b0b      	ldr	r3, [pc, #44]	; (8004ea8 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	091b      	lsrs	r3, r3, #4
 8004e7e:	f003 030f 	and.w	r3, r3, #15
 8004e82:	490a      	ldr	r1, [pc, #40]	; (8004eac <HAL_RCC_ClockConfig+0x1c8>)
 8004e84:	5ccb      	ldrb	r3, [r1, r3]
 8004e86:	fa22 f303 	lsr.w	r3, r2, r3
 8004e8a:	4a09      	ldr	r2, [pc, #36]	; (8004eb0 <HAL_RCC_ClockConfig+0x1cc>)
 8004e8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004e8e:	4b09      	ldr	r3, [pc, #36]	; (8004eb4 <HAL_RCC_ClockConfig+0x1d0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	4618      	mov	r0, r3
 8004e94:	f7fd fe7a 	bl	8002b8c <HAL_InitTick>

  return HAL_OK;
 8004e98:	2300      	movs	r3, #0
}
 8004e9a:	4618      	mov	r0, r3
 8004e9c:	3710      	adds	r7, #16
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	40022000 	.word	0x40022000
 8004ea8:	40021000 	.word	0x40021000
 8004eac:	0800f85c 	.word	0x0800f85c
 8004eb0:	2000001c 	.word	0x2000001c
 8004eb4:	20000020 	.word	0x20000020

08004eb8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004eb8:	b490      	push	{r4, r7}
 8004eba:	b08a      	sub	sp, #40	; 0x28
 8004ebc:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8004ebe:	4b29      	ldr	r3, [pc, #164]	; (8004f64 <HAL_RCC_GetSysClockFreq+0xac>)
 8004ec0:	1d3c      	adds	r4, r7, #4
 8004ec2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8004ec4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8004ec8:	f240 2301 	movw	r3, #513	; 0x201
 8004ecc:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004ece:	2300      	movs	r3, #0
 8004ed0:	61fb      	str	r3, [r7, #28]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	61bb      	str	r3, [r7, #24]
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
 8004eda:	2300      	movs	r3, #0
 8004edc:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8004ede:	2300      	movs	r3, #0
 8004ee0:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004ee2:	4b21      	ldr	r3, [pc, #132]	; (8004f68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004ee8:	69fb      	ldr	r3, [r7, #28]
 8004eea:	f003 030c 	and.w	r3, r3, #12
 8004eee:	2b04      	cmp	r3, #4
 8004ef0:	d002      	beq.n	8004ef8 <HAL_RCC_GetSysClockFreq+0x40>
 8004ef2:	2b08      	cmp	r3, #8
 8004ef4:	d003      	beq.n	8004efe <HAL_RCC_GetSysClockFreq+0x46>
 8004ef6:	e02b      	b.n	8004f50 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ef8:	4b1c      	ldr	r3, [pc, #112]	; (8004f6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004efa:	623b      	str	r3, [r7, #32]
      break;
 8004efc:	e02b      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004efe:	69fb      	ldr	r3, [r7, #28]
 8004f00:	0c9b      	lsrs	r3, r3, #18
 8004f02:	f003 030f 	and.w	r3, r3, #15
 8004f06:	3328      	adds	r3, #40	; 0x28
 8004f08:	443b      	add	r3, r7
 8004f0a:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8004f0e:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d012      	beq.n	8004f40 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004f1a:	4b13      	ldr	r3, [pc, #76]	; (8004f68 <HAL_RCC_GetSysClockFreq+0xb0>)
 8004f1c:	685b      	ldr	r3, [r3, #4]
 8004f1e:	0c5b      	lsrs	r3, r3, #17
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	3328      	adds	r3, #40	; 0x28
 8004f26:	443b      	add	r3, r7
 8004f28:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8004f2c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	4a0e      	ldr	r2, [pc, #56]	; (8004f6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f32:	fb03 f202 	mul.w	r2, r3, r2
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004f3e:	e004      	b.n	8004f4a <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004f40:	697b      	ldr	r3, [r7, #20]
 8004f42:	4a0b      	ldr	r2, [pc, #44]	; (8004f70 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004f44:	fb02 f303 	mul.w	r3, r2, r3
 8004f48:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8004f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f4c:	623b      	str	r3, [r7, #32]
      break;
 8004f4e:	e002      	b.n	8004f56 <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004f50:	4b06      	ldr	r3, [pc, #24]	; (8004f6c <HAL_RCC_GetSysClockFreq+0xb4>)
 8004f52:	623b      	str	r3, [r7, #32]
      break;
 8004f54:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f56:	6a3b      	ldr	r3, [r7, #32]
}
 8004f58:	4618      	mov	r0, r3
 8004f5a:	3728      	adds	r7, #40	; 0x28
 8004f5c:	46bd      	mov	sp, r7
 8004f5e:	bc90      	pop	{r4, r7}
 8004f60:	4770      	bx	lr
 8004f62:	bf00      	nop
 8004f64:	0800e4bc 	.word	0x0800e4bc
 8004f68:	40021000 	.word	0x40021000
 8004f6c:	007a1200 	.word	0x007a1200
 8004f70:	003d0900 	.word	0x003d0900

08004f74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f74:	b480      	push	{r7}
 8004f76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f78:	4b02      	ldr	r3, [pc, #8]	; (8004f84 <HAL_RCC_GetHCLKFreq+0x10>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	bc80      	pop	{r7}
 8004f82:	4770      	bx	lr
 8004f84:	2000001c 	.word	0x2000001c

08004f88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f8c:	f7ff fff2 	bl	8004f74 <HAL_RCC_GetHCLKFreq>
 8004f90:	4602      	mov	r2, r0
 8004f92:	4b05      	ldr	r3, [pc, #20]	; (8004fa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	0a1b      	lsrs	r3, r3, #8
 8004f98:	f003 0307 	and.w	r3, r3, #7
 8004f9c:	4903      	ldr	r1, [pc, #12]	; (8004fac <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f9e:	5ccb      	ldrb	r3, [r1, r3]
 8004fa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	40021000 	.word	0x40021000
 8004fac:	0800f86c 	.word	0x0800f86c

08004fb0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004fb0:	b580      	push	{r7, lr}
 8004fb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004fb4:	f7ff ffde 	bl	8004f74 <HAL_RCC_GetHCLKFreq>
 8004fb8:	4602      	mov	r2, r0
 8004fba:	4b05      	ldr	r3, [pc, #20]	; (8004fd0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004fbc:	685b      	ldr	r3, [r3, #4]
 8004fbe:	0adb      	lsrs	r3, r3, #11
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	4903      	ldr	r1, [pc, #12]	; (8004fd4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004fc6:	5ccb      	ldrb	r3, [r1, r3]
 8004fc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004fcc:	4618      	mov	r0, r3
 8004fce:	bd80      	pop	{r7, pc}
 8004fd0:	40021000 	.word	0x40021000
 8004fd4:	0800f86c 	.word	0x0800f86c

08004fd8 <HAL_RCC_GetClockConfig>:
  * contains the current clock configuration.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004fd8:	b480      	push	{r7}
 8004fda:	b083      	sub	sp, #12
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != NULL);
  assert_param(pFLatency != NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	220f      	movs	r2, #15
 8004fe6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8004fe8:	4b11      	ldr	r3, [pc, #68]	; (8005030 <HAL_RCC_GetClockConfig+0x58>)
 8004fea:	685b      	ldr	r3, [r3, #4]
 8004fec:	f003 0203 	and.w	r2, r3, #3
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8004ff4:	4b0e      	ldr	r3, [pc, #56]	; (8005030 <HAL_RCC_GetClockConfig+0x58>)
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8005000:	4b0b      	ldr	r3, [pc, #44]	; (8005030 <HAL_RCC_GetClockConfig+0x58>)
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 800500c:	4b08      	ldr	r3, [pc, #32]	; (8005030 <HAL_RCC_GetClockConfig+0x58>)
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	08db      	lsrs	r3, r3, #3
 8005012:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	611a      	str	r2, [r3, #16]

#if   defined(FLASH_ACR_LATENCY)
  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800501a:	4b06      	ldr	r3, [pc, #24]	; (8005034 <HAL_RCC_GetClockConfig+0x5c>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	f003 0207 	and.w	r2, r3, #7
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	601a      	str	r2, [r3, #0]
#else
  /* For VALUE lines devices, only LATENCY_0 can be set*/
  *pFLatency = (uint32_t)FLASH_LATENCY_0;
#endif
}
 8005026:	bf00      	nop
 8005028:	370c      	adds	r7, #12
 800502a:	46bd      	mov	sp, r7
 800502c:	bc80      	pop	{r7}
 800502e:	4770      	bx	lr
 8005030:	40021000 	.word	0x40021000
 8005034:	40022000 	.word	0x40022000

08005038 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8005038:	b480      	push	{r7}
 800503a:	b085      	sub	sp, #20
 800503c:	af00      	add	r7, sp, #0
 800503e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005040:	4b0a      	ldr	r3, [pc, #40]	; (800506c <RCC_Delay+0x34>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	4a0a      	ldr	r2, [pc, #40]	; (8005070 <RCC_Delay+0x38>)
 8005046:	fba2 2303 	umull	r2, r3, r2, r3
 800504a:	0a5b      	lsrs	r3, r3, #9
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	fb02 f303 	mul.w	r3, r2, r3
 8005052:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005054:	bf00      	nop
  }
  while (Delay --);
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	1e5a      	subs	r2, r3, #1
 800505a:	60fa      	str	r2, [r7, #12]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d1f9      	bne.n	8005054 <RCC_Delay+0x1c>
}
 8005060:	bf00      	nop
 8005062:	bf00      	nop
 8005064:	3714      	adds	r7, #20
 8005066:	46bd      	mov	sp, r7
 8005068:	bc80      	pop	{r7}
 800506a:	4770      	bx	lr
 800506c:	2000001c 	.word	0x2000001c
 8005070:	10624dd3 	.word	0x10624dd3

08005074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b082      	sub	sp, #8
 8005078:	af00      	add	r7, sp, #0
 800507a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d101      	bne.n	8005086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005082:	2301      	movs	r3, #1
 8005084:	e041      	b.n	800510a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800508c:	b2db      	uxtb	r3, r3
 800508e:	2b00      	cmp	r3, #0
 8005090:	d106      	bne.n	80050a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2200      	movs	r2, #0
 8005096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f7fd fd04 	bl	8002aa8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	2202      	movs	r2, #2
 80050a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681a      	ldr	r2, [r3, #0]
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	3304      	adds	r3, #4
 80050b0:	4619      	mov	r1, r3
 80050b2:	4610      	mov	r0, r2
 80050b4:	f000 faba 	bl	800562c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2201      	movs	r2, #1
 80050c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	2201      	movs	r2, #1
 80050cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	2201      	movs	r2, #1
 80050d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	2201      	movs	r2, #1
 80050dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2201      	movs	r2, #1
 80050e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	2201      	movs	r2, #1
 80050ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2201      	movs	r2, #1
 80050f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2201      	movs	r2, #1
 80050fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2201      	movs	r2, #1
 8005104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005108:	2300      	movs	r3, #0
}
 800510a:	4618      	mov	r0, r3
 800510c:	3708      	adds	r7, #8
 800510e:	46bd      	mov	sp, r7
 8005110:	bd80      	pop	{r7, pc}
	...

08005114 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005114:	b480      	push	{r7}
 8005116:	b085      	sub	sp, #20
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005122:	b2db      	uxtb	r3, r3
 8005124:	2b01      	cmp	r3, #1
 8005126:	d001      	beq.n	800512c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
 800512a:	e032      	b.n	8005192 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	2202      	movs	r2, #2
 8005130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a18      	ldr	r2, [pc, #96]	; (800519c <HAL_TIM_Base_Start+0x88>)
 800513a:	4293      	cmp	r3, r2
 800513c:	d00e      	beq.n	800515c <HAL_TIM_Base_Start+0x48>
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005146:	d009      	beq.n	800515c <HAL_TIM_Base_Start+0x48>
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	4a14      	ldr	r2, [pc, #80]	; (80051a0 <HAL_TIM_Base_Start+0x8c>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d004      	beq.n	800515c <HAL_TIM_Base_Start+0x48>
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	4a13      	ldr	r2, [pc, #76]	; (80051a4 <HAL_TIM_Base_Start+0x90>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d111      	bne.n	8005180 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	689b      	ldr	r3, [r3, #8]
 8005162:	f003 0307 	and.w	r3, r3, #7
 8005166:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	2b06      	cmp	r3, #6
 800516c:	d010      	beq.n	8005190 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f042 0201 	orr.w	r2, r2, #1
 800517c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800517e:	e007      	b.n	8005190 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	681a      	ldr	r2, [r3, #0]
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	f042 0201 	orr.w	r2, r2, #1
 800518e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3714      	adds	r7, #20
 8005196:	46bd      	mov	sp, r7
 8005198:	bc80      	pop	{r7}
 800519a:	4770      	bx	lr
 800519c:	40012c00 	.word	0x40012c00
 80051a0:	40000400 	.word	0x40000400
 80051a4:	40000800 	.word	0x40000800

080051a8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80051a8:	b480      	push	{r7}
 80051aa:	b085      	sub	sp, #20
 80051ac:	af00      	add	r7, sp, #0
 80051ae:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80051b6:	b2db      	uxtb	r3, r3
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d001      	beq.n	80051c0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80051bc:	2301      	movs	r3, #1
 80051be:	e03a      	b.n	8005236 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	2202      	movs	r2, #2
 80051c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	68da      	ldr	r2, [r3, #12]
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f042 0201 	orr.w	r2, r2, #1
 80051d6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a18      	ldr	r2, [pc, #96]	; (8005240 <HAL_TIM_Base_Start_IT+0x98>)
 80051de:	4293      	cmp	r3, r2
 80051e0:	d00e      	beq.n	8005200 <HAL_TIM_Base_Start_IT+0x58>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80051ea:	d009      	beq.n	8005200 <HAL_TIM_Base_Start_IT+0x58>
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a14      	ldr	r2, [pc, #80]	; (8005244 <HAL_TIM_Base_Start_IT+0x9c>)
 80051f2:	4293      	cmp	r3, r2
 80051f4:	d004      	beq.n	8005200 <HAL_TIM_Base_Start_IT+0x58>
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	4a13      	ldr	r2, [pc, #76]	; (8005248 <HAL_TIM_Base_Start_IT+0xa0>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d111      	bne.n	8005224 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	f003 0307 	and.w	r3, r3, #7
 800520a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	2b06      	cmp	r3, #6
 8005210:	d010      	beq.n	8005234 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	681a      	ldr	r2, [r3, #0]
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f042 0201 	orr.w	r2, r2, #1
 8005220:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005222:	e007      	b.n	8005234 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	681a      	ldr	r2, [r3, #0]
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	f042 0201 	orr.w	r2, r2, #1
 8005232:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005234:	2300      	movs	r3, #0
}
 8005236:	4618      	mov	r0, r3
 8005238:	3714      	adds	r7, #20
 800523a:	46bd      	mov	sp, r7
 800523c:	bc80      	pop	{r7}
 800523e:	4770      	bx	lr
 8005240:	40012c00 	.word	0x40012c00
 8005244:	40000400 	.word	0x40000400
 8005248:	40000800 	.word	0x40000800

0800524c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800524c:	b580      	push	{r7, lr}
 800524e:	b082      	sub	sp, #8
 8005250:	af00      	add	r7, sp, #0
 8005252:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	691b      	ldr	r3, [r3, #16]
 800525a:	f003 0302 	and.w	r3, r3, #2
 800525e:	2b02      	cmp	r3, #2
 8005260:	d122      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	68db      	ldr	r3, [r3, #12]
 8005268:	f003 0302 	and.w	r3, r3, #2
 800526c:	2b02      	cmp	r3, #2
 800526e:	d11b      	bne.n	80052a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0202 	mvn.w	r2, #2
 8005278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	699b      	ldr	r3, [r3, #24]
 8005286:	f003 0303 	and.w	r3, r3, #3
 800528a:	2b00      	cmp	r3, #0
 800528c:	d003      	beq.n	8005296 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800528e:	6878      	ldr	r0, [r7, #4]
 8005290:	f000 f9b1 	bl	80055f6 <HAL_TIM_IC_CaptureCallback>
 8005294:	e005      	b.n	80052a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005296:	6878      	ldr	r0, [r7, #4]
 8005298:	f000 f9a4 	bl	80055e4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f000 f9b3 	bl	8005608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	2200      	movs	r2, #0
 80052a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	691b      	ldr	r3, [r3, #16]
 80052ae:	f003 0304 	and.w	r3, r3, #4
 80052b2:	2b04      	cmp	r3, #4
 80052b4:	d122      	bne.n	80052fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	68db      	ldr	r3, [r3, #12]
 80052bc:	f003 0304 	and.w	r3, r3, #4
 80052c0:	2b04      	cmp	r3, #4
 80052c2:	d11b      	bne.n	80052fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	f06f 0204 	mvn.w	r2, #4
 80052cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	2202      	movs	r2, #2
 80052d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	699b      	ldr	r3, [r3, #24]
 80052da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d003      	beq.n	80052ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052e2:	6878      	ldr	r0, [r7, #4]
 80052e4:	f000 f987 	bl	80055f6 <HAL_TIM_IC_CaptureCallback>
 80052e8:	e005      	b.n	80052f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 f97a 	bl	80055e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f000 f989 	bl	8005608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	2200      	movs	r2, #0
 80052fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	691b      	ldr	r3, [r3, #16]
 8005302:	f003 0308 	and.w	r3, r3, #8
 8005306:	2b08      	cmp	r3, #8
 8005308:	d122      	bne.n	8005350 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68db      	ldr	r3, [r3, #12]
 8005310:	f003 0308 	and.w	r3, r3, #8
 8005314:	2b08      	cmp	r3, #8
 8005316:	d11b      	bne.n	8005350 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f06f 0208 	mvn.w	r2, #8
 8005320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	2204      	movs	r2, #4
 8005326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	69db      	ldr	r3, [r3, #28]
 800532e:	f003 0303 	and.w	r3, r3, #3
 8005332:	2b00      	cmp	r3, #0
 8005334:	d003      	beq.n	800533e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005336:	6878      	ldr	r0, [r7, #4]
 8005338:	f000 f95d 	bl	80055f6 <HAL_TIM_IC_CaptureCallback>
 800533c:	e005      	b.n	800534a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800533e:	6878      	ldr	r0, [r7, #4]
 8005340:	f000 f950 	bl	80055e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005344:	6878      	ldr	r0, [r7, #4]
 8005346:	f000 f95f 	bl	8005608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	2200      	movs	r2, #0
 800534e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	691b      	ldr	r3, [r3, #16]
 8005356:	f003 0310 	and.w	r3, r3, #16
 800535a:	2b10      	cmp	r3, #16
 800535c:	d122      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	f003 0310 	and.w	r3, r3, #16
 8005368:	2b10      	cmp	r3, #16
 800536a:	d11b      	bne.n	80053a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	f06f 0210 	mvn.w	r2, #16
 8005374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2208      	movs	r2, #8
 800537a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	69db      	ldr	r3, [r3, #28]
 8005382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005386:	2b00      	cmp	r3, #0
 8005388:	d003      	beq.n	8005392 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 f933 	bl	80055f6 <HAL_TIM_IC_CaptureCallback>
 8005390:	e005      	b.n	800539e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 f926 	bl	80055e4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005398:	6878      	ldr	r0, [r7, #4]
 800539a:	f000 f935 	bl	8005608 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2200      	movs	r2, #0
 80053a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	691b      	ldr	r3, [r3, #16]
 80053aa:	f003 0301 	and.w	r3, r3, #1
 80053ae:	2b01      	cmp	r3, #1
 80053b0:	d10e      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	68db      	ldr	r3, [r3, #12]
 80053b8:	f003 0301 	and.w	r3, r3, #1
 80053bc:	2b01      	cmp	r3, #1
 80053be:	d107      	bne.n	80053d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0201 	mvn.w	r2, #1
 80053c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f7fc ff84 	bl	80022d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	691b      	ldr	r3, [r3, #16]
 80053d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053da:	2b80      	cmp	r3, #128	; 0x80
 80053dc:	d10e      	bne.n	80053fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68db      	ldr	r3, [r3, #12]
 80053e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80053e8:	2b80      	cmp	r3, #128	; 0x80
 80053ea:	d107      	bne.n	80053fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80053f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053f6:	6878      	ldr	r0, [r7, #4]
 80053f8:	f000 fa77 	bl	80058ea <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	691b      	ldr	r3, [r3, #16]
 8005402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005406:	2b40      	cmp	r3, #64	; 0x40
 8005408:	d10e      	bne.n	8005428 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005414:	2b40      	cmp	r3, #64	; 0x40
 8005416:	d107      	bne.n	8005428 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005420:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005422:	6878      	ldr	r0, [r7, #4]
 8005424:	f000 f8f9 	bl	800561a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	691b      	ldr	r3, [r3, #16]
 800542e:	f003 0320 	and.w	r3, r3, #32
 8005432:	2b20      	cmp	r3, #32
 8005434:	d10e      	bne.n	8005454 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	68db      	ldr	r3, [r3, #12]
 800543c:	f003 0320 	and.w	r3, r3, #32
 8005440:	2b20      	cmp	r3, #32
 8005442:	d107      	bne.n	8005454 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	f06f 0220 	mvn.w	r2, #32
 800544c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800544e:	6878      	ldr	r0, [r7, #4]
 8005450:	f000 fa42 	bl	80058d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005454:	bf00      	nop
 8005456:	3708      	adds	r7, #8
 8005458:	46bd      	mov	sp, r7
 800545a:	bd80      	pop	{r7, pc}

0800545c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800545c:	b580      	push	{r7, lr}
 800545e:	b084      	sub	sp, #16
 8005460:	af00      	add	r7, sp, #0
 8005462:	6078      	str	r0, [r7, #4]
 8005464:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800546c:	2b01      	cmp	r3, #1
 800546e:	d101      	bne.n	8005474 <HAL_TIM_ConfigClockSource+0x18>
 8005470:	2302      	movs	r3, #2
 8005472:	e0b3      	b.n	80055dc <HAL_TIM_ConfigClockSource+0x180>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	2201      	movs	r2, #1
 8005478:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	2202      	movs	r2, #2
 8005480:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	689b      	ldr	r3, [r3, #8]
 800548a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005492:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800549a:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	68fa      	ldr	r2, [r7, #12]
 80054a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054a4:	683b      	ldr	r3, [r7, #0]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054ac:	d03e      	beq.n	800552c <HAL_TIM_ConfigClockSource+0xd0>
 80054ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054b2:	f200 8087 	bhi.w	80055c4 <HAL_TIM_ConfigClockSource+0x168>
 80054b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054ba:	f000 8085 	beq.w	80055c8 <HAL_TIM_ConfigClockSource+0x16c>
 80054be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054c2:	d87f      	bhi.n	80055c4 <HAL_TIM_ConfigClockSource+0x168>
 80054c4:	2b70      	cmp	r3, #112	; 0x70
 80054c6:	d01a      	beq.n	80054fe <HAL_TIM_ConfigClockSource+0xa2>
 80054c8:	2b70      	cmp	r3, #112	; 0x70
 80054ca:	d87b      	bhi.n	80055c4 <HAL_TIM_ConfigClockSource+0x168>
 80054cc:	2b60      	cmp	r3, #96	; 0x60
 80054ce:	d050      	beq.n	8005572 <HAL_TIM_ConfigClockSource+0x116>
 80054d0:	2b60      	cmp	r3, #96	; 0x60
 80054d2:	d877      	bhi.n	80055c4 <HAL_TIM_ConfigClockSource+0x168>
 80054d4:	2b50      	cmp	r3, #80	; 0x50
 80054d6:	d03c      	beq.n	8005552 <HAL_TIM_ConfigClockSource+0xf6>
 80054d8:	2b50      	cmp	r3, #80	; 0x50
 80054da:	d873      	bhi.n	80055c4 <HAL_TIM_ConfigClockSource+0x168>
 80054dc:	2b40      	cmp	r3, #64	; 0x40
 80054de:	d058      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x136>
 80054e0:	2b40      	cmp	r3, #64	; 0x40
 80054e2:	d86f      	bhi.n	80055c4 <HAL_TIM_ConfigClockSource+0x168>
 80054e4:	2b30      	cmp	r3, #48	; 0x30
 80054e6:	d064      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x156>
 80054e8:	2b30      	cmp	r3, #48	; 0x30
 80054ea:	d86b      	bhi.n	80055c4 <HAL_TIM_ConfigClockSource+0x168>
 80054ec:	2b20      	cmp	r3, #32
 80054ee:	d060      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x156>
 80054f0:	2b20      	cmp	r3, #32
 80054f2:	d867      	bhi.n	80055c4 <HAL_TIM_ConfigClockSource+0x168>
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d05c      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x156>
 80054f8:	2b10      	cmp	r3, #16
 80054fa:	d05a      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80054fc:	e062      	b.n	80055c4 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	6818      	ldr	r0, [r3, #0]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	6899      	ldr	r1, [r3, #8]
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	685a      	ldr	r2, [r3, #4]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	68db      	ldr	r3, [r3, #12]
 800550e:	f000 f966 	bl	80057de <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005520:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	68fa      	ldr	r2, [r7, #12]
 8005528:	609a      	str	r2, [r3, #8]
      break;
 800552a:	e04e      	b.n	80055ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	6818      	ldr	r0, [r3, #0]
 8005530:	683b      	ldr	r3, [r7, #0]
 8005532:	6899      	ldr	r1, [r3, #8]
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	685a      	ldr	r2, [r3, #4]
 8005538:	683b      	ldr	r3, [r7, #0]
 800553a:	68db      	ldr	r3, [r3, #12]
 800553c:	f000 f94f 	bl	80057de <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	689a      	ldr	r2, [r3, #8]
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800554e:	609a      	str	r2, [r3, #8]
      break;
 8005550:	e03b      	b.n	80055ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	6818      	ldr	r0, [r3, #0]
 8005556:	683b      	ldr	r3, [r7, #0]
 8005558:	6859      	ldr	r1, [r3, #4]
 800555a:	683b      	ldr	r3, [r7, #0]
 800555c:	68db      	ldr	r3, [r3, #12]
 800555e:	461a      	mov	r2, r3
 8005560:	f000 f8c6 	bl	80056f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	2150      	movs	r1, #80	; 0x50
 800556a:	4618      	mov	r0, r3
 800556c:	f000 f91d 	bl	80057aa <TIM_ITRx_SetConfig>
      break;
 8005570:	e02b      	b.n	80055ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6818      	ldr	r0, [r3, #0]
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	6859      	ldr	r1, [r3, #4]
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
 800557e:	461a      	mov	r2, r3
 8005580:	f000 f8e4 	bl	800574c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2160      	movs	r1, #96	; 0x60
 800558a:	4618      	mov	r0, r3
 800558c:	f000 f90d 	bl	80057aa <TIM_ITRx_SetConfig>
      break;
 8005590:	e01b      	b.n	80055ca <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6818      	ldr	r0, [r3, #0]
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6859      	ldr	r1, [r3, #4]
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
 800559e:	461a      	mov	r2, r3
 80055a0:	f000 f8a6 	bl	80056f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2140      	movs	r1, #64	; 0x40
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 f8fd 	bl	80057aa <TIM_ITRx_SetConfig>
      break;
 80055b0:	e00b      	b.n	80055ca <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	681a      	ldr	r2, [r3, #0]
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	4619      	mov	r1, r3
 80055bc:	4610      	mov	r0, r2
 80055be:	f000 f8f4 	bl	80057aa <TIM_ITRx_SetConfig>
        break;
 80055c2:	e002      	b.n	80055ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055c4:	bf00      	nop
 80055c6:	e000      	b.n	80055ca <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80055c8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	2201      	movs	r2, #1
 80055ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	2200      	movs	r2, #0
 80055d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80055da:	2300      	movs	r3, #0
}
 80055dc:	4618      	mov	r0, r3
 80055de:	3710      	adds	r7, #16
 80055e0:	46bd      	mov	sp, r7
 80055e2:	bd80      	pop	{r7, pc}

080055e4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b083      	sub	sp, #12
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80055ec:	bf00      	nop
 80055ee:	370c      	adds	r7, #12
 80055f0:	46bd      	mov	sp, r7
 80055f2:	bc80      	pop	{r7}
 80055f4:	4770      	bx	lr

080055f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80055f6:	b480      	push	{r7}
 80055f8:	b083      	sub	sp, #12
 80055fa:	af00      	add	r7, sp, #0
 80055fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80055fe:	bf00      	nop
 8005600:	370c      	adds	r7, #12
 8005602:	46bd      	mov	sp, r7
 8005604:	bc80      	pop	{r7}
 8005606:	4770      	bx	lr

08005608 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005608:	b480      	push	{r7}
 800560a:	b083      	sub	sp, #12
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005610:	bf00      	nop
 8005612:	370c      	adds	r7, #12
 8005614:	46bd      	mov	sp, r7
 8005616:	bc80      	pop	{r7}
 8005618:	4770      	bx	lr

0800561a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	bc80      	pop	{r7}
 800562a:	4770      	bx	lr

0800562c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800562c:	b480      	push	{r7}
 800562e:	b085      	sub	sp, #20
 8005630:	af00      	add	r7, sp, #0
 8005632:	6078      	str	r0, [r7, #4]
 8005634:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	4a29      	ldr	r2, [pc, #164]	; (80056e4 <TIM_Base_SetConfig+0xb8>)
 8005640:	4293      	cmp	r3, r2
 8005642:	d00b      	beq.n	800565c <TIM_Base_SetConfig+0x30>
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800564a:	d007      	beq.n	800565c <TIM_Base_SetConfig+0x30>
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	4a26      	ldr	r2, [pc, #152]	; (80056e8 <TIM_Base_SetConfig+0xbc>)
 8005650:	4293      	cmp	r3, r2
 8005652:	d003      	beq.n	800565c <TIM_Base_SetConfig+0x30>
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	4a25      	ldr	r2, [pc, #148]	; (80056ec <TIM_Base_SetConfig+0xc0>)
 8005658:	4293      	cmp	r3, r2
 800565a:	d108      	bne.n	800566e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005662:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	685b      	ldr	r3, [r3, #4]
 8005668:	68fa      	ldr	r2, [r7, #12]
 800566a:	4313      	orrs	r3, r2
 800566c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	4a1c      	ldr	r2, [pc, #112]	; (80056e4 <TIM_Base_SetConfig+0xb8>)
 8005672:	4293      	cmp	r3, r2
 8005674:	d00b      	beq.n	800568e <TIM_Base_SetConfig+0x62>
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800567c:	d007      	beq.n	800568e <TIM_Base_SetConfig+0x62>
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	4a19      	ldr	r2, [pc, #100]	; (80056e8 <TIM_Base_SetConfig+0xbc>)
 8005682:	4293      	cmp	r3, r2
 8005684:	d003      	beq.n	800568e <TIM_Base_SetConfig+0x62>
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	4a18      	ldr	r2, [pc, #96]	; (80056ec <TIM_Base_SetConfig+0xc0>)
 800568a:	4293      	cmp	r3, r2
 800568c:	d108      	bne.n	80056a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005694:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	68db      	ldr	r3, [r3, #12]
 800569a:	68fa      	ldr	r2, [r7, #12]
 800569c:	4313      	orrs	r3, r2
 800569e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	695b      	ldr	r3, [r3, #20]
 80056aa:	4313      	orrs	r3, r2
 80056ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	68fa      	ldr	r2, [r7, #12]
 80056b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	689a      	ldr	r2, [r3, #8]
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	681a      	ldr	r2, [r3, #0]
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	4a07      	ldr	r2, [pc, #28]	; (80056e4 <TIM_Base_SetConfig+0xb8>)
 80056c8:	4293      	cmp	r3, r2
 80056ca:	d103      	bne.n	80056d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	691a      	ldr	r2, [r3, #16]
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2201      	movs	r2, #1
 80056d8:	615a      	str	r2, [r3, #20]
}
 80056da:	bf00      	nop
 80056dc:	3714      	adds	r7, #20
 80056de:	46bd      	mov	sp, r7
 80056e0:	bc80      	pop	{r7}
 80056e2:	4770      	bx	lr
 80056e4:	40012c00 	.word	0x40012c00
 80056e8:	40000400 	.word	0x40000400
 80056ec:	40000800 	.word	0x40000800

080056f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056f0:	b480      	push	{r7}
 80056f2:	b087      	sub	sp, #28
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	6a1b      	ldr	r3, [r3, #32]
 8005700:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	6a1b      	ldr	r3, [r3, #32]
 8005706:	f023 0201 	bic.w	r2, r3, #1
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	699b      	ldr	r3, [r3, #24]
 8005712:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800571a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	011b      	lsls	r3, r3, #4
 8005720:	693a      	ldr	r2, [r7, #16]
 8005722:	4313      	orrs	r3, r2
 8005724:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005726:	697b      	ldr	r3, [r7, #20]
 8005728:	f023 030a 	bic.w	r3, r3, #10
 800572c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800572e:	697a      	ldr	r2, [r7, #20]
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4313      	orrs	r3, r2
 8005734:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	693a      	ldr	r2, [r7, #16]
 800573a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	697a      	ldr	r2, [r7, #20]
 8005740:	621a      	str	r2, [r3, #32]
}
 8005742:	bf00      	nop
 8005744:	371c      	adds	r7, #28
 8005746:	46bd      	mov	sp, r7
 8005748:	bc80      	pop	{r7}
 800574a:	4770      	bx	lr

0800574c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6a1b      	ldr	r3, [r3, #32]
 800575c:	f023 0210 	bic.w	r2, r3, #16
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	699b      	ldr	r3, [r3, #24]
 8005768:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	6a1b      	ldr	r3, [r3, #32]
 800576e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005770:	697b      	ldr	r3, [r7, #20]
 8005772:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005776:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	031b      	lsls	r3, r3, #12
 800577c:	697a      	ldr	r2, [r7, #20]
 800577e:	4313      	orrs	r3, r2
 8005780:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005788:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	011b      	lsls	r3, r3, #4
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	693a      	ldr	r2, [r7, #16]
 800579e:	621a      	str	r2, [r3, #32]
}
 80057a0:	bf00      	nop
 80057a2:	371c      	adds	r7, #28
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bc80      	pop	{r7}
 80057a8:	4770      	bx	lr

080057aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80057aa:	b480      	push	{r7}
 80057ac:	b085      	sub	sp, #20
 80057ae:	af00      	add	r7, sp, #0
 80057b0:	6078      	str	r0, [r7, #4]
 80057b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	689b      	ldr	r3, [r3, #8]
 80057b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057c2:	683a      	ldr	r2, [r7, #0]
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	4313      	orrs	r3, r2
 80057c8:	f043 0307 	orr.w	r3, r3, #7
 80057cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	68fa      	ldr	r2, [r7, #12]
 80057d2:	609a      	str	r2, [r3, #8]
}
 80057d4:	bf00      	nop
 80057d6:	3714      	adds	r7, #20
 80057d8:	46bd      	mov	sp, r7
 80057da:	bc80      	pop	{r7}
 80057dc:	4770      	bx	lr

080057de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057de:	b480      	push	{r7}
 80057e0:	b087      	sub	sp, #28
 80057e2:	af00      	add	r7, sp, #0
 80057e4:	60f8      	str	r0, [r7, #12]
 80057e6:	60b9      	str	r1, [r7, #8]
 80057e8:	607a      	str	r2, [r7, #4]
 80057ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	689b      	ldr	r3, [r3, #8]
 80057f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	021a      	lsls	r2, r3, #8
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	431a      	orrs	r2, r3
 8005802:	68bb      	ldr	r3, [r7, #8]
 8005804:	4313      	orrs	r3, r2
 8005806:	697a      	ldr	r2, [r7, #20]
 8005808:	4313      	orrs	r3, r2
 800580a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	697a      	ldr	r2, [r7, #20]
 8005810:	609a      	str	r2, [r3, #8]
}
 8005812:	bf00      	nop
 8005814:	371c      	adds	r7, #28
 8005816:	46bd      	mov	sp, r7
 8005818:	bc80      	pop	{r7}
 800581a:	4770      	bx	lr

0800581c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800581c:	b480      	push	{r7}
 800581e:	b085      	sub	sp, #20
 8005820:	af00      	add	r7, sp, #0
 8005822:	6078      	str	r0, [r7, #4]
 8005824:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005830:	2302      	movs	r3, #2
 8005832:	e046      	b.n	80058c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	2202      	movs	r2, #2
 8005840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	685b      	ldr	r3, [r3, #4]
 800584a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	689b      	ldr	r3, [r3, #8]
 8005852:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800585a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68fa      	ldr	r2, [r7, #12]
 8005862:	4313      	orrs	r3, r2
 8005864:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a16      	ldr	r2, [pc, #88]	; (80058cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d00e      	beq.n	8005896 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005880:	d009      	beq.n	8005896 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	4a12      	ldr	r2, [pc, #72]	; (80058d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005888:	4293      	cmp	r3, r2
 800588a:	d004      	beq.n	8005896 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a10      	ldr	r2, [pc, #64]	; (80058d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d10c      	bne.n	80058b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005896:	68bb      	ldr	r3, [r7, #8]
 8005898:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800589c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	685b      	ldr	r3, [r3, #4]
 80058a2:	68ba      	ldr	r2, [r7, #8]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68ba      	ldr	r2, [r7, #8]
 80058ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2201      	movs	r2, #1
 80058b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2200      	movs	r2, #0
 80058bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80058c0:	2300      	movs	r3, #0
}
 80058c2:	4618      	mov	r0, r3
 80058c4:	3714      	adds	r7, #20
 80058c6:	46bd      	mov	sp, r7
 80058c8:	bc80      	pop	{r7}
 80058ca:	4770      	bx	lr
 80058cc:	40012c00 	.word	0x40012c00
 80058d0:	40000400 	.word	0x40000400
 80058d4:	40000800 	.word	0x40000800

080058d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80058e0:	bf00      	nop
 80058e2:	370c      	adds	r7, #12
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bc80      	pop	{r7}
 80058e8:	4770      	bx	lr

080058ea <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80058ea:	b480      	push	{r7}
 80058ec:	b083      	sub	sp, #12
 80058ee:	af00      	add	r7, sp, #0
 80058f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80058f2:	bf00      	nop
 80058f4:	370c      	adds	r7, #12
 80058f6:	46bd      	mov	sp, r7
 80058f8:	bc80      	pop	{r7}
 80058fa:	4770      	bx	lr

080058fc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80058fc:	b580      	push	{r7, lr}
 80058fe:	b082      	sub	sp, #8
 8005900:	af00      	add	r7, sp, #0
 8005902:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d101      	bne.n	800590e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e03f      	b.n	800598e <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b00      	cmp	r3, #0
 8005918:	d106      	bne.n	8005928 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005922:	6878      	ldr	r0, [r7, #4]
 8005924:	f7fd f8de 	bl	8002ae4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2224      	movs	r2, #36	; 0x24
 800592c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	68da      	ldr	r2, [r3, #12]
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800593e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005940:	6878      	ldr	r0, [r7, #4]
 8005942:	f000 fc85 	bl	8006250 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005954:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	695a      	ldr	r2, [r3, #20]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005964:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	68da      	ldr	r2, [r3, #12]
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005974:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2200      	movs	r2, #0
 800597a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2220      	movs	r2, #32
 8005980:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2220      	movs	r2, #32
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3708      	adds	r7, #8
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005996:	b580      	push	{r7, lr}
 8005998:	b08a      	sub	sp, #40	; 0x28
 800599a:	af02      	add	r7, sp, #8
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	603b      	str	r3, [r7, #0]
 80059a2:	4613      	mov	r3, r2
 80059a4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80059a6:	2300      	movs	r3, #0
 80059a8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b0:	b2db      	uxtb	r3, r3
 80059b2:	2b20      	cmp	r3, #32
 80059b4:	d17c      	bne.n	8005ab0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80059b6:	68bb      	ldr	r3, [r7, #8]
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d002      	beq.n	80059c2 <HAL_UART_Transmit+0x2c>
 80059bc:	88fb      	ldrh	r3, [r7, #6]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d101      	bne.n	80059c6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80059c2:	2301      	movs	r3, #1
 80059c4:	e075      	b.n	8005ab2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059cc:	2b01      	cmp	r3, #1
 80059ce:	d101      	bne.n	80059d4 <HAL_UART_Transmit+0x3e>
 80059d0:	2302      	movs	r3, #2
 80059d2:	e06e      	b.n	8005ab2 <HAL_UART_Transmit+0x11c>
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	2201      	movs	r2, #1
 80059d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	2200      	movs	r2, #0
 80059e0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	2221      	movs	r2, #33	; 0x21
 80059e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80059ea:	f7fd fa8b 	bl	8002f04 <HAL_GetTick>
 80059ee:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	88fa      	ldrh	r2, [r7, #6]
 80059f4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80059f6:	68fb      	ldr	r3, [r7, #12]
 80059f8:	88fa      	ldrh	r2, [r7, #6]
 80059fa:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005a04:	d108      	bne.n	8005a18 <HAL_UART_Transmit+0x82>
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	691b      	ldr	r3, [r3, #16]
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d104      	bne.n	8005a18 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8005a0e:	2300      	movs	r3, #0
 8005a10:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005a12:	68bb      	ldr	r3, [r7, #8]
 8005a14:	61bb      	str	r3, [r7, #24]
 8005a16:	e003      	b.n	8005a20 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8005a18:	68bb      	ldr	r3, [r7, #8]
 8005a1a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a1c:	2300      	movs	r3, #0
 8005a1e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2200      	movs	r2, #0
 8005a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8005a28:	e02a      	b.n	8005a80 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	9300      	str	r3, [sp, #0]
 8005a2e:	697b      	ldr	r3, [r7, #20]
 8005a30:	2200      	movs	r2, #0
 8005a32:	2180      	movs	r1, #128	; 0x80
 8005a34:	68f8      	ldr	r0, [r7, #12]
 8005a36:	f000 fa38 	bl	8005eaa <UART_WaitOnFlagUntilTimeout>
 8005a3a:	4603      	mov	r3, r0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d001      	beq.n	8005a44 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8005a40:	2303      	movs	r3, #3
 8005a42:	e036      	b.n	8005ab2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8005a44:	69fb      	ldr	r3, [r7, #28]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10b      	bne.n	8005a62 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	881b      	ldrh	r3, [r3, #0]
 8005a4e:	461a      	mov	r2, r3
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a58:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005a5a:	69bb      	ldr	r3, [r7, #24]
 8005a5c:	3302      	adds	r3, #2
 8005a5e:	61bb      	str	r3, [r7, #24]
 8005a60:	e007      	b.n	8005a72 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	781a      	ldrb	r2, [r3, #0]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005a6c:	69fb      	ldr	r3, [r7, #28]
 8005a6e:	3301      	adds	r3, #1
 8005a70:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a76:	b29b      	uxth	r3, r3
 8005a78:	3b01      	subs	r3, #1
 8005a7a:	b29a      	uxth	r2, r3
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005a84:	b29b      	uxth	r3, r3
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d1cf      	bne.n	8005a2a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	9300      	str	r3, [sp, #0]
 8005a8e:	697b      	ldr	r3, [r7, #20]
 8005a90:	2200      	movs	r2, #0
 8005a92:	2140      	movs	r1, #64	; 0x40
 8005a94:	68f8      	ldr	r0, [r7, #12]
 8005a96:	f000 fa08 	bl	8005eaa <UART_WaitOnFlagUntilTimeout>
 8005a9a:	4603      	mov	r3, r0
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d001      	beq.n	8005aa4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8005aa0:	2303      	movs	r3, #3
 8005aa2:	e006      	b.n	8005ab2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	2220      	movs	r2, #32
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8005aac:	2300      	movs	r3, #0
 8005aae:	e000      	b.n	8005ab2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8005ab0:	2302      	movs	r3, #2
  }
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3720      	adds	r7, #32
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}

08005aba <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005aba:	b580      	push	{r7, lr}
 8005abc:	b084      	sub	sp, #16
 8005abe:	af00      	add	r7, sp, #0
 8005ac0:	60f8      	str	r0, [r7, #12]
 8005ac2:	60b9      	str	r1, [r7, #8]
 8005ac4:	4613      	mov	r3, r2
 8005ac6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ace:	b2db      	uxtb	r3, r3
 8005ad0:	2b20      	cmp	r3, #32
 8005ad2:	d11d      	bne.n	8005b10 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005ad4:	68bb      	ldr	r3, [r7, #8]
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d002      	beq.n	8005ae0 <HAL_UART_Receive_IT+0x26>
 8005ada:	88fb      	ldrh	r3, [r7, #6]
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e016      	b.n	8005b12 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005aea:	2b01      	cmp	r3, #1
 8005aec:	d101      	bne.n	8005af2 <HAL_UART_Receive_IT+0x38>
 8005aee:	2302      	movs	r3, #2
 8005af0:	e00f      	b.n	8005b12 <HAL_UART_Receive_IT+0x58>
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	2201      	movs	r2, #1
 8005af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_IT(huart, pData, Size));
 8005b00:	88fb      	ldrh	r3, [r7, #6]
 8005b02:	461a      	mov	r2, r3
 8005b04:	68b9      	ldr	r1, [r7, #8]
 8005b06:	68f8      	ldr	r0, [r7, #12]
 8005b08:	f000 fa19 	bl	8005f3e <UART_Start_Receive_IT>
 8005b0c:	4603      	mov	r3, r0
 8005b0e:	e000      	b.n	8005b12 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8005b10:	2302      	movs	r3, #2
  }
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3710      	adds	r7, #16
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}
	...

08005b1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b08a      	sub	sp, #40	; 0x28
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	68db      	ldr	r3, [r3, #12]
 8005b32:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	695b      	ldr	r3, [r3, #20]
 8005b3a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8005b3c:	2300      	movs	r3, #0
 8005b3e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8005b40:	2300      	movs	r3, #0
 8005b42:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005b44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b46:	f003 030f 	and.w	r3, r3, #15
 8005b4a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d10d      	bne.n	8005b6e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005b52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b54:	f003 0320 	and.w	r3, r3, #32
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d008      	beq.n	8005b6e <HAL_UART_IRQHandler+0x52>
 8005b5c:	6a3b      	ldr	r3, [r7, #32]
 8005b5e:	f003 0320 	and.w	r3, r3, #32
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d003      	beq.n	8005b6e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f000 fac9 	bl	80060fe <UART_Receive_IT>
      return;
 8005b6c:	e17b      	b.n	8005e66 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005b6e:	69bb      	ldr	r3, [r7, #24]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	f000 80b1 	beq.w	8005cd8 <HAL_UART_IRQHandler+0x1bc>
 8005b76:	69fb      	ldr	r3, [r7, #28]
 8005b78:	f003 0301 	and.w	r3, r3, #1
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d105      	bne.n	8005b8c <HAL_UART_IRQHandler+0x70>
 8005b80:	6a3b      	ldr	r3, [r7, #32]
 8005b82:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	f000 80a6 	beq.w	8005cd8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005b8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b8e:	f003 0301 	and.w	r3, r3, #1
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00a      	beq.n	8005bac <HAL_UART_IRQHandler+0x90>
 8005b96:	6a3b      	ldr	r3, [r7, #32]
 8005b98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d005      	beq.n	8005bac <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ba4:	f043 0201 	orr.w	r2, r3, #1
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bae:	f003 0304 	and.w	r3, r3, #4
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00a      	beq.n	8005bcc <HAL_UART_IRQHandler+0xb0>
 8005bb6:	69fb      	ldr	r3, [r7, #28]
 8005bb8:	f003 0301 	and.w	r3, r3, #1
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d005      	beq.n	8005bcc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005bc0:	687b      	ldr	r3, [r7, #4]
 8005bc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005bc4:	f043 0202 	orr.w	r2, r3, #2
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bce:	f003 0302 	and.w	r3, r3, #2
 8005bd2:	2b00      	cmp	r3, #0
 8005bd4:	d00a      	beq.n	8005bec <HAL_UART_IRQHandler+0xd0>
 8005bd6:	69fb      	ldr	r3, [r7, #28]
 8005bd8:	f003 0301 	and.w	r3, r3, #1
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d005      	beq.n	8005bec <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005be4:	f043 0204 	orr.w	r2, r3, #4
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8005bec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d00f      	beq.n	8005c16 <HAL_UART_IRQHandler+0xfa>
 8005bf6:	6a3b      	ldr	r3, [r7, #32]
 8005bf8:	f003 0320 	and.w	r3, r3, #32
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d104      	bne.n	8005c0a <HAL_UART_IRQHandler+0xee>
 8005c00:	69fb      	ldr	r3, [r7, #28]
 8005c02:	f003 0301 	and.w	r3, r3, #1
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d005      	beq.n	8005c16 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c0e:	f043 0208 	orr.w	r2, r3, #8
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	f000 811e 	beq.w	8005e5c <HAL_UART_IRQHandler+0x340>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005c20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c22:	f003 0320 	and.w	r3, r3, #32
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d007      	beq.n	8005c3a <HAL_UART_IRQHandler+0x11e>
 8005c2a:	6a3b      	ldr	r3, [r7, #32]
 8005c2c:	f003 0320 	and.w	r3, r3, #32
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	d002      	beq.n	8005c3a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8005c34:	6878      	ldr	r0, [r7, #4]
 8005c36:	f000 fa62 	bl	80060fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	695b      	ldr	r3, [r3, #20]
 8005c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	bf14      	ite	ne
 8005c48:	2301      	movne	r3, #1
 8005c4a:	2300      	moveq	r3, #0
 8005c4c:	b2db      	uxtb	r3, r3
 8005c4e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c54:	f003 0308 	and.w	r3, r3, #8
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d102      	bne.n	8005c62 <HAL_UART_IRQHandler+0x146>
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d031      	beq.n	8005cc6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 f9a4 	bl	8005fb0 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	695b      	ldr	r3, [r3, #20]
 8005c6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d023      	beq.n	8005cbe <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	695a      	ldr	r2, [r3, #20]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c84:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d013      	beq.n	8005cb6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c92:	4a76      	ldr	r2, [pc, #472]	; (8005e6c <HAL_UART_IRQHandler+0x350>)
 8005c94:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f7fd fa7a 	bl	8003194 <HAL_DMA_Abort_IT>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d016      	beq.n	8005cd4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005caa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005cac:	687a      	ldr	r2, [r7, #4]
 8005cae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005cb0:	4610      	mov	r0, r2
 8005cb2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cb4:	e00e      	b.n	8005cd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005cb6:	6878      	ldr	r0, [r7, #4]
 8005cb8:	f000 f8e3 	bl	8005e82 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cbc:	e00a      	b.n	8005cd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005cbe:	6878      	ldr	r0, [r7, #4]
 8005cc0:	f000 f8df 	bl	8005e82 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cc4:	e006      	b.n	8005cd4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005cc6:	6878      	ldr	r0, [r7, #4]
 8005cc8:	f000 f8db 	bl	8005e82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2200      	movs	r2, #0
 8005cd0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8005cd2:	e0c3      	b.n	8005e5c <HAL_UART_IRQHandler+0x340>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005cd4:	bf00      	nop
    return;
 8005cd6:	e0c1      	b.n	8005e5c <HAL_UART_IRQHandler+0x340>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cdc:	2b01      	cmp	r3, #1
 8005cde:	f040 80a1 	bne.w	8005e24 <HAL_UART_IRQHandler+0x308>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8005ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce4:	f003 0310 	and.w	r3, r3, #16
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	f000 809b 	beq.w	8005e24 <HAL_UART_IRQHandler+0x308>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8005cee:	6a3b      	ldr	r3, [r7, #32]
 8005cf0:	f003 0310 	and.w	r3, r3, #16
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f000 8095 	beq.w	8005e24 <HAL_UART_IRQHandler+0x308>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005cfa:	2300      	movs	r3, #0
 8005cfc:	60fb      	str	r3, [r7, #12]
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	685b      	ldr	r3, [r3, #4]
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	695b      	ldr	r3, [r3, #20]
 8005d16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d04e      	beq.n	8005dbc <HAL_UART_IRQHandler+0x2a0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	685b      	ldr	r3, [r3, #4]
 8005d26:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8005d28:	8a3b      	ldrh	r3, [r7, #16]
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	f000 8098 	beq.w	8005e60 <HAL_UART_IRQHandler+0x344>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005d34:	8a3a      	ldrh	r2, [r7, #16]
 8005d36:	429a      	cmp	r2, r3
 8005d38:	f080 8092 	bcs.w	8005e60 <HAL_UART_IRQHandler+0x344>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	8a3a      	ldrh	r2, [r7, #16]
 8005d40:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d46:	699b      	ldr	r3, [r3, #24]
 8005d48:	2b20      	cmp	r3, #32
 8005d4a:	d02b      	beq.n	8005da4 <HAL_UART_IRQHandler+0x288>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	68da      	ldr	r2, [r3, #12]
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005d5a:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	695a      	ldr	r2, [r3, #20]
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f022 0201 	bic.w	r2, r2, #1
 8005d6a:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	695a      	ldr	r2, [r3, #20]
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	681b      	ldr	r3, [r3, #0]
 8005d76:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d7a:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	2220      	movs	r2, #32
 8005d80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	68da      	ldr	r2, [r3, #12]
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	f022 0210 	bic.w	r2, r2, #16
 8005d98:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fd f9bd 	bl	800311e <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	1ad3      	subs	r3, r2, r3
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	4619      	mov	r1, r3
 8005db4:	6878      	ldr	r0, [r7, #4]
 8005db6:	f000 f86d 	bl	8005e94 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005dba:	e051      	b.n	8005e60 <HAL_UART_IRQHandler+0x344>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dc4:	b29b      	uxth	r3, r3
 8005dc6:	1ad3      	subs	r3, r2, r3
 8005dc8:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005dce:	b29b      	uxth	r3, r3
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d047      	beq.n	8005e64 <HAL_UART_IRQHandler+0x348>
          &&(nb_rx_data > 0U) )
 8005dd4:	8a7b      	ldrh	r3, [r7, #18]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d044      	beq.n	8005e64 <HAL_UART_IRQHandler+0x348>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	68da      	ldr	r2, [r3, #12]
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005de8:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	695a      	ldr	r2, [r3, #20]
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	f022 0201 	bic.w	r2, r2, #1
 8005df8:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	2220      	movs	r2, #32
 8005dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	68da      	ldr	r2, [r3, #12]
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	f022 0210 	bic.w	r2, r2, #16
 8005e16:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005e18:	8a7b      	ldrh	r3, [r7, #18]
 8005e1a:	4619      	mov	r1, r3
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 f839 	bl	8005e94 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8005e22:	e01f      	b.n	8005e64 <HAL_UART_IRQHandler+0x348>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d008      	beq.n	8005e40 <HAL_UART_IRQHandler+0x324>
 8005e2e:	6a3b      	ldr	r3, [r7, #32]
 8005e30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e34:	2b00      	cmp	r3, #0
 8005e36:	d003      	beq.n	8005e40 <HAL_UART_IRQHandler+0x324>
  {
    UART_Transmit_IT(huart);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 f8f9 	bl	8006030 <UART_Transmit_IT>
    return;
 8005e3e:	e012      	b.n	8005e66 <HAL_UART_IRQHandler+0x34a>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d00d      	beq.n	8005e66 <HAL_UART_IRQHandler+0x34a>
 8005e4a:	6a3b      	ldr	r3, [r7, #32]
 8005e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d008      	beq.n	8005e66 <HAL_UART_IRQHandler+0x34a>
  {
    UART_EndTransmit_IT(huart);
 8005e54:	6878      	ldr	r0, [r7, #4]
 8005e56:	f000 f93a 	bl	80060ce <UART_EndTransmit_IT>
    return;
 8005e5a:	e004      	b.n	8005e66 <HAL_UART_IRQHandler+0x34a>
    return;
 8005e5c:	bf00      	nop
 8005e5e:	e002      	b.n	8005e66 <HAL_UART_IRQHandler+0x34a>
      return;
 8005e60:	bf00      	nop
 8005e62:	e000      	b.n	8005e66 <HAL_UART_IRQHandler+0x34a>
      return;
 8005e64:	bf00      	nop
  }
}
 8005e66:	3728      	adds	r7, #40	; 0x28
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	08006009 	.word	0x08006009

08005e70 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bc80      	pop	{r7}
 8005e80:	4770      	bx	lr

08005e82 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005e82:	b480      	push	{r7}
 8005e84:	b083      	sub	sp, #12
 8005e86:	af00      	add	r7, sp, #0
 8005e88:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005e8a:	bf00      	nop
 8005e8c:	370c      	adds	r7, #12
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bc80      	pop	{r7}
 8005e92:	4770      	bx	lr

08005e94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005e94:	b480      	push	{r7}
 8005e96:	b083      	sub	sp, #12
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005ea0:	bf00      	nop
 8005ea2:	370c      	adds	r7, #12
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	bc80      	pop	{r7}
 8005ea8:	4770      	bx	lr

08005eaa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8005eaa:	b580      	push	{r7, lr}
 8005eac:	b084      	sub	sp, #16
 8005eae:	af00      	add	r7, sp, #0
 8005eb0:	60f8      	str	r0, [r7, #12]
 8005eb2:	60b9      	str	r1, [r7, #8]
 8005eb4:	603b      	str	r3, [r7, #0]
 8005eb6:	4613      	mov	r3, r2
 8005eb8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005eba:	e02c      	b.n	8005f16 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005ebc:	69bb      	ldr	r3, [r7, #24]
 8005ebe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ec2:	d028      	beq.n	8005f16 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005ec4:	69bb      	ldr	r3, [r7, #24]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d007      	beq.n	8005eda <UART_WaitOnFlagUntilTimeout+0x30>
 8005eca:	f7fd f81b 	bl	8002f04 <HAL_GetTick>
 8005ece:	4602      	mov	r2, r0
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	1ad3      	subs	r3, r2, r3
 8005ed4:	69ba      	ldr	r2, [r7, #24]
 8005ed6:	429a      	cmp	r2, r3
 8005ed8:	d21d      	bcs.n	8005f16 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	68da      	ldr	r2, [r3, #12]
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005ee8:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	695a      	ldr	r2, [r3, #20]
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	f022 0201 	bic.w	r2, r2, #1
 8005ef8:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2220      	movs	r2, #32
 8005efe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	2220      	movs	r2, #32
 8005f06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005f0a:	68fb      	ldr	r3, [r7, #12]
 8005f0c:	2200      	movs	r2, #0
 8005f0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8005f12:	2303      	movs	r3, #3
 8005f14:	e00f      	b.n	8005f36 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	681a      	ldr	r2, [r3, #0]
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	4013      	ands	r3, r2
 8005f20:	68ba      	ldr	r2, [r7, #8]
 8005f22:	429a      	cmp	r2, r3
 8005f24:	bf0c      	ite	eq
 8005f26:	2301      	moveq	r3, #1
 8005f28:	2300      	movne	r3, #0
 8005f2a:	b2db      	uxtb	r3, r3
 8005f2c:	461a      	mov	r2, r3
 8005f2e:	79fb      	ldrb	r3, [r7, #7]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d0c3      	beq.n	8005ebc <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005f34:	2300      	movs	r3, #0
}
 8005f36:	4618      	mov	r0, r3
 8005f38:	3710      	adds	r7, #16
 8005f3a:	46bd      	mov	sp, r7
 8005f3c:	bd80      	pop	{r7, pc}

08005f3e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005f3e:	b480      	push	{r7}
 8005f40:	b085      	sub	sp, #20
 8005f42:	af00      	add	r7, sp, #0
 8005f44:	60f8      	str	r0, [r7, #12]
 8005f46:	60b9      	str	r1, [r7, #8]
 8005f48:	4613      	mov	r3, r2
 8005f4a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	68ba      	ldr	r2, [r7, #8]
 8005f50:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	88fa      	ldrh	r2, [r7, #6]
 8005f56:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	88fa      	ldrh	r2, [r7, #6]
 8005f5c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	2200      	movs	r2, #0
 8005f62:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	2222      	movs	r2, #34	; 0x22
 8005f68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	2200      	movs	r2, #0
 8005f70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68da      	ldr	r2, [r3, #12]
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005f82:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005f84:	68fb      	ldr	r3, [r7, #12]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	695a      	ldr	r2, [r3, #20]
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	f042 0201 	orr.w	r2, r2, #1
 8005f92:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	68da      	ldr	r2, [r3, #12]
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f042 0220 	orr.w	r2, r2, #32
 8005fa2:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005fa4:	2300      	movs	r3, #0
}
 8005fa6:	4618      	mov	r0, r3
 8005fa8:	3714      	adds	r7, #20
 8005faa:	46bd      	mov	sp, r7
 8005fac:	bc80      	pop	{r7}
 8005fae:	4770      	bx	lr

08005fb0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005fb0:	b480      	push	{r7}
 8005fb2:	b083      	sub	sp, #12
 8005fb4:	af00      	add	r7, sp, #0
 8005fb6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	68da      	ldr	r2, [r3, #12]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005fc6:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	695a      	ldr	r2, [r3, #20]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	f022 0201 	bic.w	r2, r2, #1
 8005fd6:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fdc:	2b01      	cmp	r3, #1
 8005fde:	d107      	bne.n	8005ff0 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0210 	bic.w	r2, r2, #16
 8005fee:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2220      	movs	r2, #32
 8005ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005ffe:	bf00      	nop
 8006000:	370c      	adds	r7, #12
 8006002:	46bd      	mov	sp, r7
 8006004:	bc80      	pop	{r7}
 8006006:	4770      	bx	lr

08006008 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b084      	sub	sp, #16
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006014:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	2200      	movs	r2, #0
 800601a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	2200      	movs	r2, #0
 8006020:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006022:	68f8      	ldr	r0, [r7, #12]
 8006024:	f7ff ff2d 	bl	8005e82 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006028:	bf00      	nop
 800602a:	3710      	adds	r7, #16
 800602c:	46bd      	mov	sp, r7
 800602e:	bd80      	pop	{r7, pc}

08006030 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006030:	b480      	push	{r7}
 8006032:	b085      	sub	sp, #20
 8006034:	af00      	add	r7, sp, #0
 8006036:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800603e:	b2db      	uxtb	r3, r3
 8006040:	2b21      	cmp	r3, #33	; 0x21
 8006042:	d13e      	bne.n	80060c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	689b      	ldr	r3, [r3, #8]
 8006048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800604c:	d114      	bne.n	8006078 <UART_Transmit_IT+0x48>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	691b      	ldr	r3, [r3, #16]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d110      	bne.n	8006078 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	6a1b      	ldr	r3, [r3, #32]
 800605a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	881b      	ldrh	r3, [r3, #0]
 8006060:	461a      	mov	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800606a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	6a1b      	ldr	r3, [r3, #32]
 8006070:	1c9a      	adds	r2, r3, #2
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	621a      	str	r2, [r3, #32]
 8006076:	e008      	b.n	800608a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	6a1b      	ldr	r3, [r3, #32]
 800607c:	1c59      	adds	r1, r3, #1
 800607e:	687a      	ldr	r2, [r7, #4]
 8006080:	6211      	str	r1, [r2, #32]
 8006082:	781a      	ldrb	r2, [r3, #0]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800608e:	b29b      	uxth	r3, r3
 8006090:	3b01      	subs	r3, #1
 8006092:	b29b      	uxth	r3, r3
 8006094:	687a      	ldr	r2, [r7, #4]
 8006096:	4619      	mov	r1, r3
 8006098:	84d1      	strh	r1, [r2, #38]	; 0x26
 800609a:	2b00      	cmp	r3, #0
 800609c:	d10f      	bne.n	80060be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	68da      	ldr	r2, [r3, #12]
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	681b      	ldr	r3, [r3, #0]
 80060a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80060ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	68da      	ldr	r2, [r3, #12]
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80060bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	e000      	b.n	80060c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80060c2:	2302      	movs	r3, #2
  }
}
 80060c4:	4618      	mov	r0, r3
 80060c6:	3714      	adds	r7, #20
 80060c8:	46bd      	mov	sp, r7
 80060ca:	bc80      	pop	{r7}
 80060cc:	4770      	bx	lr

080060ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80060ce:	b580      	push	{r7, lr}
 80060d0:	b082      	sub	sp, #8
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	68da      	ldr	r2, [r3, #12]
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	2220      	movs	r2, #32
 80060ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80060ee:	6878      	ldr	r0, [r7, #4]
 80060f0:	f7ff febe 	bl	8005e70 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80060f4:	2300      	movs	r3, #0
}
 80060f6:	4618      	mov	r0, r3
 80060f8:	3708      	adds	r7, #8
 80060fa:	46bd      	mov	sp, r7
 80060fc:	bd80      	pop	{r7, pc}

080060fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80060fe:	b580      	push	{r7, lr}
 8006100:	b086      	sub	sp, #24
 8006102:	af00      	add	r7, sp, #0
 8006104:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800610c:	b2db      	uxtb	r3, r3
 800610e:	2b22      	cmp	r3, #34	; 0x22
 8006110:	f040 8099 	bne.w	8006246 <UART_Receive_IT+0x148>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	689b      	ldr	r3, [r3, #8]
 8006118:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800611c:	d117      	bne.n	800614e <UART_Receive_IT+0x50>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	691b      	ldr	r3, [r3, #16]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d113      	bne.n	800614e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006126:	2300      	movs	r3, #0
 8006128:	617b      	str	r3, [r7, #20]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800612a:	687b      	ldr	r3, [r7, #4]
 800612c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612e:	613b      	str	r3, [r7, #16]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	685b      	ldr	r3, [r3, #4]
 8006136:	b29b      	uxth	r3, r3
 8006138:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800613c:	b29a      	uxth	r2, r3
 800613e:	693b      	ldr	r3, [r7, #16]
 8006140:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006146:	1c9a      	adds	r2, r3, #2
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	629a      	str	r2, [r3, #40]	; 0x28
 800614c:	e026      	b.n	800619c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006152:	617b      	str	r3, [r7, #20]
      pdata16bits  = NULL;
 8006154:	2300      	movs	r3, #0
 8006156:	613b      	str	r3, [r7, #16]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006160:	d007      	beq.n	8006172 <UART_Receive_IT+0x74>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	689b      	ldr	r3, [r3, #8]
 8006166:	2b00      	cmp	r3, #0
 8006168:	d10a      	bne.n	8006180 <UART_Receive_IT+0x82>
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	691b      	ldr	r3, [r3, #16]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d106      	bne.n	8006180 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	b2da      	uxtb	r2, r3
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	701a      	strb	r2, [r3, #0]
 800617e:	e008      	b.n	8006192 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	b2db      	uxtb	r3, r3
 8006188:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800618c:	b2da      	uxtb	r2, r3
 800618e:	697b      	ldr	r3, [r7, #20]
 8006190:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006196:	1c5a      	adds	r2, r3, #1
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80061a0:	b29b      	uxth	r3, r3
 80061a2:	3b01      	subs	r3, #1
 80061a4:	b29b      	uxth	r3, r3
 80061a6:	687a      	ldr	r2, [r7, #4]
 80061a8:	4619      	mov	r1, r3
 80061aa:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d148      	bne.n	8006242 <UART_Receive_IT+0x144>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	68da      	ldr	r2, [r3, #12]
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	f022 0220 	bic.w	r2, r2, #32
 80061be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68da      	ldr	r2, [r3, #12]
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80061ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	695a      	ldr	r2, [r3, #20]
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	681b      	ldr	r3, [r3, #0]
 80061da:	f022 0201 	bic.w	r2, r2, #1
 80061de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2220      	movs	r2, #32
 80061e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ec:	2b01      	cmp	r3, #1
 80061ee:	d123      	bne.n	8006238 <UART_Receive_IT+0x13a>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	2200      	movs	r2, #0
 80061f4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	68da      	ldr	r2, [r3, #12]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	f022 0210 	bic.w	r2, r2, #16
 8006204:	60da      	str	r2, [r3, #12]

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	f003 0310 	and.w	r3, r3, #16
 8006210:	2b10      	cmp	r3, #16
 8006212:	d10a      	bne.n	800622a <UART_Receive_IT+0x12c>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006214:	2300      	movs	r3, #0
 8006216:	60fb      	str	r3, [r7, #12]
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	60fb      	str	r3, [r7, #12]
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	685b      	ldr	r3, [r3, #4]
 8006226:	60fb      	str	r3, [r7, #12]
 8006228:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800622e:	4619      	mov	r1, r3
 8006230:	6878      	ldr	r0, [r7, #4]
 8006232:	f7ff fe2f 	bl	8005e94 <HAL_UARTEx_RxEventCallback>
 8006236:	e002      	b.n	800623e <UART_Receive_IT+0x140>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8006238:	6878      	ldr	r0, [r7, #4]
 800623a:	f7fb fe4d 	bl	8001ed8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800623e:	2300      	movs	r3, #0
 8006240:	e002      	b.n	8006248 <UART_Receive_IT+0x14a>
    }
    return HAL_OK;
 8006242:	2300      	movs	r3, #0
 8006244:	e000      	b.n	8006248 <UART_Receive_IT+0x14a>
  }
  else
  {
    return HAL_BUSY;
 8006246:	2302      	movs	r3, #2
  }
}
 8006248:	4618      	mov	r0, r3
 800624a:	3718      	adds	r7, #24
 800624c:	46bd      	mov	sp, r7
 800624e:	bd80      	pop	{r7, pc}

08006250 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	681b      	ldr	r3, [r3, #0]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	68da      	ldr	r2, [r3, #12]
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	430a      	orrs	r2, r1
 800626c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	689a      	ldr	r2, [r3, #8]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	691b      	ldr	r3, [r3, #16]
 8006276:	431a      	orrs	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	695b      	ldr	r3, [r3, #20]
 800627c:	4313      	orrs	r3, r2
 800627e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68db      	ldr	r3, [r3, #12]
 8006286:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800628a:	f023 030c 	bic.w	r3, r3, #12
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6812      	ldr	r2, [r2, #0]
 8006292:	68b9      	ldr	r1, [r7, #8]
 8006294:	430b      	orrs	r3, r1
 8006296:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	695b      	ldr	r3, [r3, #20]
 800629e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	699a      	ldr	r2, [r3, #24]
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	430a      	orrs	r2, r1
 80062ac:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	4a2c      	ldr	r2, [pc, #176]	; (8006364 <UART_SetConfig+0x114>)
 80062b4:	4293      	cmp	r3, r2
 80062b6:	d103      	bne.n	80062c0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80062b8:	f7fe fe7a 	bl	8004fb0 <HAL_RCC_GetPCLK2Freq>
 80062bc:	60f8      	str	r0, [r7, #12]
 80062be:	e002      	b.n	80062c6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80062c0:	f7fe fe62 	bl	8004f88 <HAL_RCC_GetPCLK1Freq>
 80062c4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062c6:	68fa      	ldr	r2, [r7, #12]
 80062c8:	4613      	mov	r3, r2
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	4413      	add	r3, r2
 80062ce:	009a      	lsls	r2, r3, #2
 80062d0:	441a      	add	r2, r3
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	685b      	ldr	r3, [r3, #4]
 80062d6:	009b      	lsls	r3, r3, #2
 80062d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80062dc:	4a22      	ldr	r2, [pc, #136]	; (8006368 <UART_SetConfig+0x118>)
 80062de:	fba2 2303 	umull	r2, r3, r2, r3
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	0119      	lsls	r1, r3, #4
 80062e6:	68fa      	ldr	r2, [r7, #12]
 80062e8:	4613      	mov	r3, r2
 80062ea:	009b      	lsls	r3, r3, #2
 80062ec:	4413      	add	r3, r2
 80062ee:	009a      	lsls	r2, r3, #2
 80062f0:	441a      	add	r2, r3
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	685b      	ldr	r3, [r3, #4]
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	fbb2 f2f3 	udiv	r2, r2, r3
 80062fc:	4b1a      	ldr	r3, [pc, #104]	; (8006368 <UART_SetConfig+0x118>)
 80062fe:	fba3 0302 	umull	r0, r3, r3, r2
 8006302:	095b      	lsrs	r3, r3, #5
 8006304:	2064      	movs	r0, #100	; 0x64
 8006306:	fb00 f303 	mul.w	r3, r0, r3
 800630a:	1ad3      	subs	r3, r2, r3
 800630c:	011b      	lsls	r3, r3, #4
 800630e:	3332      	adds	r3, #50	; 0x32
 8006310:	4a15      	ldr	r2, [pc, #84]	; (8006368 <UART_SetConfig+0x118>)
 8006312:	fba2 2303 	umull	r2, r3, r2, r3
 8006316:	095b      	lsrs	r3, r3, #5
 8006318:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800631c:	4419      	add	r1, r3
 800631e:	68fa      	ldr	r2, [r7, #12]
 8006320:	4613      	mov	r3, r2
 8006322:	009b      	lsls	r3, r3, #2
 8006324:	4413      	add	r3, r2
 8006326:	009a      	lsls	r2, r3, #2
 8006328:	441a      	add	r2, r3
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	685b      	ldr	r3, [r3, #4]
 800632e:	009b      	lsls	r3, r3, #2
 8006330:	fbb2 f2f3 	udiv	r2, r2, r3
 8006334:	4b0c      	ldr	r3, [pc, #48]	; (8006368 <UART_SetConfig+0x118>)
 8006336:	fba3 0302 	umull	r0, r3, r3, r2
 800633a:	095b      	lsrs	r3, r3, #5
 800633c:	2064      	movs	r0, #100	; 0x64
 800633e:	fb00 f303 	mul.w	r3, r0, r3
 8006342:	1ad3      	subs	r3, r2, r3
 8006344:	011b      	lsls	r3, r3, #4
 8006346:	3332      	adds	r3, #50	; 0x32
 8006348:	4a07      	ldr	r2, [pc, #28]	; (8006368 <UART_SetConfig+0x118>)
 800634a:	fba2 2303 	umull	r2, r3, r2, r3
 800634e:	095b      	lsrs	r3, r3, #5
 8006350:	f003 020f 	and.w	r2, r3, #15
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	440a      	add	r2, r1
 800635a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800635c:	bf00      	nop
 800635e:	3710      	adds	r7, #16
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}
 8006364:	40013800 	.word	0x40013800
 8006368:	51eb851f 	.word	0x51eb851f

0800636c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800636c:	b480      	push	{r7}
 800636e:	b085      	sub	sp, #20
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	4a06      	ldr	r2, [pc, #24]	; (8006394 <vApplicationGetIdleTaskMemory+0x28>)
 800637c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	4a05      	ldr	r2, [pc, #20]	; (8006398 <vApplicationGetIdleTaskMemory+0x2c>)
 8006382:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2280      	movs	r2, #128	; 0x80
 8006388:	601a      	str	r2, [r3, #0]
}
 800638a:	bf00      	nop
 800638c:	3714      	adds	r7, #20
 800638e:	46bd      	mov	sp, r7
 8006390:	bc80      	pop	{r7}
 8006392:	4770      	bx	lr
 8006394:	20000808 	.word	0x20000808
 8006398:	20000864 	.word	0x20000864

0800639c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800639c:	b480      	push	{r7}
 800639e:	b085      	sub	sp, #20
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	60f8      	str	r0, [r7, #12]
 80063a4:	60b9      	str	r1, [r7, #8]
 80063a6:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80063a8:	68fb      	ldr	r3, [r7, #12]
 80063aa:	4a07      	ldr	r2, [pc, #28]	; (80063c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80063ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	4a06      	ldr	r2, [pc, #24]	; (80063cc <vApplicationGetTimerTaskMemory+0x30>)
 80063b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80063ba:	601a      	str	r2, [r3, #0]
}
 80063bc:	bf00      	nop
 80063be:	3714      	adds	r7, #20
 80063c0:	46bd      	mov	sp, r7
 80063c2:	bc80      	pop	{r7}
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	20000a64 	.word	0x20000a64
 80063cc:	20000ac0 	.word	0x20000ac0

080063d0 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 80063d0:	b580      	push	{r7, lr}
 80063d2:	b082      	sub	sp, #8
 80063d4:	af00      	add	r7, sp, #0
	EventGroup_t *pxEventBits;

		/* Allocate the event group. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) );
 80063d6:	2020      	movs	r0, #32
 80063d8:	f002 fca8 	bl	8008d2c <pvPortMalloc>
 80063dc:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00a      	beq.n	80063fa <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	2200      	movs	r2, #0
 80063e8:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	3304      	adds	r3, #4
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 f982 	bl	80066f8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	2200      	movs	r2, #0
 80063f8:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return ( EventGroupHandle_t ) pxEventBits;
 80063fa:	687b      	ldr	r3, [r7, #4]
	}
 80063fc:	4618      	mov	r0, r3
 80063fe:	3708      	adds	r7, #8
 8006400:	46bd      	mov	sp, r7
 8006402:	bd80      	pop	{r7, pc}

08006404 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8006404:	b580      	push	{r7, lr}
 8006406:	b090      	sub	sp, #64	; 0x40
 8006408:	af00      	add	r7, sp, #0
 800640a:	60f8      	str	r0, [r7, #12]
 800640c:	60b9      	str	r1, [r7, #8]
 800640e:	607a      	str	r2, [r7, #4]
 8006410:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 8006412:	68fb      	ldr	r3, [r7, #12]
 8006414:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8006416:	2300      	movs	r3, #0
 8006418:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800641a:	2300      	movs	r3, #0
 800641c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10a      	bne.n	800643a <xEventGroupWaitBits+0x36>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	623b      	str	r3, [r7, #32]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8006436:	bf00      	nop
 8006438:	e7fe      	b.n	8006438 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006440:	2b00      	cmp	r3, #0
 8006442:	d00a      	beq.n	800645a <xEventGroupWaitBits+0x56>
	__asm volatile
 8006444:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006448:	f383 8811 	msr	BASEPRI, r3
 800644c:	f3bf 8f6f 	isb	sy
 8006450:	f3bf 8f4f 	dsb	sy
 8006454:	61fb      	str	r3, [r7, #28]
}
 8006456:	bf00      	nop
 8006458:	e7fe      	b.n	8006458 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d10a      	bne.n	8006476 <xEventGroupWaitBits+0x72>
	__asm volatile
 8006460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006464:	f383 8811 	msr	BASEPRI, r3
 8006468:	f3bf 8f6f 	isb	sy
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	61bb      	str	r3, [r7, #24]
}
 8006472:	bf00      	nop
 8006474:	e7fe      	b.n	8006474 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006476:	f001 fe59 	bl	800812c <xTaskGetSchedulerState>
 800647a:	4603      	mov	r3, r0
 800647c:	2b00      	cmp	r3, #0
 800647e:	d102      	bne.n	8006486 <xEventGroupWaitBits+0x82>
 8006480:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006482:	2b00      	cmp	r3, #0
 8006484:	d101      	bne.n	800648a <xEventGroupWaitBits+0x86>
 8006486:	2301      	movs	r3, #1
 8006488:	e000      	b.n	800648c <xEventGroupWaitBits+0x88>
 800648a:	2300      	movs	r3, #0
 800648c:	2b00      	cmp	r3, #0
 800648e:	d10a      	bne.n	80064a6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 8006490:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006494:	f383 8811 	msr	BASEPRI, r3
 8006498:	f3bf 8f6f 	isb	sy
 800649c:	f3bf 8f4f 	dsb	sy
 80064a0:	617b      	str	r3, [r7, #20]
}
 80064a2:	bf00      	nop
 80064a4:	e7fe      	b.n	80064a4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80064a6:	f001 f9ad 	bl	8007804 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80064aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064ac:	681b      	ldr	r3, [r3, #0]
 80064ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 80064b0:	683a      	ldr	r2, [r7, #0]
 80064b2:	68b9      	ldr	r1, [r7, #8]
 80064b4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80064b6:	f000 f8fe 	bl	80066b6 <prvTestWaitCondition>
 80064ba:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00e      	beq.n	80064e0 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 80064c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064c4:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 80064c6:	2300      	movs	r3, #0
 80064c8:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d028      	beq.n	8006522 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80064d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064d2:	681a      	ldr	r2, [r3, #0]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	43db      	mvns	r3, r3
 80064d8:	401a      	ands	r2, r3
 80064da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064dc:	601a      	str	r2, [r3, #0]
 80064de:	e020      	b.n	8006522 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 80064e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d104      	bne.n	80064f0 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 80064e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064e8:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 80064ea:	2301      	movs	r3, #1
 80064ec:	633b      	str	r3, [r7, #48]	; 0x30
 80064ee:	e018      	b.n	8006522 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d003      	beq.n	80064fe <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 80064f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80064fc:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 80064fe:	683b      	ldr	r3, [r7, #0]
 8006500:	2b00      	cmp	r3, #0
 8006502:	d003      	beq.n	800650c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8006504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006506:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800650a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800650c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800650e:	1d18      	adds	r0, r3, #4
 8006510:	68ba      	ldr	r2, [r7, #8]
 8006512:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006514:	4313      	orrs	r3, r2
 8006516:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006518:	4619      	mov	r1, r3
 800651a:	f001 fb6b 	bl	8007bf4 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800651e:	2300      	movs	r3, #0
 8006520:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8006522:	f001 f97d 	bl	8007820 <xTaskResumeAll>
 8006526:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8006528:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800652a:	2b00      	cmp	r3, #0
 800652c:	d031      	beq.n	8006592 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800652e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006530:	2b00      	cmp	r3, #0
 8006532:	d107      	bne.n	8006544 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8006534:	4b19      	ldr	r3, [pc, #100]	; (800659c <xEventGroupWaitBits+0x198>)
 8006536:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800653a:	601a      	str	r2, [r3, #0]
 800653c:	f3bf 8f4f 	dsb	sy
 8006540:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8006544:	f001 fe7e 	bl	8008244 <uxTaskResetEventItemValue>
 8006548:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800654a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800654c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006550:	2b00      	cmp	r3, #0
 8006552:	d11a      	bne.n	800658a <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 8006554:	f002 faea 	bl	8008b2c <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 8006558:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800655e:	683a      	ldr	r2, [r7, #0]
 8006560:	68b9      	ldr	r1, [r7, #8]
 8006562:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8006564:	f000 f8a7 	bl	80066b6 <prvTestWaitCondition>
 8006568:	4603      	mov	r3, r0
 800656a:	2b00      	cmp	r3, #0
 800656c:	d009      	beq.n	8006582 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d006      	beq.n	8006582 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8006574:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	43db      	mvns	r3, r3
 800657c:	401a      	ands	r2, r3
 800657e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006580:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 8006582:	2301      	movs	r3, #1
 8006584:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8006586:	f002 fb01 	bl	8008b8c <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800658a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800658c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006590:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 8006592:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006594:	4618      	mov	r0, r3
 8006596:	3740      	adds	r7, #64	; 0x40
 8006598:	46bd      	mov	sp, r7
 800659a:	bd80      	pop	{r7, pc}
 800659c:	e000ed04 	.word	0xe000ed04

080065a0 <xEventGroupSetBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b08e      	sub	sp, #56	; 0x38
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
 80065a8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t *pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80065aa:	2300      	movs	r3, #0
 80065ac:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = ( EventGroup_t * ) xEventGroup;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 80065b2:	2300      	movs	r3, #0
 80065b4:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d10a      	bne.n	80065d2 <xEventGroupSetBits+0x32>
	__asm volatile
 80065bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065c0:	f383 8811 	msr	BASEPRI, r3
 80065c4:	f3bf 8f6f 	isb	sy
 80065c8:	f3bf 8f4f 	dsb	sy
 80065cc:	613b      	str	r3, [r7, #16]
}
 80065ce:	bf00      	nop
 80065d0:	e7fe      	b.n	80065d0 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d00a      	beq.n	80065f2 <xEventGroupSetBits+0x52>
	__asm volatile
 80065dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065e0:	f383 8811 	msr	BASEPRI, r3
 80065e4:	f3bf 8f6f 	isb	sy
 80065e8:	f3bf 8f4f 	dsb	sy
 80065ec:	60fb      	str	r3, [r7, #12]
}
 80065ee:	bf00      	nop
 80065f0:	e7fe      	b.n	80065f0 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 80065f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065f4:	3304      	adds	r3, #4
 80065f6:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80065f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80065fa:	3308      	adds	r3, #8
 80065fc:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 80065fe:	f001 f901 	bl	8007804 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8006602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006604:	68db      	ldr	r3, [r3, #12]
 8006606:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8006608:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	683b      	ldr	r3, [r7, #0]
 800660e:	431a      	orrs	r2, r3
 8006610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006612:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8006614:	e03c      	b.n	8006690 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8006616:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006618:	685b      	ldr	r3, [r3, #4]
 800661a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800661c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8006622:	2300      	movs	r3, #0
 8006624:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8006626:	69bb      	ldr	r3, [r7, #24]
 8006628:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800662c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8006634:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8006636:	697b      	ldr	r3, [r7, #20]
 8006638:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d108      	bne.n	8006652 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8006640:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006642:	681a      	ldr	r2, [r3, #0]
 8006644:	69bb      	ldr	r3, [r7, #24]
 8006646:	4013      	ands	r3, r2
 8006648:	2b00      	cmp	r3, #0
 800664a:	d00b      	beq.n	8006664 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800664c:	2301      	movs	r3, #1
 800664e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006650:	e008      	b.n	8006664 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 8006652:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006654:	681a      	ldr	r2, [r3, #0]
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	4013      	ands	r3, r2
 800665a:	69ba      	ldr	r2, [r7, #24]
 800665c:	429a      	cmp	r2, r3
 800665e:	d101      	bne.n	8006664 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 8006660:	2301      	movs	r3, #1
 8006662:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 8006664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006666:	2b00      	cmp	r3, #0
 8006668:	d010      	beq.n	800668c <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800666a:	697b      	ldr	r3, [r7, #20]
 800666c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006670:	2b00      	cmp	r3, #0
 8006672:	d003      	beq.n	800667c <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 8006674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006676:	69bb      	ldr	r3, [r7, #24]
 8006678:	4313      	orrs	r3, r2
 800667a:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006684:	4619      	mov	r1, r3
 8006686:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8006688:	f001 fb80 	bl	8007d8c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800668c:	69fb      	ldr	r3, [r7, #28]
 800668e:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 8006690:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006692:	6a3b      	ldr	r3, [r7, #32]
 8006694:	429a      	cmp	r2, r3
 8006696:	d1be      	bne.n	8006616 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8006698:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800669a:	681a      	ldr	r2, [r3, #0]
 800669c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669e:	43db      	mvns	r3, r3
 80066a0:	401a      	ands	r2, r3
 80066a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066a4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80066a6:	f001 f8bb 	bl	8007820 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80066aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ac:	681b      	ldr	r3, [r3, #0]
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3738      	adds	r7, #56	; 0x38
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear );
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 80066b6:	b480      	push	{r7}
 80066b8:	b087      	sub	sp, #28
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 80066c2:	2300      	movs	r3, #0
 80066c4:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d107      	bne.n	80066dc <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	68bb      	ldr	r3, [r7, #8]
 80066d0:	4013      	ands	r3, r2
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d00a      	beq.n	80066ec <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80066d6:	2301      	movs	r3, #1
 80066d8:	617b      	str	r3, [r7, #20]
 80066da:	e007      	b.n	80066ec <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 80066dc:	68fa      	ldr	r2, [r7, #12]
 80066de:	68bb      	ldr	r3, [r7, #8]
 80066e0:	4013      	ands	r3, r2
 80066e2:	68ba      	ldr	r2, [r7, #8]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	d101      	bne.n	80066ec <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 80066e8:	2301      	movs	r3, #1
 80066ea:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 80066ec:	697b      	ldr	r3, [r7, #20]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	371c      	adds	r7, #28
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bc80      	pop	{r7}
 80066f6:	4770      	bx	lr

080066f8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	f103 0208 	add.w	r2, r3, #8
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	f04f 32ff 	mov.w	r2, #4294967295
 8006710:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	f103 0208 	add.w	r2, r3, #8
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	f103 0208 	add.w	r2, r3, #8
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800672c:	bf00      	nop
 800672e:	370c      	adds	r7, #12
 8006730:	46bd      	mov	sp, r7
 8006732:	bc80      	pop	{r7}
 8006734:	4770      	bx	lr

08006736 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006736:	b480      	push	{r7}
 8006738:	b083      	sub	sp, #12
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	2200      	movs	r2, #0
 8006742:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8006744:	bf00      	nop
 8006746:	370c      	adds	r7, #12
 8006748:	46bd      	mov	sp, r7
 800674a:	bc80      	pop	{r7}
 800674c:	4770      	bx	lr

0800674e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800674e:	b480      	push	{r7}
 8006750:	b085      	sub	sp, #20
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
 8006756:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	68fa      	ldr	r2, [r7, #12]
 8006762:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	689a      	ldr	r2, [r3, #8]
 8006768:	683b      	ldr	r3, [r7, #0]
 800676a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	689b      	ldr	r3, [r3, #8]
 8006770:	683a      	ldr	r2, [r7, #0]
 8006772:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	683a      	ldr	r2, [r7, #0]
 8006778:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	687a      	ldr	r2, [r7, #4]
 800677e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	1c5a      	adds	r2, r3, #1
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	601a      	str	r2, [r3, #0]
}
 800678a:	bf00      	nop
 800678c:	3714      	adds	r7, #20
 800678e:	46bd      	mov	sp, r7
 8006790:	bc80      	pop	{r7}
 8006792:	4770      	bx	lr

08006794 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006794:	b480      	push	{r7}
 8006796:	b085      	sub	sp, #20
 8006798:	af00      	add	r7, sp, #0
 800679a:	6078      	str	r0, [r7, #4]
 800679c:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800679e:	683b      	ldr	r3, [r7, #0]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80067a4:	68bb      	ldr	r3, [r7, #8]
 80067a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80067aa:	d103      	bne.n	80067b4 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	691b      	ldr	r3, [r3, #16]
 80067b0:	60fb      	str	r3, [r7, #12]
 80067b2:	e00c      	b.n	80067ce <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	3308      	adds	r3, #8
 80067b8:	60fb      	str	r3, [r7, #12]
 80067ba:	e002      	b.n	80067c2 <vListInsert+0x2e>
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	685b      	ldr	r3, [r3, #4]
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	68ba      	ldr	r2, [r7, #8]
 80067ca:	429a      	cmp	r2, r3
 80067cc:	d2f6      	bcs.n	80067bc <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	685a      	ldr	r2, [r3, #4]
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	683a      	ldr	r2, [r7, #0]
 80067dc:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68fa      	ldr	r2, [r7, #12]
 80067e2:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	683a      	ldr	r2, [r7, #0]
 80067e8:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
 80067ea:	683b      	ldr	r3, [r7, #0]
 80067ec:	687a      	ldr	r2, [r7, #4]
 80067ee:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	601a      	str	r2, [r3, #0]
}
 80067fa:	bf00      	nop
 80067fc:	3714      	adds	r7, #20
 80067fe:	46bd      	mov	sp, r7
 8006800:	bc80      	pop	{r7}
 8006802:	4770      	bx	lr

08006804 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8006804:	b480      	push	{r7}
 8006806:	b085      	sub	sp, #20
 8006808:	af00      	add	r7, sp, #0
 800680a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	685b      	ldr	r3, [r3, #4]
 8006816:	687a      	ldr	r2, [r7, #4]
 8006818:	6892      	ldr	r2, [r2, #8]
 800681a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	689b      	ldr	r3, [r3, #8]
 8006820:	687a      	ldr	r2, [r7, #4]
 8006822:	6852      	ldr	r2, [r2, #4]
 8006824:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8006826:	68fb      	ldr	r3, [r7, #12]
 8006828:	685b      	ldr	r3, [r3, #4]
 800682a:	687a      	ldr	r2, [r7, #4]
 800682c:	429a      	cmp	r2, r3
 800682e:	d103      	bne.n	8006838 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	689a      	ldr	r2, [r3, #8]
 8006834:	68fb      	ldr	r3, [r7, #12]
 8006836:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	1e5a      	subs	r2, r3, #1
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006848:	68fb      	ldr	r3, [r7, #12]
 800684a:	681b      	ldr	r3, [r3, #0]
}
 800684c:	4618      	mov	r0, r3
 800684e:	3714      	adds	r7, #20
 8006850:	46bd      	mov	sp, r7
 8006852:	bc80      	pop	{r7}
 8006854:	4770      	bx	lr
	...

08006858 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006858:	b580      	push	{r7, lr}
 800685a:	b084      	sub	sp, #16
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d10a      	bne.n	8006882 <xQueueGenericReset+0x2a>
	__asm volatile
 800686c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006870:	f383 8811 	msr	BASEPRI, r3
 8006874:	f3bf 8f6f 	isb	sy
 8006878:	f3bf 8f4f 	dsb	sy
 800687c:	60bb      	str	r3, [r7, #8]
}
 800687e:	bf00      	nop
 8006880:	e7fe      	b.n	8006880 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006882:	f002 f953 	bl	8008b2c <vPortEnterCritical>
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	681a      	ldr	r2, [r3, #0]
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800688e:	68f9      	ldr	r1, [r7, #12]
 8006890:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006892:	fb01 f303 	mul.w	r3, r1, r3
 8006896:	441a      	add	r2, r3
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	605a      	str	r2, [r3, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2200      	movs	r2, #0
 80068a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80068a2:	68fb      	ldr	r3, [r7, #12]
 80068a4:	681a      	ldr	r2, [r3, #0]
 80068a6:	68fb      	ldr	r3, [r7, #12]
 80068a8:	609a      	str	r2, [r3, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681a      	ldr	r2, [r3, #0]
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80068b2:	3b01      	subs	r3, #1
 80068b4:	68f9      	ldr	r1, [r7, #12]
 80068b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80068b8:	fb01 f303 	mul.w	r3, r1, r3
 80068bc:	441a      	add	r2, r3
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80068c2:	68fb      	ldr	r3, [r7, #12]
 80068c4:	22ff      	movs	r2, #255	; 0xff
 80068c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	22ff      	movs	r2, #255	; 0xff
 80068ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80068d2:	683b      	ldr	r3, [r7, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d114      	bne.n	8006902 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d01a      	beq.n	8006916 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	3310      	adds	r3, #16
 80068e4:	4618      	mov	r0, r3
 80068e6:	f001 f9ed 	bl	8007cc4 <xTaskRemoveFromEventList>
 80068ea:	4603      	mov	r3, r0
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d012      	beq.n	8006916 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80068f0:	4b0c      	ldr	r3, [pc, #48]	; (8006924 <xQueueGenericReset+0xcc>)
 80068f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80068f6:	601a      	str	r2, [r3, #0]
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	e009      	b.n	8006916 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	3310      	adds	r3, #16
 8006906:	4618      	mov	r0, r3
 8006908:	f7ff fef6 	bl	80066f8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	3324      	adds	r3, #36	; 0x24
 8006910:	4618      	mov	r0, r3
 8006912:	f7ff fef1 	bl	80066f8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8006916:	f002 f939 	bl	8008b8c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800691a:	2301      	movs	r3, #1
}
 800691c:	4618      	mov	r0, r3
 800691e:	3710      	adds	r7, #16
 8006920:	46bd      	mov	sp, r7
 8006922:	bd80      	pop	{r7, pc}
 8006924:	e000ed04 	.word	0xe000ed04

08006928 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8006928:	b580      	push	{r7, lr}
 800692a:	b08e      	sub	sp, #56	; 0x38
 800692c:	af02      	add	r7, sp, #8
 800692e:	60f8      	str	r0, [r7, #12]
 8006930:	60b9      	str	r1, [r7, #8]
 8006932:	607a      	str	r2, [r7, #4]
 8006934:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d10a      	bne.n	8006952 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800694e:	bf00      	nop
 8006950:	e7fe      	b.n	8006950 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d10a      	bne.n	800696e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006958:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	627b      	str	r3, [r7, #36]	; 0x24
}
 800696a:	bf00      	nop
 800696c:	e7fe      	b.n	800696c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	2b00      	cmp	r3, #0
 8006972:	d002      	beq.n	800697a <xQueueGenericCreateStatic+0x52>
 8006974:	68bb      	ldr	r3, [r7, #8]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d001      	beq.n	800697e <xQueueGenericCreateStatic+0x56>
 800697a:	2301      	movs	r3, #1
 800697c:	e000      	b.n	8006980 <xQueueGenericCreateStatic+0x58>
 800697e:	2300      	movs	r3, #0
 8006980:	2b00      	cmp	r3, #0
 8006982:	d10a      	bne.n	800699a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006984:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006988:	f383 8811 	msr	BASEPRI, r3
 800698c:	f3bf 8f6f 	isb	sy
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	623b      	str	r3, [r7, #32]
}
 8006996:	bf00      	nop
 8006998:	e7fe      	b.n	8006998 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	2b00      	cmp	r3, #0
 800699e:	d102      	bne.n	80069a6 <xQueueGenericCreateStatic+0x7e>
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d101      	bne.n	80069aa <xQueueGenericCreateStatic+0x82>
 80069a6:	2301      	movs	r3, #1
 80069a8:	e000      	b.n	80069ac <xQueueGenericCreateStatic+0x84>
 80069aa:	2300      	movs	r3, #0
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d10a      	bne.n	80069c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80069b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069b4:	f383 8811 	msr	BASEPRI, r3
 80069b8:	f3bf 8f6f 	isb	sy
 80069bc:	f3bf 8f4f 	dsb	sy
 80069c0:	61fb      	str	r3, [r7, #28]
}
 80069c2:	bf00      	nop
 80069c4:	e7fe      	b.n	80069c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80069c6:	2350      	movs	r3, #80	; 0x50
 80069c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	2b50      	cmp	r3, #80	; 0x50
 80069ce:	d00a      	beq.n	80069e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80069d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d4:	f383 8811 	msr	BASEPRI, r3
 80069d8:	f3bf 8f6f 	isb	sy
 80069dc:	f3bf 8f4f 	dsb	sy
 80069e0:	61bb      	str	r3, [r7, #24]
}
 80069e2:	bf00      	nop
 80069e4:	e7fe      	b.n	80069e4 <xQueueGenericCreateStatic+0xbc>
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80069ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00d      	beq.n	8006a0c <xQueueGenericCreateStatic+0xe4>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80069f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80069f8:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80069fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069fe:	9300      	str	r3, [sp, #0]
 8006a00:	4613      	mov	r3, r2
 8006a02:	687a      	ldr	r2, [r7, #4]
 8006a04:	68b9      	ldr	r1, [r7, #8]
 8006a06:	68f8      	ldr	r0, [r7, #12]
 8006a08:	f000 f843 	bl	8006a92 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8006a0e:	4618      	mov	r0, r3
 8006a10:	3730      	adds	r7, #48	; 0x30
 8006a12:	46bd      	mov	sp, r7
 8006a14:	bd80      	pop	{r7, pc}

08006a16 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8006a16:	b580      	push	{r7, lr}
 8006a18:	b08a      	sub	sp, #40	; 0x28
 8006a1a:	af02      	add	r7, sp, #8
 8006a1c:	60f8      	str	r0, [r7, #12]
 8006a1e:	60b9      	str	r1, [r7, #8]
 8006a20:	4613      	mov	r3, r2
 8006a22:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d10a      	bne.n	8006a40 <xQueueGenericCreate+0x2a>
	__asm volatile
 8006a2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a2e:	f383 8811 	msr	BASEPRI, r3
 8006a32:	f3bf 8f6f 	isb	sy
 8006a36:	f3bf 8f4f 	dsb	sy
 8006a3a:	613b      	str	r3, [r7, #16]
}
 8006a3c:	bf00      	nop
 8006a3e:	e7fe      	b.n	8006a3e <xQueueGenericCreate+0x28>

		if( uxItemSize == ( UBaseType_t ) 0 )
 8006a40:	68bb      	ldr	r3, [r7, #8]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d102      	bne.n	8006a4c <xQueueGenericCreate+0x36>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 8006a46:	2300      	movs	r3, #0
 8006a48:	61fb      	str	r3, [r7, #28]
 8006a4a:	e004      	b.n	8006a56 <xQueueGenericCreate+0x40>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	68ba      	ldr	r2, [r7, #8]
 8006a50:	fb02 f303 	mul.w	r3, r2, r3
 8006a54:	61fb      	str	r3, [r7, #28]
		}

		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
 8006a56:	69fb      	ldr	r3, [r7, #28]
 8006a58:	3350      	adds	r3, #80	; 0x50
 8006a5a:	4618      	mov	r0, r3
 8006a5c:	f002 f966 	bl	8008d2c <pvPortMalloc>
 8006a60:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006a62:	69bb      	ldr	r3, [r7, #24]
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d00f      	beq.n	8006a88 <xQueueGenericCreate+0x72>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( ( uint8_t * ) pxNewQueue ) + sizeof( Queue_t );
 8006a68:	69bb      	ldr	r3, [r7, #24]
 8006a6a:	3350      	adds	r3, #80	; 0x50
 8006a6c:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006a6e:	69bb      	ldr	r3, [r7, #24]
 8006a70:	2200      	movs	r2, #0
 8006a72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006a76:	79fa      	ldrb	r2, [r7, #7]
 8006a78:	69bb      	ldr	r3, [r7, #24]
 8006a7a:	9300      	str	r3, [sp, #0]
 8006a7c:	4613      	mov	r3, r2
 8006a7e:	697a      	ldr	r2, [r7, #20]
 8006a80:	68b9      	ldr	r1, [r7, #8]
 8006a82:	68f8      	ldr	r0, [r7, #12]
 8006a84:	f000 f805 	bl	8006a92 <prvInitialiseNewQueue>
		else
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
		}

		return pxNewQueue;
 8006a88:	69bb      	ldr	r3, [r7, #24]
	}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	3720      	adds	r7, #32
 8006a8e:	46bd      	mov	sp, r7
 8006a90:	bd80      	pop	{r7, pc}

08006a92 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8006a92:	b580      	push	{r7, lr}
 8006a94:	b084      	sub	sp, #16
 8006a96:	af00      	add	r7, sp, #0
 8006a98:	60f8      	str	r0, [r7, #12]
 8006a9a:	60b9      	str	r1, [r7, #8]
 8006a9c:	607a      	str	r2, [r7, #4]
 8006a9e:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8006aa0:	68bb      	ldr	r3, [r7, #8]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d103      	bne.n	8006aae <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006aa6:	69bb      	ldr	r3, [r7, #24]
 8006aa8:	69ba      	ldr	r2, [r7, #24]
 8006aaa:	601a      	str	r2, [r3, #0]
 8006aac:	e002      	b.n	8006ab4 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006aae:	69bb      	ldr	r3, [r7, #24]
 8006ab0:	687a      	ldr	r2, [r7, #4]
 8006ab2:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8006ab4:	69bb      	ldr	r3, [r7, #24]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006aba:	69bb      	ldr	r3, [r7, #24]
 8006abc:	68ba      	ldr	r2, [r7, #8]
 8006abe:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8006ac0:	2101      	movs	r1, #1
 8006ac2:	69b8      	ldr	r0, [r7, #24]
 8006ac4:	f7ff fec8 	bl	8006858 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006ac8:	69bb      	ldr	r3, [r7, #24]
 8006aca:	78fa      	ldrb	r2, [r7, #3]
 8006acc:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8006ad0:	bf00      	nop
 8006ad2:	3710      	adds	r7, #16
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}

08006ad8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b08e      	sub	sp, #56	; 0x38
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	60f8      	str	r0, [r7, #12]
 8006ae0:	60b9      	str	r1, [r7, #8]
 8006ae2:	607a      	str	r2, [r7, #4]
 8006ae4:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8006ae6:	2300      	movs	r3, #0
 8006ae8:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d10a      	bne.n	8006b0a <xQueueGenericSend+0x32>
	__asm volatile
 8006af4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006af8:	f383 8811 	msr	BASEPRI, r3
 8006afc:	f3bf 8f6f 	isb	sy
 8006b00:	f3bf 8f4f 	dsb	sy
 8006b04:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b06:	bf00      	nop
 8006b08:	e7fe      	b.n	8006b08 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b0a:	68bb      	ldr	r3, [r7, #8]
 8006b0c:	2b00      	cmp	r3, #0
 8006b0e:	d103      	bne.n	8006b18 <xQueueGenericSend+0x40>
 8006b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d101      	bne.n	8006b1c <xQueueGenericSend+0x44>
 8006b18:	2301      	movs	r3, #1
 8006b1a:	e000      	b.n	8006b1e <xQueueGenericSend+0x46>
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	d10a      	bne.n	8006b38 <xQueueGenericSend+0x60>
	__asm volatile
 8006b22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b26:	f383 8811 	msr	BASEPRI, r3
 8006b2a:	f3bf 8f6f 	isb	sy
 8006b2e:	f3bf 8f4f 	dsb	sy
 8006b32:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b34:	bf00      	nop
 8006b36:	e7fe      	b.n	8006b36 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b38:	683b      	ldr	r3, [r7, #0]
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d103      	bne.n	8006b46 <xQueueGenericSend+0x6e>
 8006b3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d101      	bne.n	8006b4a <xQueueGenericSend+0x72>
 8006b46:	2301      	movs	r3, #1
 8006b48:	e000      	b.n	8006b4c <xQueueGenericSend+0x74>
 8006b4a:	2300      	movs	r3, #0
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d10a      	bne.n	8006b66 <xQueueGenericSend+0x8e>
	__asm volatile
 8006b50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b54:	f383 8811 	msr	BASEPRI, r3
 8006b58:	f3bf 8f6f 	isb	sy
 8006b5c:	f3bf 8f4f 	dsb	sy
 8006b60:	623b      	str	r3, [r7, #32]
}
 8006b62:	bf00      	nop
 8006b64:	e7fe      	b.n	8006b64 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006b66:	f001 fae1 	bl	800812c <xTaskGetSchedulerState>
 8006b6a:	4603      	mov	r3, r0
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d102      	bne.n	8006b76 <xQueueGenericSend+0x9e>
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	d101      	bne.n	8006b7a <xQueueGenericSend+0xa2>
 8006b76:	2301      	movs	r3, #1
 8006b78:	e000      	b.n	8006b7c <xQueueGenericSend+0xa4>
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d10a      	bne.n	8006b96 <xQueueGenericSend+0xbe>
	__asm volatile
 8006b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b84:	f383 8811 	msr	BASEPRI, r3
 8006b88:	f3bf 8f6f 	isb	sy
 8006b8c:	f3bf 8f4f 	dsb	sy
 8006b90:	61fb      	str	r3, [r7, #28]
}
 8006b92:	bf00      	nop
 8006b94:	e7fe      	b.n	8006b94 <xQueueGenericSend+0xbc>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006b96:	f001 ffc9 	bl	8008b2c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006b9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ba0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006ba2:	429a      	cmp	r2, r3
 8006ba4:	d302      	bcc.n	8006bac <xQueueGenericSend+0xd4>
 8006ba6:	683b      	ldr	r3, [r7, #0]
 8006ba8:	2b02      	cmp	r3, #2
 8006baa:	d129      	bne.n	8006c00 <xQueueGenericSend+0x128>
			{
				traceQUEUE_SEND( pxQueue );
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	68b9      	ldr	r1, [r7, #8]
 8006bb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006bb2:	f000 fa07 	bl	8006fc4 <prvCopyDataToQueue>
 8006bb6:	62f8      	str	r0, [r7, #44]	; 0x2c
				}
				#else /* configUSE_QUEUE_SETS */
				{
					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d010      	beq.n	8006be2 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bc0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006bc2:	3324      	adds	r3, #36	; 0x24
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f001 f87d 	bl	8007cc4 <xTaskRemoveFromEventList>
 8006bca:	4603      	mov	r3, r0
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d013      	beq.n	8006bf8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8006bd0:	4b3f      	ldr	r3, [pc, #252]	; (8006cd0 <xQueueGenericSend+0x1f8>)
 8006bd2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bd6:	601a      	str	r2, [r3, #0]
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	f3bf 8f6f 	isb	sy
 8006be0:	e00a      	b.n	8006bf8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8006be2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	d007      	beq.n	8006bf8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8006be8:	4b39      	ldr	r3, [pc, #228]	; (8006cd0 <xQueueGenericSend+0x1f8>)
 8006bea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006bee:	601a      	str	r2, [r3, #0]
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006bf8:	f001 ffc8 	bl	8008b8c <vPortExitCritical>
				return pdPASS;
 8006bfc:	2301      	movs	r3, #1
 8006bfe:	e063      	b.n	8006cc8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d103      	bne.n	8006c0e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006c06:	f001 ffc1 	bl	8008b8c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006c0a:	2300      	movs	r3, #0
 8006c0c:	e05c      	b.n	8006cc8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006c0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d106      	bne.n	8006c22 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006c14:	f107 0314 	add.w	r3, r7, #20
 8006c18:	4618      	mov	r0, r3
 8006c1a:	f001 f919 	bl	8007e50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006c1e:	2301      	movs	r3, #1
 8006c20:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006c22:	f001 ffb3 	bl	8008b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006c26:	f000 fded 	bl	8007804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006c2a:	f001 ff7f 	bl	8008b2c <vPortEnterCritical>
 8006c2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c30:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006c34:	b25b      	sxtb	r3, r3
 8006c36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c3a:	d103      	bne.n	8006c44 <xQueueGenericSend+0x16c>
 8006c3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c3e:	2200      	movs	r2, #0
 8006c40:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006c4a:	b25b      	sxtb	r3, r3
 8006c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c50:	d103      	bne.n	8006c5a <xQueueGenericSend+0x182>
 8006c52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c54:	2200      	movs	r2, #0
 8006c56:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006c5a:	f001 ff97 	bl	8008b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006c5e:	1d3a      	adds	r2, r7, #4
 8006c60:	f107 0314 	add.w	r3, r7, #20
 8006c64:	4611      	mov	r1, r2
 8006c66:	4618      	mov	r0, r3
 8006c68:	f001 f908 	bl	8007e7c <xTaskCheckForTimeOut>
 8006c6c:	4603      	mov	r3, r0
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d124      	bne.n	8006cbc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006c72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c74:	f000 fa9e 	bl	80071b4 <prvIsQueueFull>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d018      	beq.n	8006cb0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006c7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c80:	3310      	adds	r3, #16
 8006c82:	687a      	ldr	r2, [r7, #4]
 8006c84:	4611      	mov	r1, r2
 8006c86:	4618      	mov	r0, r3
 8006c88:	f000 ff90 	bl	8007bac <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006c8c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006c8e:	f000 fa29 	bl	80070e4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006c92:	f000 fdc5 	bl	8007820 <xTaskResumeAll>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f47f af7c 	bne.w	8006b96 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006c9e:	4b0c      	ldr	r3, [pc, #48]	; (8006cd0 <xQueueGenericSend+0x1f8>)
 8006ca0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ca4:	601a      	str	r2, [r3, #0]
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	f3bf 8f6f 	isb	sy
 8006cae:	e772      	b.n	8006b96 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006cb0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cb2:	f000 fa17 	bl	80070e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006cb6:	f000 fdb3 	bl	8007820 <xTaskResumeAll>
 8006cba:	e76c      	b.n	8006b96 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006cbc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006cbe:	f000 fa11 	bl	80070e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006cc2:	f000 fdad 	bl	8007820 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006cc6:	2300      	movs	r3, #0
		}
	}
}
 8006cc8:	4618      	mov	r0, r3
 8006cca:	3738      	adds	r7, #56	; 0x38
 8006ccc:	46bd      	mov	sp, r7
 8006cce:	bd80      	pop	{r7, pc}
 8006cd0:	e000ed04 	.word	0xe000ed04

08006cd4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006cd4:	b580      	push	{r7, lr}
 8006cd6:	b08e      	sub	sp, #56	; 0x38
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8006ce6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10a      	bne.n	8006d02 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006cfe:	bf00      	nop
 8006d00:	e7fe      	b.n	8006d00 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d103      	bne.n	8006d10 <xQueueGenericSendFromISR+0x3c>
 8006d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <xQueueGenericSendFromISR+0x40>
 8006d10:	2301      	movs	r3, #1
 8006d12:	e000      	b.n	8006d16 <xQueueGenericSendFromISR+0x42>
 8006d14:	2300      	movs	r3, #0
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10a      	bne.n	8006d30 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006d1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d1e:	f383 8811 	msr	BASEPRI, r3
 8006d22:	f3bf 8f6f 	isb	sy
 8006d26:	f3bf 8f4f 	dsb	sy
 8006d2a:	623b      	str	r3, [r7, #32]
}
 8006d2c:	bf00      	nop
 8006d2e:	e7fe      	b.n	8006d2e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2b02      	cmp	r3, #2
 8006d34:	d103      	bne.n	8006d3e <xQueueGenericSendFromISR+0x6a>
 8006d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d3a:	2b01      	cmp	r3, #1
 8006d3c:	d101      	bne.n	8006d42 <xQueueGenericSendFromISR+0x6e>
 8006d3e:	2301      	movs	r3, #1
 8006d40:	e000      	b.n	8006d44 <xQueueGenericSendFromISR+0x70>
 8006d42:	2300      	movs	r3, #0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d10a      	bne.n	8006d5e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4c:	f383 8811 	msr	BASEPRI, r3
 8006d50:	f3bf 8f6f 	isb	sy
 8006d54:	f3bf 8f4f 	dsb	sy
 8006d58:	61fb      	str	r3, [r7, #28]
}
 8006d5a:	bf00      	nop
 8006d5c:	e7fe      	b.n	8006d5c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006d5e:	f001 ffa7 	bl	8008cb0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006d62:	f3ef 8211 	mrs	r2, BASEPRI
 8006d66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d6a:	f383 8811 	msr	BASEPRI, r3
 8006d6e:	f3bf 8f6f 	isb	sy
 8006d72:	f3bf 8f4f 	dsb	sy
 8006d76:	61ba      	str	r2, [r7, #24]
 8006d78:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006d7a:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d80:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006d82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d302      	bcc.n	8006d90 <xQueueGenericSendFromISR+0xbc>
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	2b02      	cmp	r3, #2
 8006d8e:	d12c      	bne.n	8006dea <xQueueGenericSendFromISR+0x116>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006d90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006d96:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006d9a:	683a      	ldr	r2, [r7, #0]
 8006d9c:	68b9      	ldr	r1, [r7, #8]
 8006d9e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006da0:	f000 f910 	bl	8006fc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006da4:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8006da8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006dac:	d112      	bne.n	8006dd4 <xQueueGenericSendFromISR+0x100>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006dae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d016      	beq.n	8006de4 <xQueueGenericSendFromISR+0x110>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006db6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006db8:	3324      	adds	r3, #36	; 0x24
 8006dba:	4618      	mov	r0, r3
 8006dbc:	f000 ff82 	bl	8007cc4 <xTaskRemoveFromEventList>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d00e      	beq.n	8006de4 <xQueueGenericSendFromISR+0x110>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d00b      	beq.n	8006de4 <xQueueGenericSendFromISR+0x110>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	601a      	str	r2, [r3, #0]
 8006dd2:	e007      	b.n	8006de4 <xQueueGenericSendFromISR+0x110>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006dd4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006dd8:	3301      	adds	r3, #1
 8006dda:	b2db      	uxtb	r3, r3
 8006ddc:	b25a      	sxtb	r2, r3
 8006dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006de4:	2301      	movs	r3, #1
 8006de6:	637b      	str	r3, [r7, #52]	; 0x34
		{
 8006de8:	e001      	b.n	8006dee <xQueueGenericSendFromISR+0x11a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006dea:	2300      	movs	r3, #0
 8006dec:	637b      	str	r3, [r7, #52]	; 0x34
 8006dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006df0:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006df2:	693b      	ldr	r3, [r7, #16]
 8006df4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006df8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006dfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006dfc:	4618      	mov	r0, r3
 8006dfe:	3738      	adds	r7, #56	; 0x38
 8006e00:	46bd      	mov	sp, r7
 8006e02:	bd80      	pop	{r7, pc}

08006e04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b08c      	sub	sp, #48	; 0x30
 8006e08:	af00      	add	r7, sp, #0
 8006e0a:	60f8      	str	r0, [r7, #12]
 8006e0c:	60b9      	str	r1, [r7, #8]
 8006e0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006e10:	2300      	movs	r3, #0
 8006e12:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10a      	bne.n	8006e34 <xQueueReceive+0x30>
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	623b      	str	r3, [r7, #32]
}
 8006e30:	bf00      	nop
 8006e32:	e7fe      	b.n	8006e32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d103      	bne.n	8006e42 <xQueueReceive+0x3e>
 8006e3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	d101      	bne.n	8006e46 <xQueueReceive+0x42>
 8006e42:	2301      	movs	r3, #1
 8006e44:	e000      	b.n	8006e48 <xQueueReceive+0x44>
 8006e46:	2300      	movs	r3, #0
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d10a      	bne.n	8006e62 <xQueueReceive+0x5e>
	__asm volatile
 8006e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e50:	f383 8811 	msr	BASEPRI, r3
 8006e54:	f3bf 8f6f 	isb	sy
 8006e58:	f3bf 8f4f 	dsb	sy
 8006e5c:	61fb      	str	r3, [r7, #28]
}
 8006e5e:	bf00      	nop
 8006e60:	e7fe      	b.n	8006e60 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006e62:	f001 f963 	bl	800812c <xTaskGetSchedulerState>
 8006e66:	4603      	mov	r3, r0
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d102      	bne.n	8006e72 <xQueueReceive+0x6e>
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d101      	bne.n	8006e76 <xQueueReceive+0x72>
 8006e72:	2301      	movs	r3, #1
 8006e74:	e000      	b.n	8006e78 <xQueueReceive+0x74>
 8006e76:	2300      	movs	r3, #0
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d10a      	bne.n	8006e92 <xQueueReceive+0x8e>
	__asm volatile
 8006e7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e80:	f383 8811 	msr	BASEPRI, r3
 8006e84:	f3bf 8f6f 	isb	sy
 8006e88:	f3bf 8f4f 	dsb	sy
 8006e8c:	61bb      	str	r3, [r7, #24]
}
 8006e8e:	bf00      	nop
 8006e90:	e7fe      	b.n	8006e90 <xQueueReceive+0x8c>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
 8006e92:	f001 fe4b 	bl	8008b2c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006e96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d01f      	beq.n	8006ee2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006ea2:	68b9      	ldr	r1, [r7, #8]
 8006ea4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ea6:	f000 f8f7 	bl	8007098 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006eaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eac:	1e5a      	subs	r2, r3, #1
 8006eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb4:	691b      	ldr	r3, [r3, #16]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d00f      	beq.n	8006eda <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebc:	3310      	adds	r3, #16
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	f000 ff00 	bl	8007cc4 <xTaskRemoveFromEventList>
 8006ec4:	4603      	mov	r3, r0
 8006ec6:	2b00      	cmp	r3, #0
 8006ec8:	d007      	beq.n	8006eda <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006eca:	4b3d      	ldr	r3, [pc, #244]	; (8006fc0 <xQueueReceive+0x1bc>)
 8006ecc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ed0:	601a      	str	r2, [r3, #0]
 8006ed2:	f3bf 8f4f 	dsb	sy
 8006ed6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006eda:	f001 fe57 	bl	8008b8c <vPortExitCritical>
				return pdPASS;
 8006ede:	2301      	movs	r3, #1
 8006ee0:	e069      	b.n	8006fb6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d103      	bne.n	8006ef0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006ee8:	f001 fe50 	bl	8008b8c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006eec:	2300      	movs	r3, #0
 8006eee:	e062      	b.n	8006fb6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d106      	bne.n	8006f04 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ef6:	f107 0310 	add.w	r3, r7, #16
 8006efa:	4618      	mov	r0, r3
 8006efc:	f000 ffa8 	bl	8007e50 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006f00:	2301      	movs	r3, #1
 8006f02:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006f04:	f001 fe42 	bl	8008b8c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006f08:	f000 fc7c 	bl	8007804 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006f0c:	f001 fe0e 	bl	8008b2c <vPortEnterCritical>
 8006f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f12:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006f16:	b25b      	sxtb	r3, r3
 8006f18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1c:	d103      	bne.n	8006f26 <xQueueReceive+0x122>
 8006f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f20:	2200      	movs	r2, #0
 8006f22:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006f26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f28:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006f2c:	b25b      	sxtb	r3, r3
 8006f2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f32:	d103      	bne.n	8006f3c <xQueueReceive+0x138>
 8006f34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f36:	2200      	movs	r2, #0
 8006f38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006f3c:	f001 fe26 	bl	8008b8c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006f40:	1d3a      	adds	r2, r7, #4
 8006f42:	f107 0310 	add.w	r3, r7, #16
 8006f46:	4611      	mov	r1, r2
 8006f48:	4618      	mov	r0, r3
 8006f4a:	f000 ff97 	bl	8007e7c <xTaskCheckForTimeOut>
 8006f4e:	4603      	mov	r3, r0
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d123      	bne.n	8006f9c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006f54:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f56:	f000 f917 	bl	8007188 <prvIsQueueEmpty>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d017      	beq.n	8006f90 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006f60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f62:	3324      	adds	r3, #36	; 0x24
 8006f64:	687a      	ldr	r2, [r7, #4]
 8006f66:	4611      	mov	r1, r2
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 fe1f 	bl	8007bac <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006f6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f70:	f000 f8b8 	bl	80070e4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006f74:	f000 fc54 	bl	8007820 <xTaskResumeAll>
 8006f78:	4603      	mov	r3, r0
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d189      	bne.n	8006e92 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006f7e:	4b10      	ldr	r3, [pc, #64]	; (8006fc0 <xQueueReceive+0x1bc>)
 8006f80:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f84:	601a      	str	r2, [r3, #0]
 8006f86:	f3bf 8f4f 	dsb	sy
 8006f8a:	f3bf 8f6f 	isb	sy
 8006f8e:	e780      	b.n	8006e92 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006f90:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f92:	f000 f8a7 	bl	80070e4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006f96:	f000 fc43 	bl	8007820 <xTaskResumeAll>
 8006f9a:	e77a      	b.n	8006e92 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006f9c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f9e:	f000 f8a1 	bl	80070e4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006fa2:	f000 fc3d 	bl	8007820 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006fa6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006fa8:	f000 f8ee 	bl	8007188 <prvIsQueueEmpty>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	f43f af6f 	beq.w	8006e92 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006fb4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
}
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	3730      	adds	r7, #48	; 0x30
 8006fba:	46bd      	mov	sp, r7
 8006fbc:	bd80      	pop	{r7, pc}
 8006fbe:	bf00      	nop
 8006fc0:	e000ed04 	.word	0xe000ed04

08006fc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006fc4:	b580      	push	{r7, lr}
 8006fc6:	b086      	sub	sp, #24
 8006fc8:	af00      	add	r7, sp, #0
 8006fca:	60f8      	str	r0, [r7, #12]
 8006fcc:	60b9      	str	r1, [r7, #8]
 8006fce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006fd0:	2300      	movs	r3, #0
 8006fd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006fd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006fde:	2b00      	cmp	r3, #0
 8006fe0:	d10d      	bne.n	8006ffe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d14d      	bne.n	8007086 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	4618      	mov	r0, r3
 8006ff0:	f001 f8ba 	bl	8008168 <xTaskPriorityDisinherit>
 8006ff4:	6178      	str	r0, [r7, #20]
				pxQueue->pxMutexHolder = NULL;
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	2200      	movs	r2, #0
 8006ffa:	605a      	str	r2, [r3, #4]
 8006ffc:	e043      	b.n	8007086 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d119      	bne.n	8007038 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	6898      	ldr	r0, [r3, #8]
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800700c:	461a      	mov	r2, r3
 800700e:	68b9      	ldr	r1, [r7, #8]
 8007010:	f002 f8a2 	bl	8009158 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	689a      	ldr	r2, [r3, #8]
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800701c:	441a      	add	r2, r3
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	609a      	str	r2, [r3, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	689a      	ldr	r2, [r3, #8]
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	429a      	cmp	r2, r3
 800702c:	d32b      	bcc.n	8007086 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681a      	ldr	r2, [r3, #0]
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	609a      	str	r2, [r3, #8]
 8007036:	e026      	b.n	8007086 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	68d8      	ldr	r0, [r3, #12]
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007040:	461a      	mov	r2, r3
 8007042:	68b9      	ldr	r1, [r7, #8]
 8007044:	f002 f888 	bl	8009158 <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	68da      	ldr	r2, [r3, #12]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007050:	425b      	negs	r3, r3
 8007052:	441a      	add	r2, r3
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	68da      	ldr	r2, [r3, #12]
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	429a      	cmp	r2, r3
 8007062:	d207      	bcs.n	8007074 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	685a      	ldr	r2, [r3, #4]
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800706c:	425b      	negs	r3, r3
 800706e:	441a      	add	r2, r3
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	2b02      	cmp	r3, #2
 8007078:	d105      	bne.n	8007086 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800707a:	693b      	ldr	r3, [r7, #16]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d002      	beq.n	8007086 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8007080:	693b      	ldr	r3, [r7, #16]
 8007082:	3b01      	subs	r3, #1
 8007084:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8007086:	693b      	ldr	r3, [r7, #16]
 8007088:	1c5a      	adds	r2, r3, #1
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800708e:	697b      	ldr	r3, [r7, #20]
}
 8007090:	4618      	mov	r0, r3
 8007092:	3718      	adds	r7, #24
 8007094:	46bd      	mov	sp, r7
 8007096:	bd80      	pop	{r7, pc}

08007098 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8007098:	b580      	push	{r7, lr}
 800709a:	b082      	sub	sp, #8
 800709c:	af00      	add	r7, sp, #0
 800709e:	6078      	str	r0, [r7, #4]
 80070a0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070a6:	2b00      	cmp	r3, #0
 80070a8:	d018      	beq.n	80070dc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	68da      	ldr	r2, [r3, #12]
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070b2:	441a      	add	r2, r3
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	68da      	ldr	r2, [r3, #12]
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	685b      	ldr	r3, [r3, #4]
 80070c0:	429a      	cmp	r2, r3
 80070c2:	d303      	bcc.n	80070cc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681a      	ldr	r2, [r3, #0]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	68d9      	ldr	r1, [r3, #12]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80070d4:	461a      	mov	r2, r3
 80070d6:	6838      	ldr	r0, [r7, #0]
 80070d8:	f002 f83e 	bl	8009158 <memcpy>
	}
}
 80070dc:	bf00      	nop
 80070de:	3708      	adds	r7, #8
 80070e0:	46bd      	mov	sp, r7
 80070e2:	bd80      	pop	{r7, pc}

080070e4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b084      	sub	sp, #16
 80070e8:	af00      	add	r7, sp, #0
 80070ea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80070ec:	f001 fd1e 	bl	8008b2c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80070f6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80070f8:	e011      	b.n	800711e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070fe:	2b00      	cmp	r3, #0
 8007100:	d012      	beq.n	8007128 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	3324      	adds	r3, #36	; 0x24
 8007106:	4618      	mov	r0, r3
 8007108:	f000 fddc 	bl	8007cc4 <xTaskRemoveFromEventList>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d001      	beq.n	8007116 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007112:	f000 ff25 	bl	8007f60 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007116:	7bfb      	ldrb	r3, [r7, #15]
 8007118:	3b01      	subs	r3, #1
 800711a:	b2db      	uxtb	r3, r3
 800711c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800711e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007122:	2b00      	cmp	r3, #0
 8007124:	dce9      	bgt.n	80070fa <prvUnlockQueue+0x16>
 8007126:	e000      	b.n	800712a <prvUnlockQueue+0x46>
					break;
 8007128:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	22ff      	movs	r2, #255	; 0xff
 800712e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007132:	f001 fd2b 	bl	8008b8c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007136:	f001 fcf9 	bl	8008b2c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007140:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007142:	e011      	b.n	8007168 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	691b      	ldr	r3, [r3, #16]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d012      	beq.n	8007172 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	3310      	adds	r3, #16
 8007150:	4618      	mov	r0, r3
 8007152:	f000 fdb7 	bl	8007cc4 <xTaskRemoveFromEventList>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d001      	beq.n	8007160 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800715c:	f000 ff00 	bl	8007f60 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007160:	7bbb      	ldrb	r3, [r7, #14]
 8007162:	3b01      	subs	r3, #1
 8007164:	b2db      	uxtb	r3, r3
 8007166:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007168:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800716c:	2b00      	cmp	r3, #0
 800716e:	dce9      	bgt.n	8007144 <prvUnlockQueue+0x60>
 8007170:	e000      	b.n	8007174 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8007172:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	22ff      	movs	r2, #255	; 0xff
 8007178:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800717c:	f001 fd06 	bl	8008b8c <vPortExitCritical>
}
 8007180:	bf00      	nop
 8007182:	3710      	adds	r7, #16
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b084      	sub	sp, #16
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8007190:	f001 fccc 	bl	8008b2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007198:	2b00      	cmp	r3, #0
 800719a:	d102      	bne.n	80071a2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800719c:	2301      	movs	r3, #1
 800719e:	60fb      	str	r3, [r7, #12]
 80071a0:	e001      	b.n	80071a6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80071a2:	2300      	movs	r3, #0
 80071a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071a6:	f001 fcf1 	bl	8008b8c <vPortExitCritical>

	return xReturn;
 80071aa:	68fb      	ldr	r3, [r7, #12]
}
 80071ac:	4618      	mov	r0, r3
 80071ae:	3710      	adds	r7, #16
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b084      	sub	sp, #16
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80071bc:	f001 fcb6 	bl	8008b2c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c8:	429a      	cmp	r2, r3
 80071ca:	d102      	bne.n	80071d2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80071cc:	2301      	movs	r3, #1
 80071ce:	60fb      	str	r3, [r7, #12]
 80071d0:	e001      	b.n	80071d6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80071d2:	2300      	movs	r3, #0
 80071d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80071d6:	f001 fcd9 	bl	8008b8c <vPortExitCritical>

	return xReturn;
 80071da:	68fb      	ldr	r3, [r7, #12]
}
 80071dc:	4618      	mov	r0, r3
 80071de:	3710      	adds	r7, #16
 80071e0:	46bd      	mov	sp, r7
 80071e2:	bd80      	pop	{r7, pc}

080071e4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80071e4:	b480      	push	{r7}
 80071e6:	b085      	sub	sp, #20
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
 80071ec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80071ee:	2300      	movs	r3, #0
 80071f0:	60fb      	str	r3, [r7, #12]
 80071f2:	e014      	b.n	800721e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80071f4:	4a0e      	ldr	r2, [pc, #56]	; (8007230 <vQueueAddToRegistry+0x4c>)
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d10b      	bne.n	8007218 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007200:	490b      	ldr	r1, [pc, #44]	; (8007230 <vQueueAddToRegistry+0x4c>)
 8007202:	68fb      	ldr	r3, [r7, #12]
 8007204:	683a      	ldr	r2, [r7, #0]
 8007206:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800720a:	4a09      	ldr	r2, [pc, #36]	; (8007230 <vQueueAddToRegistry+0x4c>)
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	00db      	lsls	r3, r3, #3
 8007210:	4413      	add	r3, r2
 8007212:	687a      	ldr	r2, [r7, #4]
 8007214:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8007216:	e006      	b.n	8007226 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	3301      	adds	r3, #1
 800721c:	60fb      	str	r3, [r7, #12]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2b07      	cmp	r3, #7
 8007222:	d9e7      	bls.n	80071f4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007224:	bf00      	nop
 8007226:	bf00      	nop
 8007228:	3714      	adds	r7, #20
 800722a:	46bd      	mov	sp, r7
 800722c:	bc80      	pop	{r7}
 800722e:	4770      	bx	lr
 8007230:	20000ec0 	.word	0x20000ec0

08007234 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007234:	b580      	push	{r7, lr}
 8007236:	b086      	sub	sp, #24
 8007238:	af00      	add	r7, sp, #0
 800723a:	60f8      	str	r0, [r7, #12]
 800723c:	60b9      	str	r1, [r7, #8]
 800723e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = ( Queue_t * ) xQueue;
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8007244:	f001 fc72 	bl	8008b2c <vPortEnterCritical>
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800724e:	b25b      	sxtb	r3, r3
 8007250:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007254:	d103      	bne.n	800725e <vQueueWaitForMessageRestricted+0x2a>
 8007256:	697b      	ldr	r3, [r7, #20]
 8007258:	2200      	movs	r2, #0
 800725a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800725e:	697b      	ldr	r3, [r7, #20]
 8007260:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007264:	b25b      	sxtb	r3, r3
 8007266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800726a:	d103      	bne.n	8007274 <vQueueWaitForMessageRestricted+0x40>
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	2200      	movs	r2, #0
 8007270:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007274:	f001 fc8a 	bl	8008b8c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007278:	697b      	ldr	r3, [r7, #20]
 800727a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800727c:	2b00      	cmp	r3, #0
 800727e:	d106      	bne.n	800728e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	3324      	adds	r3, #36	; 0x24
 8007284:	687a      	ldr	r2, [r7, #4]
 8007286:	68b9      	ldr	r1, [r7, #8]
 8007288:	4618      	mov	r0, r3
 800728a:	f000 fcef 	bl	8007c6c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800728e:	6978      	ldr	r0, [r7, #20]
 8007290:	f7ff ff28 	bl	80070e4 <prvUnlockQueue>
	}
 8007294:	bf00      	nop
 8007296:	3718      	adds	r7, #24
 8007298:	46bd      	mov	sp, r7
 800729a:	bd80      	pop	{r7, pc}

0800729c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800729c:	b580      	push	{r7, lr}
 800729e:	b08e      	sub	sp, #56	; 0x38
 80072a0:	af04      	add	r7, sp, #16
 80072a2:	60f8      	str	r0, [r7, #12]
 80072a4:	60b9      	str	r1, [r7, #8]
 80072a6:	607a      	str	r2, [r7, #4]
 80072a8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80072aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d10a      	bne.n	80072c6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80072b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b4:	f383 8811 	msr	BASEPRI, r3
 80072b8:	f3bf 8f6f 	isb	sy
 80072bc:	f3bf 8f4f 	dsb	sy
 80072c0:	623b      	str	r3, [r7, #32]
}
 80072c2:	bf00      	nop
 80072c4:	e7fe      	b.n	80072c4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80072c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d10a      	bne.n	80072e2 <xTaskCreateStatic+0x46>
	__asm volatile
 80072cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072d0:	f383 8811 	msr	BASEPRI, r3
 80072d4:	f3bf 8f6f 	isb	sy
 80072d8:	f3bf 8f4f 	dsb	sy
 80072dc:	61fb      	str	r3, [r7, #28]
}
 80072de:	bf00      	nop
 80072e0:	e7fe      	b.n	80072e0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80072e2:	235c      	movs	r3, #92	; 0x5c
 80072e4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80072e6:	693b      	ldr	r3, [r7, #16]
 80072e8:	2b5c      	cmp	r3, #92	; 0x5c
 80072ea:	d00a      	beq.n	8007302 <xTaskCreateStatic+0x66>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	61bb      	str	r3, [r7, #24]
}
 80072fe:	bf00      	nop
 8007300:	e7fe      	b.n	8007300 <xTaskCreateStatic+0x64>
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007304:	2b00      	cmp	r3, #0
 8007306:	d01e      	beq.n	8007346 <xTaskCreateStatic+0xaa>
 8007308:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800730a:	2b00      	cmp	r3, #0
 800730c:	d01b      	beq.n	8007346 <xTaskCreateStatic+0xaa>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800730e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007310:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8007312:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007314:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007316:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8007318:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800731a:	2202      	movs	r2, #2
 800731c:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8007320:	2300      	movs	r3, #0
 8007322:	9303      	str	r3, [sp, #12]
 8007324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007326:	9302      	str	r3, [sp, #8]
 8007328:	f107 0314 	add.w	r3, r7, #20
 800732c:	9301      	str	r3, [sp, #4]
 800732e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007330:	9300      	str	r3, [sp, #0]
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	687a      	ldr	r2, [r7, #4]
 8007336:	68b9      	ldr	r1, [r7, #8]
 8007338:	68f8      	ldr	r0, [r7, #12]
 800733a:	f000 f850 	bl	80073de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800733e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8007340:	f000 f8d8 	bl	80074f4 <prvAddNewTaskToReadyList>
 8007344:	e001      	b.n	800734a <xTaskCreateStatic+0xae>
		}
		else
		{
			xReturn = NULL;
 8007346:	2300      	movs	r3, #0
 8007348:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800734a:	697b      	ldr	r3, [r7, #20]
	}
 800734c:	4618      	mov	r0, r3
 800734e:	3728      	adds	r7, #40	; 0x28
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8007354:	b580      	push	{r7, lr}
 8007356:	b08c      	sub	sp, #48	; 0x30
 8007358:	af04      	add	r7, sp, #16
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	603b      	str	r3, [r7, #0]
 8007360:	4613      	mov	r3, r2
 8007362:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007364:	88fb      	ldrh	r3, [r7, #6]
 8007366:	009b      	lsls	r3, r3, #2
 8007368:	4618      	mov	r0, r3
 800736a:	f001 fcdf 	bl	8008d2c <pvPortMalloc>
 800736e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8007370:	697b      	ldr	r3, [r7, #20]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d00e      	beq.n	8007394 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
 8007376:	205c      	movs	r0, #92	; 0x5c
 8007378:	f001 fcd8 	bl	8008d2c <pvPortMalloc>
 800737c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800737e:	69fb      	ldr	r3, [r7, #28]
 8007380:	2b00      	cmp	r3, #0
 8007382:	d003      	beq.n	800738c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007384:	69fb      	ldr	r3, [r7, #28]
 8007386:	697a      	ldr	r2, [r7, #20]
 8007388:	631a      	str	r2, [r3, #48]	; 0x30
 800738a:	e005      	b.n	8007398 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800738c:	6978      	ldr	r0, [r7, #20]
 800738e:	f001 fd91 	bl	8008eb4 <vPortFree>
 8007392:	e001      	b.n	8007398 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007394:	2300      	movs	r3, #0
 8007396:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007398:	69fb      	ldr	r3, [r7, #28]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d017      	beq.n	80073ce <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800739e:	69fb      	ldr	r3, [r7, #28]
 80073a0:	2200      	movs	r2, #0
 80073a2:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80073a6:	88fa      	ldrh	r2, [r7, #6]
 80073a8:	2300      	movs	r3, #0
 80073aa:	9303      	str	r3, [sp, #12]
 80073ac:	69fb      	ldr	r3, [r7, #28]
 80073ae:	9302      	str	r3, [sp, #8]
 80073b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80073b2:	9301      	str	r3, [sp, #4]
 80073b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073b6:	9300      	str	r3, [sp, #0]
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	68b9      	ldr	r1, [r7, #8]
 80073bc:	68f8      	ldr	r0, [r7, #12]
 80073be:	f000 f80e 	bl	80073de <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80073c2:	69f8      	ldr	r0, [r7, #28]
 80073c4:	f000 f896 	bl	80074f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80073c8:	2301      	movs	r3, #1
 80073ca:	61bb      	str	r3, [r7, #24]
 80073cc:	e002      	b.n	80073d4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80073ce:	f04f 33ff 	mov.w	r3, #4294967295
 80073d2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80073d4:	69bb      	ldr	r3, [r7, #24]
	}
 80073d6:	4618      	mov	r0, r3
 80073d8:	3720      	adds	r7, #32
 80073da:	46bd      	mov	sp, r7
 80073dc:	bd80      	pop	{r7, pc}

080073de <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b088      	sub	sp, #32
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	60f8      	str	r0, [r7, #12]
 80073e6:	60b9      	str	r1, [r7, #8]
 80073e8:	607a      	str	r2, [r7, #4]
 80073ea:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80073ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073ee:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	009b      	lsls	r3, r3, #2
 80073f4:	461a      	mov	r2, r3
 80073f6:	21a5      	movs	r1, #165	; 0xa5
 80073f8:	f001 febc 	bl	8009174 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
 80073fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073fe:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007406:	3b01      	subs	r3, #1
 8007408:	009b      	lsls	r3, r3, #2
 800740a:	4413      	add	r3, r2
 800740c:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
 800740e:	69bb      	ldr	r3, [r7, #24]
 8007410:	f023 0307 	bic.w	r3, r3, #7
 8007414:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8007416:	69bb      	ldr	r3, [r7, #24]
 8007418:	f003 0307 	and.w	r3, r3, #7
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00a      	beq.n	8007436 <prvInitialiseNewTask+0x58>
	__asm volatile
 8007420:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007424:	f383 8811 	msr	BASEPRI, r3
 8007428:	f3bf 8f6f 	isb	sy
 800742c:	f3bf 8f4f 	dsb	sy
 8007430:	617b      	str	r3, [r7, #20]
}
 8007432:	bf00      	nop
 8007434:	e7fe      	b.n	8007434 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8007436:	2300      	movs	r3, #0
 8007438:	61fb      	str	r3, [r7, #28]
 800743a:	e012      	b.n	8007462 <prvInitialiseNewTask+0x84>
	{
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800743c:	68ba      	ldr	r2, [r7, #8]
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	4413      	add	r3, r2
 8007442:	7819      	ldrb	r1, [r3, #0]
 8007444:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007446:	69fb      	ldr	r3, [r7, #28]
 8007448:	4413      	add	r3, r2
 800744a:	3334      	adds	r3, #52	; 0x34
 800744c:	460a      	mov	r2, r1
 800744e:	701a      	strb	r2, [r3, #0]

		/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
		configMAX_TASK_NAME_LEN characters just in case the memory after the
		string is not accessible (extremely unlikely). */
		if( pcName[ x ] == 0x00 )
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	69fb      	ldr	r3, [r7, #28]
 8007454:	4413      	add	r3, r2
 8007456:	781b      	ldrb	r3, [r3, #0]
 8007458:	2b00      	cmp	r3, #0
 800745a:	d006      	beq.n	800746a <prvInitialiseNewTask+0x8c>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800745c:	69fb      	ldr	r3, [r7, #28]
 800745e:	3301      	adds	r3, #1
 8007460:	61fb      	str	r3, [r7, #28]
 8007462:	69fb      	ldr	r3, [r7, #28]
 8007464:	2b0f      	cmp	r3, #15
 8007466:	d9e9      	bls.n	800743c <prvInitialiseNewTask+0x5e>
 8007468:	e000      	b.n	800746c <prvInitialiseNewTask+0x8e>
		{
			break;
 800746a:	bf00      	nop
		}
	}

	/* Ensure the name string is terminated in the case that the string length
	was greater or equal to configMAX_TASK_NAME_LEN. */
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800746c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800746e:	2200      	movs	r2, #0
 8007470:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007474:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007476:	2b37      	cmp	r3, #55	; 0x37
 8007478:	d901      	bls.n	800747e <prvInitialiseNewTask+0xa0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800747a:	2337      	movs	r3, #55	; 0x37
 800747c:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800747e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007480:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007482:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007484:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007486:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007488:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800748a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800748c:	2200      	movs	r2, #0
 800748e:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8007490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007492:	3304      	adds	r3, #4
 8007494:	4618      	mov	r0, r3
 8007496:	f7ff f94e 	bl	8006736 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800749a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800749c:	3318      	adds	r3, #24
 800749e:	4618      	mov	r0, r3
 80074a0:	f7ff f949 	bl	8006736 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80074a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074a6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074a8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80074aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80074ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80074b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80074b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074b8:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80074ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074bc:	2200      	movs	r2, #0
 80074be:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80074c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	}
	#endif

	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		pxNewTCB->ucDelayAborted = pdFALSE;
 80074c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074ca:	2200      	movs	r2, #0
 80074cc:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
	}
	#else /* portUSING_MPU_WRAPPERS */
	{
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80074d0:	683a      	ldr	r2, [r7, #0]
 80074d2:	68f9      	ldr	r1, [r7, #12]
 80074d4:	69b8      	ldr	r0, [r7, #24]
 80074d6:	f001 fa39 	bl	800894c <pxPortInitialiseStack>
 80074da:	4602      	mov	r2, r0
 80074dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80074de:	601a      	str	r2, [r3, #0]
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( ( void * ) pxCreatedTask != NULL )
 80074e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d002      	beq.n	80074ec <prvInitialiseNewTask+0x10e>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80074e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80074e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80074ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80074ec:	bf00      	nop
 80074ee:	3720      	adds	r7, #32
 80074f0:	46bd      	mov	sp, r7
 80074f2:	bd80      	pop	{r7, pc}

080074f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80074f4:	b580      	push	{r7, lr}
 80074f6:	b082      	sub	sp, #8
 80074f8:	af00      	add	r7, sp, #0
 80074fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80074fc:	f001 fb16 	bl	8008b2c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8007500:	4b2d      	ldr	r3, [pc, #180]	; (80075b8 <prvAddNewTaskToReadyList+0xc4>)
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	3301      	adds	r3, #1
 8007506:	4a2c      	ldr	r2, [pc, #176]	; (80075b8 <prvAddNewTaskToReadyList+0xc4>)
 8007508:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800750a:	4b2c      	ldr	r3, [pc, #176]	; (80075bc <prvAddNewTaskToReadyList+0xc8>)
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	2b00      	cmp	r3, #0
 8007510:	d109      	bne.n	8007526 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8007512:	4a2a      	ldr	r2, [pc, #168]	; (80075bc <prvAddNewTaskToReadyList+0xc8>)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8007518:	4b27      	ldr	r3, [pc, #156]	; (80075b8 <prvAddNewTaskToReadyList+0xc4>)
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	2b01      	cmp	r3, #1
 800751e:	d110      	bne.n	8007542 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8007520:	f000 fd42 	bl	8007fa8 <prvInitialiseTaskLists>
 8007524:	e00d      	b.n	8007542 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8007526:	4b26      	ldr	r3, [pc, #152]	; (80075c0 <prvAddNewTaskToReadyList+0xcc>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2b00      	cmp	r3, #0
 800752c:	d109      	bne.n	8007542 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800752e:	4b23      	ldr	r3, [pc, #140]	; (80075bc <prvAddNewTaskToReadyList+0xc8>)
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007538:	429a      	cmp	r2, r3
 800753a:	d802      	bhi.n	8007542 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800753c:	4a1f      	ldr	r2, [pc, #124]	; (80075bc <prvAddNewTaskToReadyList+0xc8>)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007542:	4b20      	ldr	r3, [pc, #128]	; (80075c4 <prvAddNewTaskToReadyList+0xd0>)
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	3301      	adds	r3, #1
 8007548:	4a1e      	ldr	r2, [pc, #120]	; (80075c4 <prvAddNewTaskToReadyList+0xd0>)
 800754a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800754c:	4b1d      	ldr	r3, [pc, #116]	; (80075c4 <prvAddNewTaskToReadyList+0xd0>)
 800754e:	681a      	ldr	r2, [r3, #0]
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007554:	687b      	ldr	r3, [r7, #4]
 8007556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007558:	4b1b      	ldr	r3, [pc, #108]	; (80075c8 <prvAddNewTaskToReadyList+0xd4>)
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	429a      	cmp	r2, r3
 800755e:	d903      	bls.n	8007568 <prvAddNewTaskToReadyList+0x74>
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007564:	4a18      	ldr	r2, [pc, #96]	; (80075c8 <prvAddNewTaskToReadyList+0xd4>)
 8007566:	6013      	str	r3, [r2, #0]
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800756c:	4613      	mov	r3, r2
 800756e:	009b      	lsls	r3, r3, #2
 8007570:	4413      	add	r3, r2
 8007572:	009b      	lsls	r3, r3, #2
 8007574:	4a15      	ldr	r2, [pc, #84]	; (80075cc <prvAddNewTaskToReadyList+0xd8>)
 8007576:	441a      	add	r2, r3
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	3304      	adds	r3, #4
 800757c:	4619      	mov	r1, r3
 800757e:	4610      	mov	r0, r2
 8007580:	f7ff f8e5 	bl	800674e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007584:	f001 fb02 	bl	8008b8c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8007588:	4b0d      	ldr	r3, [pc, #52]	; (80075c0 <prvAddNewTaskToReadyList+0xcc>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	2b00      	cmp	r3, #0
 800758e:	d00e      	beq.n	80075ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007590:	4b0a      	ldr	r3, [pc, #40]	; (80075bc <prvAddNewTaskToReadyList+0xc8>)
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800759a:	429a      	cmp	r2, r3
 800759c:	d207      	bcs.n	80075ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800759e:	4b0c      	ldr	r3, [pc, #48]	; (80075d0 <prvAddNewTaskToReadyList+0xdc>)
 80075a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80075a4:	601a      	str	r2, [r3, #0]
 80075a6:	f3bf 8f4f 	dsb	sy
 80075aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80075ae:	bf00      	nop
 80075b0:	3708      	adds	r7, #8
 80075b2:	46bd      	mov	sp, r7
 80075b4:	bd80      	pop	{r7, pc}
 80075b6:	bf00      	nop
 80075b8:	200013d4 	.word	0x200013d4
 80075bc:	20000f00 	.word	0x20000f00
 80075c0:	200013e0 	.word	0x200013e0
 80075c4:	200013f0 	.word	0x200013f0
 80075c8:	200013dc 	.word	0x200013dc
 80075cc:	20000f04 	.word	0x20000f04
 80075d0:	e000ed04 	.word	0xe000ed04

080075d4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b08a      	sub	sp, #40	; 0x28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 80075de:	2300      	movs	r3, #0
 80075e0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	d10a      	bne.n	80075fe <vTaskDelayUntil+0x2a>
	__asm volatile
 80075e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075ec:	f383 8811 	msr	BASEPRI, r3
 80075f0:	f3bf 8f6f 	isb	sy
 80075f4:	f3bf 8f4f 	dsb	sy
 80075f8:	617b      	str	r3, [r7, #20]
}
 80075fa:	bf00      	nop
 80075fc:	e7fe      	b.n	80075fc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10a      	bne.n	800761a <vTaskDelayUntil+0x46>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	613b      	str	r3, [r7, #16]
}
 8007616:	bf00      	nop
 8007618:	e7fe      	b.n	8007618 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800761a:	4b2a      	ldr	r3, [pc, #168]	; (80076c4 <vTaskDelayUntil+0xf0>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	2b00      	cmp	r3, #0
 8007620:	d00a      	beq.n	8007638 <vTaskDelayUntil+0x64>
	__asm volatile
 8007622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007626:	f383 8811 	msr	BASEPRI, r3
 800762a:	f3bf 8f6f 	isb	sy
 800762e:	f3bf 8f4f 	dsb	sy
 8007632:	60fb      	str	r3, [r7, #12]
}
 8007634:	bf00      	nop
 8007636:	e7fe      	b.n	8007636 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 8007638:	f000 f8e4 	bl	8007804 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800763c:	4b22      	ldr	r3, [pc, #136]	; (80076c8 <vTaskDelayUntil+0xf4>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	681b      	ldr	r3, [r3, #0]
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	4413      	add	r3, r2
 800764a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800764c:	687b      	ldr	r3, [r7, #4]
 800764e:	681b      	ldr	r3, [r3, #0]
 8007650:	6a3a      	ldr	r2, [r7, #32]
 8007652:	429a      	cmp	r2, r3
 8007654:	d20b      	bcs.n	800766e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 8007656:	687b      	ldr	r3, [r7, #4]
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	69fa      	ldr	r2, [r7, #28]
 800765c:	429a      	cmp	r2, r3
 800765e:	d211      	bcs.n	8007684 <vTaskDelayUntil+0xb0>
 8007660:	69fa      	ldr	r2, [r7, #28]
 8007662:	6a3b      	ldr	r3, [r7, #32]
 8007664:	429a      	cmp	r2, r3
 8007666:	d90d      	bls.n	8007684 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007668:	2301      	movs	r3, #1
 800766a:	627b      	str	r3, [r7, #36]	; 0x24
 800766c:	e00a      	b.n	8007684 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800766e:	687b      	ldr	r3, [r7, #4]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	69fa      	ldr	r2, [r7, #28]
 8007674:	429a      	cmp	r2, r3
 8007676:	d303      	bcc.n	8007680 <vTaskDelayUntil+0xac>
 8007678:	69fa      	ldr	r2, [r7, #28]
 800767a:	6a3b      	ldr	r3, [r7, #32]
 800767c:	429a      	cmp	r2, r3
 800767e:	d901      	bls.n	8007684 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 8007680:	2301      	movs	r3, #1
 8007682:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 8007684:	687b      	ldr	r3, [r7, #4]
 8007686:	69fa      	ldr	r2, [r7, #28]
 8007688:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800768a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800768c:	2b00      	cmp	r3, #0
 800768e:	d006      	beq.n	800769e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 8007690:	69fa      	ldr	r2, [r7, #28]
 8007692:	6a3b      	ldr	r3, [r7, #32]
 8007694:	1ad3      	subs	r3, r2, r3
 8007696:	2100      	movs	r1, #0
 8007698:	4618      	mov	r0, r3
 800769a:	f000 fdeb 	bl	8008274 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800769e:	f000 f8bf 	bl	8007820 <xTaskResumeAll>
 80076a2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80076a4:	69bb      	ldr	r3, [r7, #24]
 80076a6:	2b00      	cmp	r3, #0
 80076a8:	d107      	bne.n	80076ba <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 80076aa:	4b08      	ldr	r3, [pc, #32]	; (80076cc <vTaskDelayUntil+0xf8>)
 80076ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80076b0:	601a      	str	r2, [r3, #0]
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80076ba:	bf00      	nop
 80076bc:	3728      	adds	r7, #40	; 0x28
 80076be:	46bd      	mov	sp, r7
 80076c0:	bd80      	pop	{r7, pc}
 80076c2:	bf00      	nop
 80076c4:	200013fc 	.word	0x200013fc
 80076c8:	200013d8 	.word	0x200013d8
 80076cc:	e000ed04 	.word	0xe000ed04

080076d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80076d0:	b580      	push	{r7, lr}
 80076d2:	b084      	sub	sp, #16
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80076d8:	2300      	movs	r3, #0
 80076da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80076dc:	687b      	ldr	r3, [r7, #4]
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d017      	beq.n	8007712 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80076e2:	4b13      	ldr	r3, [pc, #76]	; (8007730 <vTaskDelay+0x60>)
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00a      	beq.n	8007700 <vTaskDelay+0x30>
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	60bb      	str	r3, [r7, #8]
}
 80076fc:	bf00      	nop
 80076fe:	e7fe      	b.n	80076fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8007700:	f000 f880 	bl	8007804 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8007704:	2100      	movs	r1, #0
 8007706:	6878      	ldr	r0, [r7, #4]
 8007708:	f000 fdb4 	bl	8008274 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800770c:	f000 f888 	bl	8007820 <xTaskResumeAll>
 8007710:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d107      	bne.n	8007728 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8007718:	4b06      	ldr	r3, [pc, #24]	; (8007734 <vTaskDelay+0x64>)
 800771a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800771e:	601a      	str	r2, [r3, #0]
 8007720:	f3bf 8f4f 	dsb	sy
 8007724:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8007728:	bf00      	nop
 800772a:	3710      	adds	r7, #16
 800772c:	46bd      	mov	sp, r7
 800772e:	bd80      	pop	{r7, pc}
 8007730:	200013fc 	.word	0x200013fc
 8007734:	e000ed04 	.word	0xe000ed04

08007738 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b08a      	sub	sp, #40	; 0x28
 800773c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800773e:	2300      	movs	r3, #0
 8007740:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007742:	2300      	movs	r3, #0
 8007744:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007746:	463a      	mov	r2, r7
 8007748:	1d39      	adds	r1, r7, #4
 800774a:	f107 0308 	add.w	r3, r7, #8
 800774e:	4618      	mov	r0, r3
 8007750:	f7fe fe0c 	bl	800636c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007754:	6839      	ldr	r1, [r7, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	68ba      	ldr	r2, [r7, #8]
 800775a:	9202      	str	r2, [sp, #8]
 800775c:	9301      	str	r3, [sp, #4]
 800775e:	2300      	movs	r3, #0
 8007760:	9300      	str	r3, [sp, #0]
 8007762:	2300      	movs	r3, #0
 8007764:	460a      	mov	r2, r1
 8007766:	4921      	ldr	r1, [pc, #132]	; (80077ec <vTaskStartScheduler+0xb4>)
 8007768:	4821      	ldr	r0, [pc, #132]	; (80077f0 <vTaskStartScheduler+0xb8>)
 800776a:	f7ff fd97 	bl	800729c <xTaskCreateStatic>
 800776e:	4603      	mov	r3, r0
 8007770:	4a20      	ldr	r2, [pc, #128]	; (80077f4 <vTaskStartScheduler+0xbc>)
 8007772:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												( tskIDLE_PRIORITY | portPRIVILEGE_BIT ),
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007774:	4b1f      	ldr	r3, [pc, #124]	; (80077f4 <vTaskStartScheduler+0xbc>)
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d002      	beq.n	8007782 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800777c:	2301      	movs	r3, #1
 800777e:	617b      	str	r3, [r7, #20]
 8007780:	e001      	b.n	8007786 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007782:	2300      	movs	r3, #0
 8007784:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	2b01      	cmp	r3, #1
 800778a:	d102      	bne.n	8007792 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800778c:	f000 fdcc 	bl	8008328 <xTimerCreateTimerTask>
 8007790:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007792:	697b      	ldr	r3, [r7, #20]
 8007794:	2b01      	cmp	r3, #1
 8007796:	d116      	bne.n	80077c6 <vTaskStartScheduler+0x8e>
	__asm volatile
 8007798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779c:	f383 8811 	msr	BASEPRI, r3
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	613b      	str	r3, [r7, #16]
}
 80077aa:	bf00      	nop
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80077ac:	4b12      	ldr	r3, [pc, #72]	; (80077f8 <vTaskStartScheduler+0xc0>)
 80077ae:	f04f 32ff 	mov.w	r2, #4294967295
 80077b2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80077b4:	4b11      	ldr	r3, [pc, #68]	; (80077fc <vTaskStartScheduler+0xc4>)
 80077b6:	2201      	movs	r2, #1
 80077b8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
 80077ba:	4b11      	ldr	r3, [pc, #68]	; (8007800 <vTaskStartScheduler+0xc8>)
 80077bc:	2200      	movs	r2, #0
 80077be:	601a      	str	r2, [r3, #0]
		FreeRTOSConfig.h file. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80077c0:	f001 f942 	bl	8008a48 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80077c4:	e00e      	b.n	80077e4 <vTaskStartScheduler+0xac>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80077c6:	697b      	ldr	r3, [r7, #20]
 80077c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077cc:	d10a      	bne.n	80077e4 <vTaskStartScheduler+0xac>
	__asm volatile
 80077ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077d2:	f383 8811 	msr	BASEPRI, r3
 80077d6:	f3bf 8f6f 	isb	sy
 80077da:	f3bf 8f4f 	dsb	sy
 80077de:	60fb      	str	r3, [r7, #12]
}
 80077e0:	bf00      	nop
 80077e2:	e7fe      	b.n	80077e2 <vTaskStartScheduler+0xaa>
}
 80077e4:	bf00      	nop
 80077e6:	3718      	adds	r7, #24
 80077e8:	46bd      	mov	sp, r7
 80077ea:	bd80      	pop	{r7, pc}
 80077ec:	0800e4cc 	.word	0x0800e4cc
 80077f0:	08007f79 	.word	0x08007f79
 80077f4:	200013f8 	.word	0x200013f8
 80077f8:	200013f4 	.word	0x200013f4
 80077fc:	200013e0 	.word	0x200013e0
 8007800:	200013d8 	.word	0x200013d8

08007804 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007804:	b480      	push	{r7}
 8007806:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8007808:	4b04      	ldr	r3, [pc, #16]	; (800781c <vTaskSuspendAll+0x18>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	3301      	adds	r3, #1
 800780e:	4a03      	ldr	r2, [pc, #12]	; (800781c <vTaskSuspendAll+0x18>)
 8007810:	6013      	str	r3, [r2, #0]
}
 8007812:	bf00      	nop
 8007814:	46bd      	mov	sp, r7
 8007816:	bc80      	pop	{r7}
 8007818:	4770      	bx	lr
 800781a:	bf00      	nop
 800781c:	200013fc 	.word	0x200013fc

08007820 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007820:	b580      	push	{r7, lr}
 8007822:	b084      	sub	sp, #16
 8007824:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007826:	2300      	movs	r3, #0
 8007828:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800782a:	2300      	movs	r3, #0
 800782c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800782e:	4b42      	ldr	r3, [pc, #264]	; (8007938 <xTaskResumeAll+0x118>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2b00      	cmp	r3, #0
 8007834:	d10a      	bne.n	800784c <xTaskResumeAll+0x2c>
	__asm volatile
 8007836:	f04f 0350 	mov.w	r3, #80	; 0x50
 800783a:	f383 8811 	msr	BASEPRI, r3
 800783e:	f3bf 8f6f 	isb	sy
 8007842:	f3bf 8f4f 	dsb	sy
 8007846:	603b      	str	r3, [r7, #0]
}
 8007848:	bf00      	nop
 800784a:	e7fe      	b.n	800784a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800784c:	f001 f96e 	bl	8008b2c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007850:	4b39      	ldr	r3, [pc, #228]	; (8007938 <xTaskResumeAll+0x118>)
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	3b01      	subs	r3, #1
 8007856:	4a38      	ldr	r2, [pc, #224]	; (8007938 <xTaskResumeAll+0x118>)
 8007858:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800785a:	4b37      	ldr	r3, [pc, #220]	; (8007938 <xTaskResumeAll+0x118>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	2b00      	cmp	r3, #0
 8007860:	d162      	bne.n	8007928 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007862:	4b36      	ldr	r3, [pc, #216]	; (800793c <xTaskResumeAll+0x11c>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	2b00      	cmp	r3, #0
 8007868:	d05e      	beq.n	8007928 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800786a:	e02f      	b.n	80078cc <xTaskResumeAll+0xac>
				{
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
 800786c:	4b34      	ldr	r3, [pc, #208]	; (8007940 <xTaskResumeAll+0x120>)
 800786e:	68db      	ldr	r3, [r3, #12]
 8007870:	68db      	ldr	r3, [r3, #12]
 8007872:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	3318      	adds	r3, #24
 8007878:	4618      	mov	r0, r3
 800787a:	f7fe ffc3 	bl	8006804 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	3304      	adds	r3, #4
 8007882:	4618      	mov	r0, r3
 8007884:	f7fe ffbe 	bl	8006804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788c:	4b2d      	ldr	r3, [pc, #180]	; (8007944 <xTaskResumeAll+0x124>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	429a      	cmp	r2, r3
 8007892:	d903      	bls.n	800789c <xTaskResumeAll+0x7c>
 8007894:	68fb      	ldr	r3, [r7, #12]
 8007896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007898:	4a2a      	ldr	r2, [pc, #168]	; (8007944 <xTaskResumeAll+0x124>)
 800789a:	6013      	str	r3, [r2, #0]
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078a0:	4613      	mov	r3, r2
 80078a2:	009b      	lsls	r3, r3, #2
 80078a4:	4413      	add	r3, r2
 80078a6:	009b      	lsls	r3, r3, #2
 80078a8:	4a27      	ldr	r2, [pc, #156]	; (8007948 <xTaskResumeAll+0x128>)
 80078aa:	441a      	add	r2, r3
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	3304      	adds	r3, #4
 80078b0:	4619      	mov	r1, r3
 80078b2:	4610      	mov	r0, r2
 80078b4:	f7fe ff4b 	bl	800674e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078bc:	4b23      	ldr	r3, [pc, #140]	; (800794c <xTaskResumeAll+0x12c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d302      	bcc.n	80078cc <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80078c6:	4b22      	ldr	r3, [pc, #136]	; (8007950 <xTaskResumeAll+0x130>)
 80078c8:	2201      	movs	r2, #1
 80078ca:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80078cc:	4b1c      	ldr	r3, [pc, #112]	; (8007940 <xTaskResumeAll+0x120>)
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	2b00      	cmp	r3, #0
 80078d2:	d1cb      	bne.n	800786c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d001      	beq.n	80078de <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80078da:	f000 fc03 	bl	80080e4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80078de:	4b1d      	ldr	r3, [pc, #116]	; (8007954 <xTaskResumeAll+0x134>)
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2b00      	cmp	r3, #0
 80078e8:	d010      	beq.n	800790c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80078ea:	f000 f845 	bl	8007978 <xTaskIncrementTick>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d002      	beq.n	80078fa <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80078f4:	4b16      	ldr	r3, [pc, #88]	; (8007950 <xTaskResumeAll+0x130>)
 80078f6:	2201      	movs	r2, #1
 80078f8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	3b01      	subs	r3, #1
 80078fe:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	2b00      	cmp	r3, #0
 8007904:	d1f1      	bne.n	80078ea <xTaskResumeAll+0xca>

						uxPendedTicks = 0;
 8007906:	4b13      	ldr	r3, [pc, #76]	; (8007954 <xTaskResumeAll+0x134>)
 8007908:	2200      	movs	r2, #0
 800790a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800790c:	4b10      	ldr	r3, [pc, #64]	; (8007950 <xTaskResumeAll+0x130>)
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	2b00      	cmp	r3, #0
 8007912:	d009      	beq.n	8007928 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007914:	2301      	movs	r3, #1
 8007916:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007918:	4b0f      	ldr	r3, [pc, #60]	; (8007958 <xTaskResumeAll+0x138>)
 800791a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800791e:	601a      	str	r2, [r3, #0]
 8007920:	f3bf 8f4f 	dsb	sy
 8007924:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007928:	f001 f930 	bl	8008b8c <vPortExitCritical>

	return xAlreadyYielded;
 800792c:	68bb      	ldr	r3, [r7, #8]
}
 800792e:	4618      	mov	r0, r3
 8007930:	3710      	adds	r7, #16
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
 8007936:	bf00      	nop
 8007938:	200013fc 	.word	0x200013fc
 800793c:	200013d4 	.word	0x200013d4
 8007940:	20001394 	.word	0x20001394
 8007944:	200013dc 	.word	0x200013dc
 8007948:	20000f04 	.word	0x20000f04
 800794c:	20000f00 	.word	0x20000f00
 8007950:	200013e8 	.word	0x200013e8
 8007954:	200013e4 	.word	0x200013e4
 8007958:	e000ed04 	.word	0xe000ed04

0800795c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800795c:	b480      	push	{r7}
 800795e:	b083      	sub	sp, #12
 8007960:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007962:	4b04      	ldr	r3, [pc, #16]	; (8007974 <xTaskGetTickCount+0x18>)
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007968:	687b      	ldr	r3, [r7, #4]
}
 800796a:	4618      	mov	r0, r3
 800796c:	370c      	adds	r7, #12
 800796e:	46bd      	mov	sp, r7
 8007970:	bc80      	pop	{r7}
 8007972:	4770      	bx	lr
 8007974:	200013d8 	.word	0x200013d8

08007978 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b086      	sub	sp, #24
 800797c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800797e:	2300      	movs	r3, #0
 8007980:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007982:	4b51      	ldr	r3, [pc, #324]	; (8007ac8 <xTaskIncrementTick+0x150>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	2b00      	cmp	r3, #0
 8007988:	f040 808e 	bne.w	8007aa8 <xTaskIncrementTick+0x130>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800798c:	4b4f      	ldr	r3, [pc, #316]	; (8007acc <xTaskIncrementTick+0x154>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	3301      	adds	r3, #1
 8007992:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007994:	4a4d      	ldr	r2, [pc, #308]	; (8007acc <xTaskIncrementTick+0x154>)
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800799a:	693b      	ldr	r3, [r7, #16]
 800799c:	2b00      	cmp	r3, #0
 800799e:	d120      	bne.n	80079e2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80079a0:	4b4b      	ldr	r3, [pc, #300]	; (8007ad0 <xTaskIncrementTick+0x158>)
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d00a      	beq.n	80079c0 <xTaskIncrementTick+0x48>
	__asm volatile
 80079aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079ae:	f383 8811 	msr	BASEPRI, r3
 80079b2:	f3bf 8f6f 	isb	sy
 80079b6:	f3bf 8f4f 	dsb	sy
 80079ba:	603b      	str	r3, [r7, #0]
}
 80079bc:	bf00      	nop
 80079be:	e7fe      	b.n	80079be <xTaskIncrementTick+0x46>
 80079c0:	4b43      	ldr	r3, [pc, #268]	; (8007ad0 <xTaskIncrementTick+0x158>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	60fb      	str	r3, [r7, #12]
 80079c6:	4b43      	ldr	r3, [pc, #268]	; (8007ad4 <xTaskIncrementTick+0x15c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a41      	ldr	r2, [pc, #260]	; (8007ad0 <xTaskIncrementTick+0x158>)
 80079cc:	6013      	str	r3, [r2, #0]
 80079ce:	4a41      	ldr	r2, [pc, #260]	; (8007ad4 <xTaskIncrementTick+0x15c>)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	6013      	str	r3, [r2, #0]
 80079d4:	4b40      	ldr	r3, [pc, #256]	; (8007ad8 <xTaskIncrementTick+0x160>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	3301      	adds	r3, #1
 80079da:	4a3f      	ldr	r2, [pc, #252]	; (8007ad8 <xTaskIncrementTick+0x160>)
 80079dc:	6013      	str	r3, [r2, #0]
 80079de:	f000 fb81 	bl	80080e4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80079e2:	4b3e      	ldr	r3, [pc, #248]	; (8007adc <xTaskIncrementTick+0x164>)
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	693a      	ldr	r2, [r7, #16]
 80079e8:	429a      	cmp	r2, r3
 80079ea:	d34e      	bcc.n	8007a8a <xTaskIncrementTick+0x112>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80079ec:	4b38      	ldr	r3, [pc, #224]	; (8007ad0 <xTaskIncrementTick+0x158>)
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d101      	bne.n	80079fa <xTaskIncrementTick+0x82>
 80079f6:	2301      	movs	r3, #1
 80079f8:	e000      	b.n	80079fc <xTaskIncrementTick+0x84>
 80079fa:	2300      	movs	r3, #0
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d004      	beq.n	8007a0a <xTaskIncrementTick+0x92>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007a00:	4b36      	ldr	r3, [pc, #216]	; (8007adc <xTaskIncrementTick+0x164>)
 8007a02:	f04f 32ff 	mov.w	r2, #4294967295
 8007a06:	601a      	str	r2, [r3, #0]
					break;
 8007a08:	e03f      	b.n	8007a8a <xTaskIncrementTick+0x112>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8007a0a:	4b31      	ldr	r3, [pc, #196]	; (8007ad0 <xTaskIncrementTick+0x158>)
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	68db      	ldr	r3, [r3, #12]
 8007a10:	68db      	ldr	r3, [r3, #12]
 8007a12:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007a14:	68bb      	ldr	r3, [r7, #8]
 8007a16:	685b      	ldr	r3, [r3, #4]
 8007a18:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007a1a:	693a      	ldr	r2, [r7, #16]
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	429a      	cmp	r2, r3
 8007a20:	d203      	bcs.n	8007a2a <xTaskIncrementTick+0xb2>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007a22:	4a2e      	ldr	r2, [pc, #184]	; (8007adc <xTaskIncrementTick+0x164>)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6013      	str	r3, [r2, #0]
						break;
 8007a28:	e02f      	b.n	8007a8a <xTaskIncrementTick+0x112>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007a2a:	68bb      	ldr	r3, [r7, #8]
 8007a2c:	3304      	adds	r3, #4
 8007a2e:	4618      	mov	r0, r3
 8007a30:	f7fe fee8 	bl	8006804 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007a34:	68bb      	ldr	r3, [r7, #8]
 8007a36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a38:	2b00      	cmp	r3, #0
 8007a3a:	d004      	beq.n	8007a46 <xTaskIncrementTick+0xce>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007a3c:	68bb      	ldr	r3, [r7, #8]
 8007a3e:	3318      	adds	r3, #24
 8007a40:	4618      	mov	r0, r3
 8007a42:	f7fe fedf 	bl	8006804 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007a46:	68bb      	ldr	r3, [r7, #8]
 8007a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a4a:	4b25      	ldr	r3, [pc, #148]	; (8007ae0 <xTaskIncrementTick+0x168>)
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	429a      	cmp	r2, r3
 8007a50:	d903      	bls.n	8007a5a <xTaskIncrementTick+0xe2>
 8007a52:	68bb      	ldr	r3, [r7, #8]
 8007a54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a56:	4a22      	ldr	r2, [pc, #136]	; (8007ae0 <xTaskIncrementTick+0x168>)
 8007a58:	6013      	str	r3, [r2, #0]
 8007a5a:	68bb      	ldr	r3, [r7, #8]
 8007a5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a5e:	4613      	mov	r3, r2
 8007a60:	009b      	lsls	r3, r3, #2
 8007a62:	4413      	add	r3, r2
 8007a64:	009b      	lsls	r3, r3, #2
 8007a66:	4a1f      	ldr	r2, [pc, #124]	; (8007ae4 <xTaskIncrementTick+0x16c>)
 8007a68:	441a      	add	r2, r3
 8007a6a:	68bb      	ldr	r3, [r7, #8]
 8007a6c:	3304      	adds	r3, #4
 8007a6e:	4619      	mov	r1, r3
 8007a70:	4610      	mov	r0, r2
 8007a72:	f7fe fe6c 	bl	800674e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007a76:	68bb      	ldr	r3, [r7, #8]
 8007a78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a7a:	4b1b      	ldr	r3, [pc, #108]	; (8007ae8 <xTaskIncrementTick+0x170>)
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a80:	429a      	cmp	r2, r3
 8007a82:	d3b3      	bcc.n	80079ec <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007a84:	2301      	movs	r3, #1
 8007a86:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007a88:	e7b0      	b.n	80079ec <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007a8a:	4b17      	ldr	r3, [pc, #92]	; (8007ae8 <xTaskIncrementTick+0x170>)
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007a90:	4914      	ldr	r1, [pc, #80]	; (8007ae4 <xTaskIncrementTick+0x16c>)
 8007a92:	4613      	mov	r3, r2
 8007a94:	009b      	lsls	r3, r3, #2
 8007a96:	4413      	add	r3, r2
 8007a98:	009b      	lsls	r3, r3, #2
 8007a9a:	440b      	add	r3, r1
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	2b01      	cmp	r3, #1
 8007aa0:	d907      	bls.n	8007ab2 <xTaskIncrementTick+0x13a>
			{
				xSwitchRequired = pdTRUE;
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	617b      	str	r3, [r7, #20]
 8007aa6:	e004      	b.n	8007ab2 <xTaskIncrementTick+0x13a>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8007aa8:	4b10      	ldr	r3, [pc, #64]	; (8007aec <xTaskIncrementTick+0x174>)
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	3301      	adds	r3, #1
 8007aae:	4a0f      	ldr	r2, [pc, #60]	; (8007aec <xTaskIncrementTick+0x174>)
 8007ab0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8007ab2:	4b0f      	ldr	r3, [pc, #60]	; (8007af0 <xTaskIncrementTick+0x178>)
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d001      	beq.n	8007abe <xTaskIncrementTick+0x146>
		{
			xSwitchRequired = pdTRUE;
 8007aba:	2301      	movs	r3, #1
 8007abc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8007abe:	697b      	ldr	r3, [r7, #20]
}
 8007ac0:	4618      	mov	r0, r3
 8007ac2:	3718      	adds	r7, #24
 8007ac4:	46bd      	mov	sp, r7
 8007ac6:	bd80      	pop	{r7, pc}
 8007ac8:	200013fc 	.word	0x200013fc
 8007acc:	200013d8 	.word	0x200013d8
 8007ad0:	2000138c 	.word	0x2000138c
 8007ad4:	20001390 	.word	0x20001390
 8007ad8:	200013ec 	.word	0x200013ec
 8007adc:	200013f4 	.word	0x200013f4
 8007ae0:	200013dc 	.word	0x200013dc
 8007ae4:	20000f04 	.word	0x20000f04
 8007ae8:	20000f00 	.word	0x20000f00
 8007aec:	200013e4 	.word	0x200013e4
 8007af0:	200013e8 	.word	0x200013e8

08007af4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007af4:	b480      	push	{r7}
 8007af6:	b085      	sub	sp, #20
 8007af8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007afa:	4b27      	ldr	r3, [pc, #156]	; (8007b98 <vTaskSwitchContext+0xa4>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d003      	beq.n	8007b0a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007b02:	4b26      	ldr	r3, [pc, #152]	; (8007b9c <vTaskSwitchContext+0xa8>)
 8007b04:	2201      	movs	r2, #1
 8007b06:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007b08:	e041      	b.n	8007b8e <vTaskSwitchContext+0x9a>
		xYieldPending = pdFALSE;
 8007b0a:	4b24      	ldr	r3, [pc, #144]	; (8007b9c <vTaskSwitchContext+0xa8>)
 8007b0c:	2200      	movs	r2, #0
 8007b0e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK();
 8007b10:	4b23      	ldr	r3, [pc, #140]	; (8007ba0 <vTaskSwitchContext+0xac>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	60fb      	str	r3, [r7, #12]
 8007b16:	e010      	b.n	8007b3a <vTaskSwitchContext+0x46>
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d10a      	bne.n	8007b34 <vTaskSwitchContext+0x40>
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	607b      	str	r3, [r7, #4]
}
 8007b30:	bf00      	nop
 8007b32:	e7fe      	b.n	8007b32 <vTaskSwitchContext+0x3e>
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	3b01      	subs	r3, #1
 8007b38:	60fb      	str	r3, [r7, #12]
 8007b3a:	491a      	ldr	r1, [pc, #104]	; (8007ba4 <vTaskSwitchContext+0xb0>)
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	4613      	mov	r3, r2
 8007b40:	009b      	lsls	r3, r3, #2
 8007b42:	4413      	add	r3, r2
 8007b44:	009b      	lsls	r3, r3, #2
 8007b46:	440b      	add	r3, r1
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	2b00      	cmp	r3, #0
 8007b4c:	d0e4      	beq.n	8007b18 <vTaskSwitchContext+0x24>
 8007b4e:	68fa      	ldr	r2, [r7, #12]
 8007b50:	4613      	mov	r3, r2
 8007b52:	009b      	lsls	r3, r3, #2
 8007b54:	4413      	add	r3, r2
 8007b56:	009b      	lsls	r3, r3, #2
 8007b58:	4a12      	ldr	r2, [pc, #72]	; (8007ba4 <vTaskSwitchContext+0xb0>)
 8007b5a:	4413      	add	r3, r2
 8007b5c:	60bb      	str	r3, [r7, #8]
 8007b5e:	68bb      	ldr	r3, [r7, #8]
 8007b60:	685b      	ldr	r3, [r3, #4]
 8007b62:	685a      	ldr	r2, [r3, #4]
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	605a      	str	r2, [r3, #4]
 8007b68:	68bb      	ldr	r3, [r7, #8]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	68bb      	ldr	r3, [r7, #8]
 8007b6e:	3308      	adds	r3, #8
 8007b70:	429a      	cmp	r2, r3
 8007b72:	d104      	bne.n	8007b7e <vTaskSwitchContext+0x8a>
 8007b74:	68bb      	ldr	r3, [r7, #8]
 8007b76:	685b      	ldr	r3, [r3, #4]
 8007b78:	685a      	ldr	r2, [r3, #4]
 8007b7a:	68bb      	ldr	r3, [r7, #8]
 8007b7c:	605a      	str	r2, [r3, #4]
 8007b7e:	68bb      	ldr	r3, [r7, #8]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	68db      	ldr	r3, [r3, #12]
 8007b84:	4a08      	ldr	r2, [pc, #32]	; (8007ba8 <vTaskSwitchContext+0xb4>)
 8007b86:	6013      	str	r3, [r2, #0]
 8007b88:	4a05      	ldr	r2, [pc, #20]	; (8007ba0 <vTaskSwitchContext+0xac>)
 8007b8a:	68fb      	ldr	r3, [r7, #12]
 8007b8c:	6013      	str	r3, [r2, #0]
}
 8007b8e:	bf00      	nop
 8007b90:	3714      	adds	r7, #20
 8007b92:	46bd      	mov	sp, r7
 8007b94:	bc80      	pop	{r7}
 8007b96:	4770      	bx	lr
 8007b98:	200013fc 	.word	0x200013fc
 8007b9c:	200013e8 	.word	0x200013e8
 8007ba0:	200013dc 	.word	0x200013dc
 8007ba4:	20000f04 	.word	0x20000f04
 8007ba8:	20000f00 	.word	0x20000f00

08007bac <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007bac:	b580      	push	{r7, lr}
 8007bae:	b084      	sub	sp, #16
 8007bb0:	af00      	add	r7, sp, #0
 8007bb2:	6078      	str	r0, [r7, #4]
 8007bb4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d10a      	bne.n	8007bd2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007bbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bc0:	f383 8811 	msr	BASEPRI, r3
 8007bc4:	f3bf 8f6f 	isb	sy
 8007bc8:	f3bf 8f4f 	dsb	sy
 8007bcc:	60fb      	str	r3, [r7, #12]
}
 8007bce:	bf00      	nop
 8007bd0:	e7fe      	b.n	8007bd0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007bd2:	4b07      	ldr	r3, [pc, #28]	; (8007bf0 <vTaskPlaceOnEventList+0x44>)
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	3318      	adds	r3, #24
 8007bd8:	4619      	mov	r1, r3
 8007bda:	6878      	ldr	r0, [r7, #4]
 8007bdc:	f7fe fdda 	bl	8006794 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007be0:	2101      	movs	r1, #1
 8007be2:	6838      	ldr	r0, [r7, #0]
 8007be4:	f000 fb46 	bl	8008274 <prvAddCurrentTaskToDelayedList>
}
 8007be8:	bf00      	nop
 8007bea:	3710      	adds	r7, #16
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	20000f00 	.word	0x20000f00

08007bf4 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d10a      	bne.n	8007c1c <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	617b      	str	r3, [r7, #20]
}
 8007c18:	bf00      	nop
 8007c1a:	e7fe      	b.n	8007c1a <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8007c1c:	4b11      	ldr	r3, [pc, #68]	; (8007c64 <vTaskPlaceOnUnorderedEventList+0x70>)
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10a      	bne.n	8007c3a <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8007c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	613b      	str	r3, [r7, #16]
}
 8007c36:	bf00      	nop
 8007c38:	e7fe      	b.n	8007c38 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007c3a:	4b0b      	ldr	r3, [pc, #44]	; (8007c68 <vTaskPlaceOnUnorderedEventList+0x74>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68ba      	ldr	r2, [r7, #8]
 8007c40:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8007c44:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c46:	4b08      	ldr	r3, [pc, #32]	; (8007c68 <vTaskPlaceOnUnorderedEventList+0x74>)
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	3318      	adds	r3, #24
 8007c4c:	4619      	mov	r1, r3
 8007c4e:	68f8      	ldr	r0, [r7, #12]
 8007c50:	f7fe fd7d 	bl	800674e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007c54:	2101      	movs	r1, #1
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 fb0c 	bl	8008274 <prvAddCurrentTaskToDelayedList>
}
 8007c5c:	bf00      	nop
 8007c5e:	3718      	adds	r7, #24
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	200013fc 	.word	0x200013fc
 8007c68:	20000f00 	.word	0x20000f00

08007c6c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	60b9      	str	r1, [r7, #8]
 8007c76:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d10a      	bne.n	8007c94 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c82:	f383 8811 	msr	BASEPRI, r3
 8007c86:	f3bf 8f6f 	isb	sy
 8007c8a:	f3bf 8f4f 	dsb	sy
 8007c8e:	617b      	str	r3, [r7, #20]
}
 8007c90:	bf00      	nop
 8007c92:	e7fe      	b.n	8007c92 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007c94:	4b0a      	ldr	r3, [pc, #40]	; (8007cc0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007c96:	681b      	ldr	r3, [r3, #0]
 8007c98:	3318      	adds	r3, #24
 8007c9a:	4619      	mov	r1, r3
 8007c9c:	68f8      	ldr	r0, [r7, #12]
 8007c9e:	f7fe fd56 	bl	800674e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d002      	beq.n	8007cae <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007ca8:	f04f 33ff 	mov.w	r3, #4294967295
 8007cac:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007cae:	6879      	ldr	r1, [r7, #4]
 8007cb0:	68b8      	ldr	r0, [r7, #8]
 8007cb2:	f000 fadf 	bl	8008274 <prvAddCurrentTaskToDelayedList>
	}
 8007cb6:	bf00      	nop
 8007cb8:	3718      	adds	r7, #24
 8007cba:	46bd      	mov	sp, r7
 8007cbc:	bd80      	pop	{r7, pc}
 8007cbe:	bf00      	nop
 8007cc0:	20000f00 	.word	0x20000f00

08007cc4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007cc4:	b580      	push	{r7, lr}
 8007cc6:	b086      	sub	sp, #24
 8007cc8:	af00      	add	r7, sp, #0
 8007cca:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	68db      	ldr	r3, [r3, #12]
 8007cd0:	68db      	ldr	r3, [r3, #12]
 8007cd2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007cd4:	693b      	ldr	r3, [r7, #16]
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d10a      	bne.n	8007cf0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007cda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cde:	f383 8811 	msr	BASEPRI, r3
 8007ce2:	f3bf 8f6f 	isb	sy
 8007ce6:	f3bf 8f4f 	dsb	sy
 8007cea:	60fb      	str	r3, [r7, #12]
}
 8007cec:	bf00      	nop
 8007cee:	e7fe      	b.n	8007cee <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007cf0:	693b      	ldr	r3, [r7, #16]
 8007cf2:	3318      	adds	r3, #24
 8007cf4:	4618      	mov	r0, r3
 8007cf6:	f7fe fd85 	bl	8006804 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007cfa:	4b1e      	ldr	r3, [pc, #120]	; (8007d74 <xTaskRemoveFromEventList+0xb0>)
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d11d      	bne.n	8007d3e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007d02:	693b      	ldr	r3, [r7, #16]
 8007d04:	3304      	adds	r3, #4
 8007d06:	4618      	mov	r0, r3
 8007d08:	f7fe fd7c 	bl	8006804 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007d0c:	693b      	ldr	r3, [r7, #16]
 8007d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d10:	4b19      	ldr	r3, [pc, #100]	; (8007d78 <xTaskRemoveFromEventList+0xb4>)
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	429a      	cmp	r2, r3
 8007d16:	d903      	bls.n	8007d20 <xTaskRemoveFromEventList+0x5c>
 8007d18:	693b      	ldr	r3, [r7, #16]
 8007d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d1c:	4a16      	ldr	r2, [pc, #88]	; (8007d78 <xTaskRemoveFromEventList+0xb4>)
 8007d1e:	6013      	str	r3, [r2, #0]
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d24:	4613      	mov	r3, r2
 8007d26:	009b      	lsls	r3, r3, #2
 8007d28:	4413      	add	r3, r2
 8007d2a:	009b      	lsls	r3, r3, #2
 8007d2c:	4a13      	ldr	r2, [pc, #76]	; (8007d7c <xTaskRemoveFromEventList+0xb8>)
 8007d2e:	441a      	add	r2, r3
 8007d30:	693b      	ldr	r3, [r7, #16]
 8007d32:	3304      	adds	r3, #4
 8007d34:	4619      	mov	r1, r3
 8007d36:	4610      	mov	r0, r2
 8007d38:	f7fe fd09 	bl	800674e <vListInsertEnd>
 8007d3c:	e005      	b.n	8007d4a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007d3e:	693b      	ldr	r3, [r7, #16]
 8007d40:	3318      	adds	r3, #24
 8007d42:	4619      	mov	r1, r3
 8007d44:	480e      	ldr	r0, [pc, #56]	; (8007d80 <xTaskRemoveFromEventList+0xbc>)
 8007d46:	f7fe fd02 	bl	800674e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007d4a:	693b      	ldr	r3, [r7, #16]
 8007d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d4e:	4b0d      	ldr	r3, [pc, #52]	; (8007d84 <xTaskRemoveFromEventList+0xc0>)
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d905      	bls.n	8007d64 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8007d58:	2301      	movs	r3, #1
 8007d5a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8007d5c:	4b0a      	ldr	r3, [pc, #40]	; (8007d88 <xTaskRemoveFromEventList+0xc4>)
 8007d5e:	2201      	movs	r2, #1
 8007d60:	601a      	str	r2, [r3, #0]
 8007d62:	e001      	b.n	8007d68 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8007d64:	2300      	movs	r3, #0
 8007d66:	617b      	str	r3, [r7, #20]
		ensure it is updated at the earliest possible time. */
		prvResetNextTaskUnblockTime();
	}
	#endif

	return xReturn;
 8007d68:	697b      	ldr	r3, [r7, #20]
}
 8007d6a:	4618      	mov	r0, r3
 8007d6c:	3718      	adds	r7, #24
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	bd80      	pop	{r7, pc}
 8007d72:	bf00      	nop
 8007d74:	200013fc 	.word	0x200013fc
 8007d78:	200013dc 	.word	0x200013dc
 8007d7c:	20000f04 	.word	0x20000f04
 8007d80:	20001394 	.word	0x20001394
 8007d84:	20000f00 	.word	0x20000f00
 8007d88:	200013e8 	.word	0x200013e8

08007d8c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b086      	sub	sp, #24
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8007d96:	4b29      	ldr	r3, [pc, #164]	; (8007e3c <vTaskRemoveFromUnorderedEventList+0xb0>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d10a      	bne.n	8007db4 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	613b      	str	r3, [r7, #16]
}
 8007db0:	bf00      	nop
 8007db2:	e7fe      	b.n	8007db2 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = ( TCB_t * ) listGET_LIST_ITEM_OWNER( pxEventListItem );
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8007dc4:	697b      	ldr	r3, [r7, #20]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d10a      	bne.n	8007de0 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8007dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dce:	f383 8811 	msr	BASEPRI, r3
 8007dd2:	f3bf 8f6f 	isb	sy
 8007dd6:	f3bf 8f4f 	dsb	sy
 8007dda:	60fb      	str	r3, [r7, #12]
}
 8007ddc:	bf00      	nop
 8007dde:	e7fe      	b.n	8007dde <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	f7fe fd0f 	bl	8006804 <uxListRemove>

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	3304      	adds	r3, #4
 8007dea:	4618      	mov	r0, r3
 8007dec:	f7fe fd0a 	bl	8006804 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007df4:	4b12      	ldr	r3, [pc, #72]	; (8007e40 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	429a      	cmp	r2, r3
 8007dfa:	d903      	bls.n	8007e04 <vTaskRemoveFromUnorderedEventList+0x78>
 8007dfc:	697b      	ldr	r3, [r7, #20]
 8007dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e00:	4a0f      	ldr	r2, [pc, #60]	; (8007e40 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8007e02:	6013      	str	r3, [r2, #0]
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e08:	4613      	mov	r3, r2
 8007e0a:	009b      	lsls	r3, r3, #2
 8007e0c:	4413      	add	r3, r2
 8007e0e:	009b      	lsls	r3, r3, #2
 8007e10:	4a0c      	ldr	r2, [pc, #48]	; (8007e44 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8007e12:	441a      	add	r2, r3
 8007e14:	697b      	ldr	r3, [r7, #20]
 8007e16:	3304      	adds	r3, #4
 8007e18:	4619      	mov	r1, r3
 8007e1a:	4610      	mov	r0, r2
 8007e1c:	f7fe fc97 	bl	800674e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e24:	4b08      	ldr	r3, [pc, #32]	; (8007e48 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007e2a:	429a      	cmp	r2, r3
 8007e2c:	d902      	bls.n	8007e34 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8007e2e:	4b07      	ldr	r3, [pc, #28]	; (8007e4c <vTaskRemoveFromUnorderedEventList+0xc0>)
 8007e30:	2201      	movs	r2, #1
 8007e32:	601a      	str	r2, [r3, #0]
	}
}
 8007e34:	bf00      	nop
 8007e36:	3718      	adds	r7, #24
 8007e38:	46bd      	mov	sp, r7
 8007e3a:	bd80      	pop	{r7, pc}
 8007e3c:	200013fc 	.word	0x200013fc
 8007e40:	200013dc 	.word	0x200013dc
 8007e44:	20000f04 	.word	0x20000f04
 8007e48:	20000f00 	.word	0x20000f00
 8007e4c:	200013e8 	.word	0x200013e8

08007e50 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007e50:	b480      	push	{r7}
 8007e52:	b083      	sub	sp, #12
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007e58:	4b06      	ldr	r3, [pc, #24]	; (8007e74 <vTaskInternalSetTimeOutState+0x24>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007e60:	4b05      	ldr	r3, [pc, #20]	; (8007e78 <vTaskInternalSetTimeOutState+0x28>)
 8007e62:	681a      	ldr	r2, [r3, #0]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	605a      	str	r2, [r3, #4]
}
 8007e68:	bf00      	nop
 8007e6a:	370c      	adds	r7, #12
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bc80      	pop	{r7}
 8007e70:	4770      	bx	lr
 8007e72:	bf00      	nop
 8007e74:	200013ec 	.word	0x200013ec
 8007e78:	200013d8 	.word	0x200013d8

08007e7c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b088      	sub	sp, #32
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
 8007e84:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2b00      	cmp	r3, #0
 8007e8a:	d10a      	bne.n	8007ea2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8007e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e90:	f383 8811 	msr	BASEPRI, r3
 8007e94:	f3bf 8f6f 	isb	sy
 8007e98:	f3bf 8f4f 	dsb	sy
 8007e9c:	613b      	str	r3, [r7, #16]
}
 8007e9e:	bf00      	nop
 8007ea0:	e7fe      	b.n	8007ea0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d10a      	bne.n	8007ebe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8007ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007eac:	f383 8811 	msr	BASEPRI, r3
 8007eb0:	f3bf 8f6f 	isb	sy
 8007eb4:	f3bf 8f4f 	dsb	sy
 8007eb8:	60fb      	str	r3, [r7, #12]
}
 8007eba:	bf00      	nop
 8007ebc:	e7fe      	b.n	8007ebc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8007ebe:	f000 fe35 	bl	8008b2c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007ec2:	4b24      	ldr	r3, [pc, #144]	; (8007f54 <xTaskCheckForTimeOut+0xd8>)
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	69ba      	ldr	r2, [r7, #24]
 8007ece:	1ad3      	subs	r3, r2, r3
 8007ed0:	617b      	str	r3, [r7, #20]

		#if( INCLUDE_xTaskAbortDelay == 1 )
			if( pxCurrentTCB->ucDelayAborted != pdFALSE )
 8007ed2:	4b21      	ldr	r3, [pc, #132]	; (8007f58 <xTaskCheckForTimeOut+0xdc>)
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	f893 305a 	ldrb.w	r3, [r3, #90]	; 0x5a
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d007      	beq.n	8007eee <xTaskCheckForTimeOut+0x72>
			{
				/* The delay was aborted, which is not the same as a time out,
				but has the same result. */
				pxCurrentTCB->ucDelayAborted = pdFALSE;
 8007ede:	4b1e      	ldr	r3, [pc, #120]	; (8007f58 <xTaskCheckForTimeOut+0xdc>)
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	2200      	movs	r2, #0
 8007ee4:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
				xReturn = pdTRUE;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	61fb      	str	r3, [r7, #28]
 8007eec:	e02b      	b.n	8007f46 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007eee:	683b      	ldr	r3, [r7, #0]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007ef6:	d102      	bne.n	8007efe <xTaskCheckForTimeOut+0x82>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007ef8:	2300      	movs	r3, #0
 8007efa:	61fb      	str	r3, [r7, #28]
 8007efc:	e023      	b.n	8007f46 <xTaskCheckForTimeOut+0xca>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	4b16      	ldr	r3, [pc, #88]	; (8007f5c <xTaskCheckForTimeOut+0xe0>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d007      	beq.n	8007f1a <xTaskCheckForTimeOut+0x9e>
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	685b      	ldr	r3, [r3, #4]
 8007f0e:	69ba      	ldr	r2, [r7, #24]
 8007f10:	429a      	cmp	r2, r3
 8007f12:	d302      	bcc.n	8007f1a <xTaskCheckForTimeOut+0x9e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007f14:	2301      	movs	r3, #1
 8007f16:	61fb      	str	r3, [r7, #28]
 8007f18:	e015      	b.n	8007f46 <xTaskCheckForTimeOut+0xca>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	697a      	ldr	r2, [r7, #20]
 8007f20:	429a      	cmp	r2, r3
 8007f22:	d20b      	bcs.n	8007f3c <xTaskCheckForTimeOut+0xc0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	681a      	ldr	r2, [r3, #0]
 8007f28:	697b      	ldr	r3, [r7, #20]
 8007f2a:	1ad2      	subs	r2, r2, r3
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007f30:	6878      	ldr	r0, [r7, #4]
 8007f32:	f7ff ff8d 	bl	8007e50 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8007f36:	2300      	movs	r3, #0
 8007f38:	61fb      	str	r3, [r7, #28]
 8007f3a:	e004      	b.n	8007f46 <xTaskCheckForTimeOut+0xca>
		}
		else
		{
			*pxTicksToWait = 0;
 8007f3c:	683b      	ldr	r3, [r7, #0]
 8007f3e:	2200      	movs	r2, #0
 8007f40:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007f42:	2301      	movs	r3, #1
 8007f44:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8007f46:	f000 fe21 	bl	8008b8c <vPortExitCritical>

	return xReturn;
 8007f4a:	69fb      	ldr	r3, [r7, #28]
}
 8007f4c:	4618      	mov	r0, r3
 8007f4e:	3720      	adds	r7, #32
 8007f50:	46bd      	mov	sp, r7
 8007f52:	bd80      	pop	{r7, pc}
 8007f54:	200013d8 	.word	0x200013d8
 8007f58:	20000f00 	.word	0x20000f00
 8007f5c:	200013ec 	.word	0x200013ec

08007f60 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007f60:	b480      	push	{r7}
 8007f62:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007f64:	4b03      	ldr	r3, [pc, #12]	; (8007f74 <vTaskMissedYield+0x14>)
 8007f66:	2201      	movs	r2, #1
 8007f68:	601a      	str	r2, [r3, #0]
}
 8007f6a:	bf00      	nop
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bc80      	pop	{r7}
 8007f70:	4770      	bx	lr
 8007f72:	bf00      	nop
 8007f74:	200013e8 	.word	0x200013e8

08007f78 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b082      	sub	sp, #8
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007f80:	f000 f852 	bl	8008028 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007f84:	4b06      	ldr	r3, [pc, #24]	; (8007fa0 <prvIdleTask+0x28>)
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d9f9      	bls.n	8007f80 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007f8c:	4b05      	ldr	r3, [pc, #20]	; (8007fa4 <prvIdleTask+0x2c>)
 8007f8e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007f92:	601a      	str	r2, [r3, #0]
 8007f94:	f3bf 8f4f 	dsb	sy
 8007f98:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007f9c:	e7f0      	b.n	8007f80 <prvIdleTask+0x8>
 8007f9e:	bf00      	nop
 8007fa0:	20000f04 	.word	0x20000f04
 8007fa4:	e000ed04 	.word	0xe000ed04

08007fa8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	b082      	sub	sp, #8
 8007fac:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fae:	2300      	movs	r3, #0
 8007fb0:	607b      	str	r3, [r7, #4]
 8007fb2:	e00c      	b.n	8007fce <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	4613      	mov	r3, r2
 8007fb8:	009b      	lsls	r3, r3, #2
 8007fba:	4413      	add	r3, r2
 8007fbc:	009b      	lsls	r3, r3, #2
 8007fbe:	4a12      	ldr	r2, [pc, #72]	; (8008008 <prvInitialiseTaskLists+0x60>)
 8007fc0:	4413      	add	r3, r2
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f7fe fb98 	bl	80066f8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	3301      	adds	r3, #1
 8007fcc:	607b      	str	r3, [r7, #4]
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	2b37      	cmp	r3, #55	; 0x37
 8007fd2:	d9ef      	bls.n	8007fb4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007fd4:	480d      	ldr	r0, [pc, #52]	; (800800c <prvInitialiseTaskLists+0x64>)
 8007fd6:	f7fe fb8f 	bl	80066f8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8007fda:	480d      	ldr	r0, [pc, #52]	; (8008010 <prvInitialiseTaskLists+0x68>)
 8007fdc:	f7fe fb8c 	bl	80066f8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007fe0:	480c      	ldr	r0, [pc, #48]	; (8008014 <prvInitialiseTaskLists+0x6c>)
 8007fe2:	f7fe fb89 	bl	80066f8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007fe6:	480c      	ldr	r0, [pc, #48]	; (8008018 <prvInitialiseTaskLists+0x70>)
 8007fe8:	f7fe fb86 	bl	80066f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007fec:	480b      	ldr	r0, [pc, #44]	; (800801c <prvInitialiseTaskLists+0x74>)
 8007fee:	f7fe fb83 	bl	80066f8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007ff2:	4b0b      	ldr	r3, [pc, #44]	; (8008020 <prvInitialiseTaskLists+0x78>)
 8007ff4:	4a05      	ldr	r2, [pc, #20]	; (800800c <prvInitialiseTaskLists+0x64>)
 8007ff6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007ff8:	4b0a      	ldr	r3, [pc, #40]	; (8008024 <prvInitialiseTaskLists+0x7c>)
 8007ffa:	4a05      	ldr	r2, [pc, #20]	; (8008010 <prvInitialiseTaskLists+0x68>)
 8007ffc:	601a      	str	r2, [r3, #0]
}
 8007ffe:	bf00      	nop
 8008000:	3708      	adds	r7, #8
 8008002:	46bd      	mov	sp, r7
 8008004:	bd80      	pop	{r7, pc}
 8008006:	bf00      	nop
 8008008:	20000f04 	.word	0x20000f04
 800800c:	20001364 	.word	0x20001364
 8008010:	20001378 	.word	0x20001378
 8008014:	20001394 	.word	0x20001394
 8008018:	200013a8 	.word	0x200013a8
 800801c:	200013c0 	.word	0x200013c0
 8008020:	2000138c 	.word	0x2000138c
 8008024:	20001390 	.word	0x20001390

08008028 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008028:	b580      	push	{r7, lr}
 800802a:	b082      	sub	sp, #8
 800802c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent vTaskSuspendAll()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800802e:	e019      	b.n	8008064 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008030:	f000 fd7c 	bl	8008b2c <vPortEnterCritical>
			{
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
 8008034:	4b10      	ldr	r3, [pc, #64]	; (8008078 <prvCheckTasksWaitingTermination+0x50>)
 8008036:	68db      	ldr	r3, [r3, #12]
 8008038:	68db      	ldr	r3, [r3, #12]
 800803a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	3304      	adds	r3, #4
 8008040:	4618      	mov	r0, r3
 8008042:	f7fe fbdf 	bl	8006804 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008046:	4b0d      	ldr	r3, [pc, #52]	; (800807c <prvCheckTasksWaitingTermination+0x54>)
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	3b01      	subs	r3, #1
 800804c:	4a0b      	ldr	r2, [pc, #44]	; (800807c <prvCheckTasksWaitingTermination+0x54>)
 800804e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008050:	4b0b      	ldr	r3, [pc, #44]	; (8008080 <prvCheckTasksWaitingTermination+0x58>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	3b01      	subs	r3, #1
 8008056:	4a0a      	ldr	r2, [pc, #40]	; (8008080 <prvCheckTasksWaitingTermination+0x58>)
 8008058:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800805a:	f000 fd97 	bl	8008b8c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800805e:	6878      	ldr	r0, [r7, #4]
 8008060:	f000 f810 	bl	8008084 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008064:	4b06      	ldr	r3, [pc, #24]	; (8008080 <prvCheckTasksWaitingTermination+0x58>)
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2b00      	cmp	r3, #0
 800806a:	d1e1      	bne.n	8008030 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	3708      	adds	r7, #8
 8008072:	46bd      	mov	sp, r7
 8008074:	bd80      	pop	{r7, pc}
 8008076:	bf00      	nop
 8008078:	200013a8 	.word	0x200013a8
 800807c:	200013d4 	.word	0x200013d4
 8008080:	200013bc 	.word	0x200013bc

08008084 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008084:	b580      	push	{r7, lr}
 8008086:	b084      	sub	sp, #16
 8008088:	af00      	add	r7, sp, #0
 800808a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8008092:	2b00      	cmp	r3, #0
 8008094:	d108      	bne.n	80080a8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800809a:	4618      	mov	r0, r3
 800809c:	f000 ff0a 	bl	8008eb4 <vPortFree>
				vPortFree( pxTCB );
 80080a0:	6878      	ldr	r0, [r7, #4]
 80080a2:	f000 ff07 	bl	8008eb4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80080a6:	e018      	b.n	80080da <prvDeleteTCB+0x56>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80080ae:	2b01      	cmp	r3, #1
 80080b0:	d103      	bne.n	80080ba <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80080b2:	6878      	ldr	r0, [r7, #4]
 80080b4:	f000 fefe 	bl	8008eb4 <vPortFree>
	}
 80080b8:	e00f      	b.n	80080da <prvDeleteTCB+0x56>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80080c0:	2b02      	cmp	r3, #2
 80080c2:	d00a      	beq.n	80080da <prvDeleteTCB+0x56>
	__asm volatile
 80080c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	60fb      	str	r3, [r7, #12]
}
 80080d6:	bf00      	nop
 80080d8:	e7fe      	b.n	80080d8 <prvDeleteTCB+0x54>
	}
 80080da:	bf00      	nop
 80080dc:	3710      	adds	r7, #16
 80080de:	46bd      	mov	sp, r7
 80080e0:	bd80      	pop	{r7, pc}
	...

080080e4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80080e4:	b480      	push	{r7}
 80080e6:	b083      	sub	sp, #12
 80080e8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80080ea:	4b0e      	ldr	r3, [pc, #56]	; (8008124 <prvResetNextTaskUnblockTime+0x40>)
 80080ec:	681b      	ldr	r3, [r3, #0]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d101      	bne.n	80080f8 <prvResetNextTaskUnblockTime+0x14>
 80080f4:	2301      	movs	r3, #1
 80080f6:	e000      	b.n	80080fa <prvResetNextTaskUnblockTime+0x16>
 80080f8:	2300      	movs	r3, #0
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d004      	beq.n	8008108 <prvResetNextTaskUnblockTime+0x24>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80080fe:	4b0a      	ldr	r3, [pc, #40]	; (8008128 <prvResetNextTaskUnblockTime+0x44>)
 8008100:	f04f 32ff 	mov.w	r2, #4294967295
 8008104:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008106:	e008      	b.n	800811a <prvResetNextTaskUnblockTime+0x36>
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
 8008108:	4b06      	ldr	r3, [pc, #24]	; (8008124 <prvResetNextTaskUnblockTime+0x40>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	68db      	ldr	r3, [r3, #12]
 8008110:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	4a04      	ldr	r2, [pc, #16]	; (8008128 <prvResetNextTaskUnblockTime+0x44>)
 8008118:	6013      	str	r3, [r2, #0]
}
 800811a:	bf00      	nop
 800811c:	370c      	adds	r7, #12
 800811e:	46bd      	mov	sp, r7
 8008120:	bc80      	pop	{r7}
 8008122:	4770      	bx	lr
 8008124:	2000138c 	.word	0x2000138c
 8008128:	200013f4 	.word	0x200013f4

0800812c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8008132:	4b0b      	ldr	r3, [pc, #44]	; (8008160 <xTaskGetSchedulerState+0x34>)
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	2b00      	cmp	r3, #0
 8008138:	d102      	bne.n	8008140 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800813a:	2301      	movs	r3, #1
 800813c:	607b      	str	r3, [r7, #4]
 800813e:	e008      	b.n	8008152 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008140:	4b08      	ldr	r3, [pc, #32]	; (8008164 <xTaskGetSchedulerState+0x38>)
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	2b00      	cmp	r3, #0
 8008146:	d102      	bne.n	800814e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008148:	2302      	movs	r3, #2
 800814a:	607b      	str	r3, [r7, #4]
 800814c:	e001      	b.n	8008152 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800814e:	2300      	movs	r3, #0
 8008150:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8008152:	687b      	ldr	r3, [r7, #4]
	}
 8008154:	4618      	mov	r0, r3
 8008156:	370c      	adds	r7, #12
 8008158:	46bd      	mov	sp, r7
 800815a:	bc80      	pop	{r7}
 800815c:	4770      	bx	lr
 800815e:	bf00      	nop
 8008160:	200013e0 	.word	0x200013e0
 8008164:	200013fc 	.word	0x200013fc

08008168 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008168:	b580      	push	{r7, lr}
 800816a:	b086      	sub	sp, #24
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = ( TCB_t * ) pxMutexHolder;
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008174:	2300      	movs	r3, #0
 8008176:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	2b00      	cmp	r3, #0
 800817c:	d056      	beq.n	800822c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800817e:	4b2e      	ldr	r3, [pc, #184]	; (8008238 <xTaskPriorityDisinherit+0xd0>)
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	693a      	ldr	r2, [r7, #16]
 8008184:	429a      	cmp	r2, r3
 8008186:	d00a      	beq.n	800819e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800818c:	f383 8811 	msr	BASEPRI, r3
 8008190:	f3bf 8f6f 	isb	sy
 8008194:	f3bf 8f4f 	dsb	sy
 8008198:	60fb      	str	r3, [r7, #12]
}
 800819a:	bf00      	nop
 800819c:	e7fe      	b.n	800819c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800819e:	693b      	ldr	r3, [r7, #16]
 80081a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10a      	bne.n	80081bc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	60bb      	str	r3, [r7, #8]
}
 80081b8:	bf00      	nop
 80081ba:	e7fe      	b.n	80081ba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80081bc:	693b      	ldr	r3, [r7, #16]
 80081be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081c0:	1e5a      	subs	r2, r3, #1
 80081c2:	693b      	ldr	r3, [r7, #16]
 80081c4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80081c6:	693b      	ldr	r3, [r7, #16]
 80081c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081ca:	693b      	ldr	r3, [r7, #16]
 80081cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80081ce:	429a      	cmp	r2, r3
 80081d0:	d02c      	beq.n	800822c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80081d2:	693b      	ldr	r3, [r7, #16]
 80081d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80081d6:	2b00      	cmp	r3, #0
 80081d8:	d128      	bne.n	800822c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80081da:	693b      	ldr	r3, [r7, #16]
 80081dc:	3304      	adds	r3, #4
 80081de:	4618      	mov	r0, r3
 80081e0:	f7fe fb10 	bl	8006804 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80081e4:	693b      	ldr	r3, [r7, #16]
 80081e6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80081e8:	693b      	ldr	r3, [r7, #16]
 80081ea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081f0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80081f8:	693b      	ldr	r3, [r7, #16]
 80081fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80081fc:	4b0f      	ldr	r3, [pc, #60]	; (800823c <xTaskPriorityDisinherit+0xd4>)
 80081fe:	681b      	ldr	r3, [r3, #0]
 8008200:	429a      	cmp	r2, r3
 8008202:	d903      	bls.n	800820c <xTaskPriorityDisinherit+0xa4>
 8008204:	693b      	ldr	r3, [r7, #16]
 8008206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008208:	4a0c      	ldr	r2, [pc, #48]	; (800823c <xTaskPriorityDisinherit+0xd4>)
 800820a:	6013      	str	r3, [r2, #0]
 800820c:	693b      	ldr	r3, [r7, #16]
 800820e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008210:	4613      	mov	r3, r2
 8008212:	009b      	lsls	r3, r3, #2
 8008214:	4413      	add	r3, r2
 8008216:	009b      	lsls	r3, r3, #2
 8008218:	4a09      	ldr	r2, [pc, #36]	; (8008240 <xTaskPriorityDisinherit+0xd8>)
 800821a:	441a      	add	r2, r3
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	3304      	adds	r3, #4
 8008220:	4619      	mov	r1, r3
 8008222:	4610      	mov	r0, r2
 8008224:	f7fe fa93 	bl	800674e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008228:	2301      	movs	r3, #1
 800822a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800822c:	697b      	ldr	r3, [r7, #20]
	}
 800822e:	4618      	mov	r0, r3
 8008230:	3718      	adds	r7, #24
 8008232:	46bd      	mov	sp, r7
 8008234:	bd80      	pop	{r7, pc}
 8008236:	bf00      	nop
 8008238:	20000f00 	.word	0x20000f00
 800823c:	200013dc 	.word	0x200013dc
 8008240:	20000f04 	.word	0x20000f04

08008244 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8008244:	b480      	push	{r7}
 8008246:	b083      	sub	sp, #12
 8008248:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800824a:	4b09      	ldr	r3, [pc, #36]	; (8008270 <uxTaskResetEventItemValue+0x2c>)
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	699b      	ldr	r3, [r3, #24]
 8008250:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008252:	4b07      	ldr	r3, [pc, #28]	; (8008270 <uxTaskResetEventItemValue+0x2c>)
 8008254:	681b      	ldr	r3, [r3, #0]
 8008256:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008258:	4b05      	ldr	r3, [pc, #20]	; (8008270 <uxTaskResetEventItemValue+0x2c>)
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8008260:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8008262:	687b      	ldr	r3, [r7, #4]
}
 8008264:	4618      	mov	r0, r3
 8008266:	370c      	adds	r7, #12
 8008268:	46bd      	mov	sp, r7
 800826a:	bc80      	pop	{r7}
 800826c:	4770      	bx	lr
 800826e:	bf00      	nop
 8008270:	20000f00 	.word	0x20000f00

08008274 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008274:	b580      	push	{r7, lr}
 8008276:	b084      	sub	sp, #16
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
 800827c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800827e:	4b24      	ldr	r3, [pc, #144]	; (8008310 <prvAddCurrentTaskToDelayedList+0x9c>)
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	60fb      	str	r3, [r7, #12]
	#if( INCLUDE_xTaskAbortDelay == 1 )
	{
		/* About to enter a delayed list, so ensure the ucDelayAborted flag is
		reset to pdFALSE so it can be detected as having been set to pdTRUE
		when the task leaves the Blocked state. */
		pxCurrentTCB->ucDelayAborted = pdFALSE;
 8008284:	4b23      	ldr	r3, [pc, #140]	; (8008314 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	2200      	movs	r2, #0
 800828a:	f883 205a 	strb.w	r2, [r3, #90]	; 0x5a
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800828e:	4b21      	ldr	r3, [pc, #132]	; (8008314 <prvAddCurrentTaskToDelayedList+0xa0>)
 8008290:	681b      	ldr	r3, [r3, #0]
 8008292:	3304      	adds	r3, #4
 8008294:	4618      	mov	r0, r3
 8008296:	f7fe fab5 	bl	8006804 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a0:	d10a      	bne.n	80082b8 <prvAddCurrentTaskToDelayedList+0x44>
 80082a2:	683b      	ldr	r3, [r7, #0]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d007      	beq.n	80082b8 <prvAddCurrentTaskToDelayedList+0x44>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082a8:	4b1a      	ldr	r3, [pc, #104]	; (8008314 <prvAddCurrentTaskToDelayedList+0xa0>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	3304      	adds	r3, #4
 80082ae:	4619      	mov	r1, r3
 80082b0:	4819      	ldr	r0, [pc, #100]	; (8008318 <prvAddCurrentTaskToDelayedList+0xa4>)
 80082b2:	f7fe fa4c 	bl	800674e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80082b6:	e026      	b.n	8008306 <prvAddCurrentTaskToDelayedList+0x92>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	4413      	add	r3, r2
 80082be:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80082c0:	4b14      	ldr	r3, [pc, #80]	; (8008314 <prvAddCurrentTaskToDelayedList+0xa0>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	68ba      	ldr	r2, [r7, #8]
 80082c6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80082c8:	68ba      	ldr	r2, [r7, #8]
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	429a      	cmp	r2, r3
 80082ce:	d209      	bcs.n	80082e4 <prvAddCurrentTaskToDelayedList+0x70>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082d0:	4b12      	ldr	r3, [pc, #72]	; (800831c <prvAddCurrentTaskToDelayedList+0xa8>)
 80082d2:	681a      	ldr	r2, [r3, #0]
 80082d4:	4b0f      	ldr	r3, [pc, #60]	; (8008314 <prvAddCurrentTaskToDelayedList+0xa0>)
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	3304      	adds	r3, #4
 80082da:	4619      	mov	r1, r3
 80082dc:	4610      	mov	r0, r2
 80082de:	f7fe fa59 	bl	8006794 <vListInsert>
}
 80082e2:	e010      	b.n	8008306 <prvAddCurrentTaskToDelayedList+0x92>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80082e4:	4b0e      	ldr	r3, [pc, #56]	; (8008320 <prvAddCurrentTaskToDelayedList+0xac>)
 80082e6:	681a      	ldr	r2, [r3, #0]
 80082e8:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <prvAddCurrentTaskToDelayedList+0xa0>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3304      	adds	r3, #4
 80082ee:	4619      	mov	r1, r3
 80082f0:	4610      	mov	r0, r2
 80082f2:	f7fe fa4f 	bl	8006794 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80082f6:	4b0b      	ldr	r3, [pc, #44]	; (8008324 <prvAddCurrentTaskToDelayedList+0xb0>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	68ba      	ldr	r2, [r7, #8]
 80082fc:	429a      	cmp	r2, r3
 80082fe:	d202      	bcs.n	8008306 <prvAddCurrentTaskToDelayedList+0x92>
					xNextTaskUnblockTime = xTimeToWake;
 8008300:	4a08      	ldr	r2, [pc, #32]	; (8008324 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008302:	68bb      	ldr	r3, [r7, #8]
 8008304:	6013      	str	r3, [r2, #0]
}
 8008306:	bf00      	nop
 8008308:	3710      	adds	r7, #16
 800830a:	46bd      	mov	sp, r7
 800830c:	bd80      	pop	{r7, pc}
 800830e:	bf00      	nop
 8008310:	200013d8 	.word	0x200013d8
 8008314:	20000f00 	.word	0x20000f00
 8008318:	200013c0 	.word	0x200013c0
 800831c:	20001390 	.word	0x20001390
 8008320:	2000138c 	.word	0x2000138c
 8008324:	200013f4 	.word	0x200013f4

08008328 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b08a      	sub	sp, #40	; 0x28
 800832c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800832e:	2300      	movs	r3, #0
 8008330:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8008332:	f000 facb 	bl	80088cc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008336:	4b1c      	ldr	r3, [pc, #112]	; (80083a8 <xTimerCreateTimerTask+0x80>)
 8008338:	681b      	ldr	r3, [r3, #0]
 800833a:	2b00      	cmp	r3, #0
 800833c:	d021      	beq.n	8008382 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800833e:	2300      	movs	r3, #0
 8008340:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8008342:	2300      	movs	r3, #0
 8008344:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008346:	1d3a      	adds	r2, r7, #4
 8008348:	f107 0108 	add.w	r1, r7, #8
 800834c:	f107 030c 	add.w	r3, r7, #12
 8008350:	4618      	mov	r0, r3
 8008352:	f7fe f823 	bl	800639c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008356:	6879      	ldr	r1, [r7, #4]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	68fa      	ldr	r2, [r7, #12]
 800835c:	9202      	str	r2, [sp, #8]
 800835e:	9301      	str	r3, [sp, #4]
 8008360:	2302      	movs	r3, #2
 8008362:	9300      	str	r3, [sp, #0]
 8008364:	2300      	movs	r3, #0
 8008366:	460a      	mov	r2, r1
 8008368:	4910      	ldr	r1, [pc, #64]	; (80083ac <xTimerCreateTimerTask+0x84>)
 800836a:	4811      	ldr	r0, [pc, #68]	; (80083b0 <xTimerCreateTimerTask+0x88>)
 800836c:	f7fe ff96 	bl	800729c <xTaskCreateStatic>
 8008370:	4603      	mov	r3, r0
 8008372:	4a10      	ldr	r2, [pc, #64]	; (80083b4 <xTimerCreateTimerTask+0x8c>)
 8008374:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008376:	4b0f      	ldr	r3, [pc, #60]	; (80083b4 <xTimerCreateTimerTask+0x8c>)
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	2b00      	cmp	r3, #0
 800837c:	d001      	beq.n	8008382 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800837e:	2301      	movs	r3, #1
 8008380:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8008382:	697b      	ldr	r3, [r7, #20]
 8008384:	2b00      	cmp	r3, #0
 8008386:	d10a      	bne.n	800839e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800838c:	f383 8811 	msr	BASEPRI, r3
 8008390:	f3bf 8f6f 	isb	sy
 8008394:	f3bf 8f4f 	dsb	sy
 8008398:	613b      	str	r3, [r7, #16]
}
 800839a:	bf00      	nop
 800839c:	e7fe      	b.n	800839c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800839e:	697b      	ldr	r3, [r7, #20]
}
 80083a0:	4618      	mov	r0, r3
 80083a2:	3718      	adds	r7, #24
 80083a4:	46bd      	mov	sp, r7
 80083a6:	bd80      	pop	{r7, pc}
 80083a8:	20001430 	.word	0x20001430
 80083ac:	0800e4d4 	.word	0x0800e4d4
 80083b0:	080084d5 	.word	0x080084d5
 80083b4:	20001434 	.word	0x20001434

080083b8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b08a      	sub	sp, #40	; 0x28
 80083bc:	af00      	add	r7, sp, #0
 80083be:	60f8      	str	r0, [r7, #12]
 80083c0:	60b9      	str	r1, [r7, #8]
 80083c2:	607a      	str	r2, [r7, #4]
 80083c4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80083c6:	2300      	movs	r3, #0
 80083c8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	2b00      	cmp	r3, #0
 80083ce:	d10a      	bne.n	80083e6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80083d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083d4:	f383 8811 	msr	BASEPRI, r3
 80083d8:	f3bf 8f6f 	isb	sy
 80083dc:	f3bf 8f4f 	dsb	sy
 80083e0:	623b      	str	r3, [r7, #32]
}
 80083e2:	bf00      	nop
 80083e4:	e7fe      	b.n	80083e4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80083e6:	4b1a      	ldr	r3, [pc, #104]	; (8008450 <xTimerGenericCommand+0x98>)
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d02a      	beq.n	8008444 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80083ee:	68bb      	ldr	r3, [r7, #8]
 80083f0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80083f2:	687b      	ldr	r3, [r7, #4]
 80083f4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80083fa:	68bb      	ldr	r3, [r7, #8]
 80083fc:	2b05      	cmp	r3, #5
 80083fe:	dc18      	bgt.n	8008432 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8008400:	f7ff fe94 	bl	800812c <xTaskGetSchedulerState>
 8008404:	4603      	mov	r3, r0
 8008406:	2b02      	cmp	r3, #2
 8008408:	d109      	bne.n	800841e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800840a:	4b11      	ldr	r3, [pc, #68]	; (8008450 <xTimerGenericCommand+0x98>)
 800840c:	6818      	ldr	r0, [r3, #0]
 800840e:	f107 0110 	add.w	r1, r7, #16
 8008412:	2300      	movs	r3, #0
 8008414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008416:	f7fe fb5f 	bl	8006ad8 <xQueueGenericSend>
 800841a:	6278      	str	r0, [r7, #36]	; 0x24
 800841c:	e012      	b.n	8008444 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800841e:	4b0c      	ldr	r3, [pc, #48]	; (8008450 <xTimerGenericCommand+0x98>)
 8008420:	6818      	ldr	r0, [r3, #0]
 8008422:	f107 0110 	add.w	r1, r7, #16
 8008426:	2300      	movs	r3, #0
 8008428:	2200      	movs	r2, #0
 800842a:	f7fe fb55 	bl	8006ad8 <xQueueGenericSend>
 800842e:	6278      	str	r0, [r7, #36]	; 0x24
 8008430:	e008      	b.n	8008444 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008432:	4b07      	ldr	r3, [pc, #28]	; (8008450 <xTimerGenericCommand+0x98>)
 8008434:	6818      	ldr	r0, [r3, #0]
 8008436:	f107 0110 	add.w	r1, r7, #16
 800843a:	2300      	movs	r3, #0
 800843c:	683a      	ldr	r2, [r7, #0]
 800843e:	f7fe fc49 	bl	8006cd4 <xQueueGenericSendFromISR>
 8008442:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008446:	4618      	mov	r0, r3
 8008448:	3728      	adds	r7, #40	; 0x28
 800844a:	46bd      	mov	sp, r7
 800844c:	bd80      	pop	{r7, pc}
 800844e:	bf00      	nop
 8008450:	20001430 	.word	0x20001430

08008454 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008454:	b580      	push	{r7, lr}
 8008456:	b088      	sub	sp, #32
 8008458:	af02      	add	r7, sp, #8
 800845a:	6078      	str	r0, [r7, #4]
 800845c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800845e:	4b1c      	ldr	r3, [pc, #112]	; (80084d0 <prvProcessExpiredTimer+0x7c>)
 8008460:	681b      	ldr	r3, [r3, #0]
 8008462:	68db      	ldr	r3, [r3, #12]
 8008464:	68db      	ldr	r3, [r3, #12]
 8008466:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008468:	697b      	ldr	r3, [r7, #20]
 800846a:	3304      	adds	r3, #4
 800846c:	4618      	mov	r0, r3
 800846e:	f7fe f9c9 	bl	8006804 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	69db      	ldr	r3, [r3, #28]
 8008476:	2b01      	cmp	r3, #1
 8008478:	d122      	bne.n	80084c0 <prvProcessExpiredTimer+0x6c>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800847a:	697b      	ldr	r3, [r7, #20]
 800847c:	699a      	ldr	r2, [r3, #24]
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	18d1      	adds	r1, r2, r3
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	683a      	ldr	r2, [r7, #0]
 8008486:	6978      	ldr	r0, [r7, #20]
 8008488:	f000 f8c8 	bl	800861c <prvInsertTimerInActiveList>
 800848c:	4603      	mov	r3, r0
 800848e:	2b00      	cmp	r3, #0
 8008490:	d016      	beq.n	80084c0 <prvProcessExpiredTimer+0x6c>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008492:	2300      	movs	r3, #0
 8008494:	9300      	str	r3, [sp, #0]
 8008496:	2300      	movs	r3, #0
 8008498:	687a      	ldr	r2, [r7, #4]
 800849a:	2100      	movs	r1, #0
 800849c:	6978      	ldr	r0, [r7, #20]
 800849e:	f7ff ff8b 	bl	80083b8 <xTimerGenericCommand>
 80084a2:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80084a4:	693b      	ldr	r3, [r7, #16]
 80084a6:	2b00      	cmp	r3, #0
 80084a8:	d10a      	bne.n	80084c0 <prvProcessExpiredTimer+0x6c>
	__asm volatile
 80084aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084ae:	f383 8811 	msr	BASEPRI, r3
 80084b2:	f3bf 8f6f 	isb	sy
 80084b6:	f3bf 8f4f 	dsb	sy
 80084ba:	60fb      	str	r3, [r7, #12]
}
 80084bc:	bf00      	nop
 80084be:	e7fe      	b.n	80084be <prvProcessExpiredTimer+0x6a>
	{
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80084c0:	697b      	ldr	r3, [r7, #20]
 80084c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084c4:	6978      	ldr	r0, [r7, #20]
 80084c6:	4798      	blx	r3
}
 80084c8:	bf00      	nop
 80084ca:	3718      	adds	r7, #24
 80084cc:	46bd      	mov	sp, r7
 80084ce:	bd80      	pop	{r7, pc}
 80084d0:	20001428 	.word	0x20001428

080084d4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
 80084d4:	b580      	push	{r7, lr}
 80084d6:	b084      	sub	sp, #16
 80084d8:	af00      	add	r7, sp, #0
 80084da:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084dc:	f107 0308 	add.w	r3, r7, #8
 80084e0:	4618      	mov	r0, r3
 80084e2:	f000 f857 	bl	8008594 <prvGetNextExpireTime>
 80084e6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80084e8:	68bb      	ldr	r3, [r7, #8]
 80084ea:	4619      	mov	r1, r3
 80084ec:	68f8      	ldr	r0, [r7, #12]
 80084ee:	f000 f803 	bl	80084f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80084f2:	f000 f8d5 	bl	80086a0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80084f6:	e7f1      	b.n	80084dc <prvTimerTask+0x8>

080084f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80084f8:	b580      	push	{r7, lr}
 80084fa:	b084      	sub	sp, #16
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
 8008500:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8008502:	f7ff f97f 	bl	8007804 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008506:	f107 0308 	add.w	r3, r7, #8
 800850a:	4618      	mov	r0, r3
 800850c:	f000 f866 	bl	80085dc <prvSampleTimeNow>
 8008510:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008512:	68bb      	ldr	r3, [r7, #8]
 8008514:	2b00      	cmp	r3, #0
 8008516:	d130      	bne.n	800857a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8008518:	683b      	ldr	r3, [r7, #0]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d10a      	bne.n	8008534 <prvProcessTimerOrBlockTask+0x3c>
 800851e:	687a      	ldr	r2, [r7, #4]
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	429a      	cmp	r2, r3
 8008524:	d806      	bhi.n	8008534 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8008526:	f7ff f97b 	bl	8007820 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800852a:	68f9      	ldr	r1, [r7, #12]
 800852c:	6878      	ldr	r0, [r7, #4]
 800852e:	f7ff ff91 	bl	8008454 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008532:	e024      	b.n	800857e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008534:	683b      	ldr	r3, [r7, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d008      	beq.n	800854c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800853a:	4b13      	ldr	r3, [pc, #76]	; (8008588 <prvProcessTimerOrBlockTask+0x90>)
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	2b00      	cmp	r3, #0
 8008542:	bf0c      	ite	eq
 8008544:	2301      	moveq	r3, #1
 8008546:	2300      	movne	r3, #0
 8008548:	b2db      	uxtb	r3, r3
 800854a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800854c:	4b0f      	ldr	r3, [pc, #60]	; (800858c <prvProcessTimerOrBlockTask+0x94>)
 800854e:	6818      	ldr	r0, [r3, #0]
 8008550:	687a      	ldr	r2, [r7, #4]
 8008552:	68fb      	ldr	r3, [r7, #12]
 8008554:	1ad3      	subs	r3, r2, r3
 8008556:	683a      	ldr	r2, [r7, #0]
 8008558:	4619      	mov	r1, r3
 800855a:	f7fe fe6b 	bl	8007234 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800855e:	f7ff f95f 	bl	8007820 <xTaskResumeAll>
 8008562:	4603      	mov	r3, r0
 8008564:	2b00      	cmp	r3, #0
 8008566:	d10a      	bne.n	800857e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8008568:	4b09      	ldr	r3, [pc, #36]	; (8008590 <prvProcessTimerOrBlockTask+0x98>)
 800856a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800856e:	601a      	str	r2, [r3, #0]
 8008570:	f3bf 8f4f 	dsb	sy
 8008574:	f3bf 8f6f 	isb	sy
}
 8008578:	e001      	b.n	800857e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800857a:	f7ff f951 	bl	8007820 <xTaskResumeAll>
}
 800857e:	bf00      	nop
 8008580:	3710      	adds	r7, #16
 8008582:	46bd      	mov	sp, r7
 8008584:	bd80      	pop	{r7, pc}
 8008586:	bf00      	nop
 8008588:	2000142c 	.word	0x2000142c
 800858c:	20001430 	.word	0x20001430
 8008590:	e000ed04 	.word	0xe000ed04

08008594 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008594:	b480      	push	{r7}
 8008596:	b085      	sub	sp, #20
 8008598:	af00      	add	r7, sp, #0
 800859a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800859c:	4b0e      	ldr	r3, [pc, #56]	; (80085d8 <prvGetNextExpireTime+0x44>)
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	2b00      	cmp	r3, #0
 80085a4:	bf0c      	ite	eq
 80085a6:	2301      	moveq	r3, #1
 80085a8:	2300      	movne	r3, #0
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	461a      	mov	r2, r3
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d105      	bne.n	80085c6 <prvGetNextExpireTime+0x32>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80085ba:	4b07      	ldr	r3, [pc, #28]	; (80085d8 <prvGetNextExpireTime+0x44>)
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	68db      	ldr	r3, [r3, #12]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	60fb      	str	r3, [r7, #12]
 80085c4:	e001      	b.n	80085ca <prvGetNextExpireTime+0x36>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80085c6:	2300      	movs	r3, #0
 80085c8:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80085ca:	68fb      	ldr	r3, [r7, #12]
}
 80085cc:	4618      	mov	r0, r3
 80085ce:	3714      	adds	r7, #20
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bc80      	pop	{r7}
 80085d4:	4770      	bx	lr
 80085d6:	bf00      	nop
 80085d8:	20001428 	.word	0x20001428

080085dc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80085dc:	b580      	push	{r7, lr}
 80085de:	b084      	sub	sp, #16
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80085e4:	f7ff f9ba 	bl	800795c <xTaskGetTickCount>
 80085e8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80085ea:	4b0b      	ldr	r3, [pc, #44]	; (8008618 <prvSampleTimeNow+0x3c>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	68fa      	ldr	r2, [r7, #12]
 80085f0:	429a      	cmp	r2, r3
 80085f2:	d205      	bcs.n	8008600 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80085f4:	f000 f908 	bl	8008808 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2201      	movs	r2, #1
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	e002      	b.n	8008606 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	2200      	movs	r2, #0
 8008604:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8008606:	4a04      	ldr	r2, [pc, #16]	; (8008618 <prvSampleTimeNow+0x3c>)
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800860c:	68fb      	ldr	r3, [r7, #12]
}
 800860e:	4618      	mov	r0, r3
 8008610:	3710      	adds	r7, #16
 8008612:	46bd      	mov	sp, r7
 8008614:	bd80      	pop	{r7, pc}
 8008616:	bf00      	nop
 8008618:	20001438 	.word	0x20001438

0800861c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800861c:	b580      	push	{r7, lr}
 800861e:	b086      	sub	sp, #24
 8008620:	af00      	add	r7, sp, #0
 8008622:	60f8      	str	r0, [r7, #12]
 8008624:	60b9      	str	r1, [r7, #8]
 8008626:	607a      	str	r2, [r7, #4]
 8008628:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800862a:	2300      	movs	r3, #0
 800862c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800862e:	68fb      	ldr	r3, [r7, #12]
 8008630:	68ba      	ldr	r2, [r7, #8]
 8008632:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	68fa      	ldr	r2, [r7, #12]
 8008638:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800863a:	68ba      	ldr	r2, [r7, #8]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	429a      	cmp	r2, r3
 8008640:	d812      	bhi.n	8008668 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008642:	687a      	ldr	r2, [r7, #4]
 8008644:	683b      	ldr	r3, [r7, #0]
 8008646:	1ad2      	subs	r2, r2, r3
 8008648:	68fb      	ldr	r3, [r7, #12]
 800864a:	699b      	ldr	r3, [r3, #24]
 800864c:	429a      	cmp	r2, r3
 800864e:	d302      	bcc.n	8008656 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008650:	2301      	movs	r3, #1
 8008652:	617b      	str	r3, [r7, #20]
 8008654:	e01b      	b.n	800868e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008656:	4b10      	ldr	r3, [pc, #64]	; (8008698 <prvInsertTimerInActiveList+0x7c>)
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	3304      	adds	r3, #4
 800865e:	4619      	mov	r1, r3
 8008660:	4610      	mov	r0, r2
 8008662:	f7fe f897 	bl	8006794 <vListInsert>
 8008666:	e012      	b.n	800868e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008668:	687a      	ldr	r2, [r7, #4]
 800866a:	683b      	ldr	r3, [r7, #0]
 800866c:	429a      	cmp	r2, r3
 800866e:	d206      	bcs.n	800867e <prvInsertTimerInActiveList+0x62>
 8008670:	68ba      	ldr	r2, [r7, #8]
 8008672:	683b      	ldr	r3, [r7, #0]
 8008674:	429a      	cmp	r2, r3
 8008676:	d302      	bcc.n	800867e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008678:	2301      	movs	r3, #1
 800867a:	617b      	str	r3, [r7, #20]
 800867c:	e007      	b.n	800868e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800867e:	4b07      	ldr	r3, [pc, #28]	; (800869c <prvInsertTimerInActiveList+0x80>)
 8008680:	681a      	ldr	r2, [r3, #0]
 8008682:	68fb      	ldr	r3, [r7, #12]
 8008684:	3304      	adds	r3, #4
 8008686:	4619      	mov	r1, r3
 8008688:	4610      	mov	r0, r2
 800868a:	f7fe f883 	bl	8006794 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800868e:	697b      	ldr	r3, [r7, #20]
}
 8008690:	4618      	mov	r0, r3
 8008692:	3718      	adds	r7, #24
 8008694:	46bd      	mov	sp, r7
 8008696:	bd80      	pop	{r7, pc}
 8008698:	2000142c 	.word	0x2000142c
 800869c:	20001428 	.word	0x20001428

080086a0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80086a0:	b580      	push	{r7, lr}
 80086a2:	b08e      	sub	sp, #56	; 0x38
 80086a4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80086a6:	e09d      	b.n	80087e4 <prvProcessReceivedCommands+0x144>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	da18      	bge.n	80086e0 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80086ae:	1d3b      	adds	r3, r7, #4
 80086b0:	3304      	adds	r3, #4
 80086b2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80086b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086b6:	2b00      	cmp	r3, #0
 80086b8:	d10a      	bne.n	80086d0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80086ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086be:	f383 8811 	msr	BASEPRI, r3
 80086c2:	f3bf 8f6f 	isb	sy
 80086c6:	f3bf 8f4f 	dsb	sy
 80086ca:	61fb      	str	r3, [r7, #28]
}
 80086cc:	bf00      	nop
 80086ce:	e7fe      	b.n	80086ce <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80086d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086d6:	6850      	ldr	r0, [r2, #4]
 80086d8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80086da:	6892      	ldr	r2, [r2, #8]
 80086dc:	4611      	mov	r1, r2
 80086de:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	2b00      	cmp	r3, #0
 80086e4:	db7d      	blt.n	80087e2 <prvProcessReceivedCommands+0x142>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80086ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086ec:	695b      	ldr	r3, [r3, #20]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	d004      	beq.n	80086fc <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80086f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80086f4:	3304      	adds	r3, #4
 80086f6:	4618      	mov	r0, r3
 80086f8:	f7fe f884 	bl	8006804 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80086fc:	463b      	mov	r3, r7
 80086fe:	4618      	mov	r0, r3
 8008700:	f7ff ff6c 	bl	80085dc <prvSampleTimeNow>
 8008704:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	2b09      	cmp	r3, #9
 800870a:	d86b      	bhi.n	80087e4 <prvProcessReceivedCommands+0x144>
 800870c:	a201      	add	r2, pc, #4	; (adr r2, 8008714 <prvProcessReceivedCommands+0x74>)
 800870e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008712:	bf00      	nop
 8008714:	0800873d 	.word	0x0800873d
 8008718:	0800873d 	.word	0x0800873d
 800871c:	0800873d 	.word	0x0800873d
 8008720:	080087e5 	.word	0x080087e5
 8008724:	08008799 	.word	0x08008799
 8008728:	080087d1 	.word	0x080087d1
 800872c:	0800873d 	.word	0x0800873d
 8008730:	0800873d 	.word	0x0800873d
 8008734:	080087e5 	.word	0x080087e5
 8008738:	08008799 	.word	0x08008799
			    case tmrCOMMAND_START_FROM_ISR :
			    case tmrCOMMAND_RESET :
			    case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800873c:	68ba      	ldr	r2, [r7, #8]
 800873e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008740:	699b      	ldr	r3, [r3, #24]
 8008742:	18d1      	adds	r1, r2, r3
 8008744:	68bb      	ldr	r3, [r7, #8]
 8008746:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008748:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800874a:	f7ff ff67 	bl	800861c <prvInsertTimerInActiveList>
 800874e:	4603      	mov	r3, r0
 8008750:	2b00      	cmp	r3, #0
 8008752:	d047      	beq.n	80087e4 <prvProcessReceivedCommands+0x144>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008754:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008758:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800875a:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 800875c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800875e:	69db      	ldr	r3, [r3, #28]
 8008760:	2b01      	cmp	r3, #1
 8008762:	d13f      	bne.n	80087e4 <prvProcessReceivedCommands+0x144>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008764:	68ba      	ldr	r2, [r7, #8]
 8008766:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008768:	699b      	ldr	r3, [r3, #24]
 800876a:	441a      	add	r2, r3
 800876c:	2300      	movs	r3, #0
 800876e:	9300      	str	r3, [sp, #0]
 8008770:	2300      	movs	r3, #0
 8008772:	2100      	movs	r1, #0
 8008774:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008776:	f7ff fe1f 	bl	80083b8 <xTimerGenericCommand>
 800877a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800877c:	6a3b      	ldr	r3, [r7, #32]
 800877e:	2b00      	cmp	r3, #0
 8008780:	d130      	bne.n	80087e4 <prvProcessReceivedCommands+0x144>
	__asm volatile
 8008782:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008786:	f383 8811 	msr	BASEPRI, r3
 800878a:	f3bf 8f6f 	isb	sy
 800878e:	f3bf 8f4f 	dsb	sy
 8008792:	61bb      	str	r3, [r7, #24]
}
 8008794:	bf00      	nop
 8008796:	e7fe      	b.n	8008796 <prvProcessReceivedCommands+0xf6>
					There is nothing to do here. */
					break;

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008798:	68ba      	ldr	r2, [r7, #8]
 800879a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800879c:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800879e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a0:	699b      	ldr	r3, [r3, #24]
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d10a      	bne.n	80087bc <prvProcessReceivedCommands+0x11c>
	__asm volatile
 80087a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087aa:	f383 8811 	msr	BASEPRI, r3
 80087ae:	f3bf 8f6f 	isb	sy
 80087b2:	f3bf 8f4f 	dsb	sy
 80087b6:	617b      	str	r3, [r7, #20]
}
 80087b8:	bf00      	nop
 80087ba:	e7fe      	b.n	80087ba <prvProcessReceivedCommands+0x11a>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80087bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087be:	699a      	ldr	r2, [r3, #24]
 80087c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c2:	18d1      	adds	r1, r2, r3
 80087c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087ca:	f7ff ff27 	bl	800861c <prvInsertTimerInActiveList>
					break;
 80087ce:	e009      	b.n	80087e4 <prvProcessReceivedCommands+0x144>
					#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
					{
						/* The timer could have been allocated statically or
						dynamically, so check before attempting to free the
						memory. */
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80087d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087d2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d104      	bne.n	80087e4 <prvProcessReceivedCommands+0x144>
						{
							vPortFree( pxTimer );
 80087da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80087dc:	f000 fb6a 	bl	8008eb4 <vPortFree>
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80087e0:	e000      	b.n	80087e4 <prvProcessReceivedCommands+0x144>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80087e2:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80087e4:	4b07      	ldr	r3, [pc, #28]	; (8008804 <prvProcessReceivedCommands+0x164>)
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	1d39      	adds	r1, r7, #4
 80087ea:	2200      	movs	r2, #0
 80087ec:	4618      	mov	r0, r3
 80087ee:	f7fe fb09 	bl	8006e04 <xQueueReceive>
 80087f2:	4603      	mov	r3, r0
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	f47f af57 	bne.w	80086a8 <prvProcessReceivedCommands+0x8>
	}
}
 80087fa:	bf00      	nop
 80087fc:	bf00      	nop
 80087fe:	3730      	adds	r7, #48	; 0x30
 8008800:	46bd      	mov	sp, r7
 8008802:	bd80      	pop	{r7, pc}
 8008804:	20001430 	.word	0x20001430

08008808 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008808:	b580      	push	{r7, lr}
 800880a:	b088      	sub	sp, #32
 800880c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800880e:	e045      	b.n	800889c <prvSwitchTimerLists+0x94>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008810:	4b2c      	ldr	r3, [pc, #176]	; (80088c4 <prvSwitchTimerLists+0xbc>)
 8008812:	681b      	ldr	r3, [r3, #0]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
 800881a:	4b2a      	ldr	r3, [pc, #168]	; (80088c4 <prvSwitchTimerLists+0xbc>)
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	68db      	ldr	r3, [r3, #12]
 8008820:	68db      	ldr	r3, [r3, #12]
 8008822:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008824:	68fb      	ldr	r3, [r7, #12]
 8008826:	3304      	adds	r3, #4
 8008828:	4618      	mov	r0, r3
 800882a:	f7fd ffeb 	bl	8006804 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008832:	68f8      	ldr	r0, [r7, #12]
 8008834:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	69db      	ldr	r3, [r3, #28]
 800883a:	2b01      	cmp	r3, #1
 800883c:	d12e      	bne.n	800889c <prvSwitchTimerLists+0x94>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800883e:	68fb      	ldr	r3, [r7, #12]
 8008840:	699b      	ldr	r3, [r3, #24]
 8008842:	693a      	ldr	r2, [r7, #16]
 8008844:	4413      	add	r3, r2
 8008846:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008848:	68ba      	ldr	r2, [r7, #8]
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	429a      	cmp	r2, r3
 800884e:	d90e      	bls.n	800886e <prvSwitchTimerLists+0x66>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008850:	68fb      	ldr	r3, [r7, #12]
 8008852:	68ba      	ldr	r2, [r7, #8]
 8008854:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	68fa      	ldr	r2, [r7, #12]
 800885a:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800885c:	4b19      	ldr	r3, [pc, #100]	; (80088c4 <prvSwitchTimerLists+0xbc>)
 800885e:	681a      	ldr	r2, [r3, #0]
 8008860:	68fb      	ldr	r3, [r7, #12]
 8008862:	3304      	adds	r3, #4
 8008864:	4619      	mov	r1, r3
 8008866:	4610      	mov	r0, r2
 8008868:	f7fd ff94 	bl	8006794 <vListInsert>
 800886c:	e016      	b.n	800889c <prvSwitchTimerLists+0x94>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800886e:	2300      	movs	r3, #0
 8008870:	9300      	str	r3, [sp, #0]
 8008872:	2300      	movs	r3, #0
 8008874:	693a      	ldr	r2, [r7, #16]
 8008876:	2100      	movs	r1, #0
 8008878:	68f8      	ldr	r0, [r7, #12]
 800887a:	f7ff fd9d 	bl	80083b8 <xTimerGenericCommand>
 800887e:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d10a      	bne.n	800889c <prvSwitchTimerLists+0x94>
	__asm volatile
 8008886:	f04f 0350 	mov.w	r3, #80	; 0x50
 800888a:	f383 8811 	msr	BASEPRI, r3
 800888e:	f3bf 8f6f 	isb	sy
 8008892:	f3bf 8f4f 	dsb	sy
 8008896:	603b      	str	r3, [r7, #0]
}
 8008898:	bf00      	nop
 800889a:	e7fe      	b.n	800889a <prvSwitchTimerLists+0x92>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800889c:	4b09      	ldr	r3, [pc, #36]	; (80088c4 <prvSwitchTimerLists+0xbc>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	681b      	ldr	r3, [r3, #0]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d1b4      	bne.n	8008810 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80088a6:	4b07      	ldr	r3, [pc, #28]	; (80088c4 <prvSwitchTimerLists+0xbc>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80088ac:	4b06      	ldr	r3, [pc, #24]	; (80088c8 <prvSwitchTimerLists+0xc0>)
 80088ae:	681b      	ldr	r3, [r3, #0]
 80088b0:	4a04      	ldr	r2, [pc, #16]	; (80088c4 <prvSwitchTimerLists+0xbc>)
 80088b2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80088b4:	4a04      	ldr	r2, [pc, #16]	; (80088c8 <prvSwitchTimerLists+0xc0>)
 80088b6:	697b      	ldr	r3, [r7, #20]
 80088b8:	6013      	str	r3, [r2, #0]
}
 80088ba:	bf00      	nop
 80088bc:	3718      	adds	r7, #24
 80088be:	46bd      	mov	sp, r7
 80088c0:	bd80      	pop	{r7, pc}
 80088c2:	bf00      	nop
 80088c4:	20001428 	.word	0x20001428
 80088c8:	2000142c 	.word	0x2000142c

080088cc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80088cc:	b580      	push	{r7, lr}
 80088ce:	b082      	sub	sp, #8
 80088d0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80088d2:	f000 f92b 	bl	8008b2c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80088d6:	4b15      	ldr	r3, [pc, #84]	; (800892c <prvCheckForValidListAndQueue+0x60>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d120      	bne.n	8008920 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80088de:	4814      	ldr	r0, [pc, #80]	; (8008930 <prvCheckForValidListAndQueue+0x64>)
 80088e0:	f7fd ff0a 	bl	80066f8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80088e4:	4813      	ldr	r0, [pc, #76]	; (8008934 <prvCheckForValidListAndQueue+0x68>)
 80088e6:	f7fd ff07 	bl	80066f8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80088ea:	4b13      	ldr	r3, [pc, #76]	; (8008938 <prvCheckForValidListAndQueue+0x6c>)
 80088ec:	4a10      	ldr	r2, [pc, #64]	; (8008930 <prvCheckForValidListAndQueue+0x64>)
 80088ee:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80088f0:	4b12      	ldr	r3, [pc, #72]	; (800893c <prvCheckForValidListAndQueue+0x70>)
 80088f2:	4a10      	ldr	r2, [pc, #64]	; (8008934 <prvCheckForValidListAndQueue+0x68>)
 80088f4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80088f6:	2300      	movs	r3, #0
 80088f8:	9300      	str	r3, [sp, #0]
 80088fa:	4b11      	ldr	r3, [pc, #68]	; (8008940 <prvCheckForValidListAndQueue+0x74>)
 80088fc:	4a11      	ldr	r2, [pc, #68]	; (8008944 <prvCheckForValidListAndQueue+0x78>)
 80088fe:	2110      	movs	r1, #16
 8008900:	200a      	movs	r0, #10
 8008902:	f7fe f811 	bl	8006928 <xQueueGenericCreateStatic>
 8008906:	4603      	mov	r3, r0
 8008908:	4a08      	ldr	r2, [pc, #32]	; (800892c <prvCheckForValidListAndQueue+0x60>)
 800890a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800890c:	4b07      	ldr	r3, [pc, #28]	; (800892c <prvCheckForValidListAndQueue+0x60>)
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d005      	beq.n	8008920 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008914:	4b05      	ldr	r3, [pc, #20]	; (800892c <prvCheckForValidListAndQueue+0x60>)
 8008916:	681b      	ldr	r3, [r3, #0]
 8008918:	490b      	ldr	r1, [pc, #44]	; (8008948 <prvCheckForValidListAndQueue+0x7c>)
 800891a:	4618      	mov	r0, r3
 800891c:	f7fe fc62 	bl	80071e4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008920:	f000 f934 	bl	8008b8c <vPortExitCritical>
}
 8008924:	bf00      	nop
 8008926:	46bd      	mov	sp, r7
 8008928:	bd80      	pop	{r7, pc}
 800892a:	bf00      	nop
 800892c:	20001430 	.word	0x20001430
 8008930:	20001400 	.word	0x20001400
 8008934:	20001414 	.word	0x20001414
 8008938:	20001428 	.word	0x20001428
 800893c:	2000142c 	.word	0x2000142c
 8008940:	200014dc 	.word	0x200014dc
 8008944:	2000143c 	.word	0x2000143c
 8008948:	0800e4dc 	.word	0x0800e4dc

0800894c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800894c:	b480      	push	{r7}
 800894e:	b085      	sub	sp, #20
 8008950:	af00      	add	r7, sp, #0
 8008952:	60f8      	str	r0, [r7, #12]
 8008954:	60b9      	str	r1, [r7, #8]
 8008956:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	3b04      	subs	r3, #4
 800895c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800895e:	68fb      	ldr	r3, [r7, #12]
 8008960:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008964:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	3b04      	subs	r3, #4
 800896a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800896c:	68bb      	ldr	r3, [r7, #8]
 800896e:	f023 0201 	bic.w	r2, r3, #1
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	3b04      	subs	r3, #4
 800897a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800897c:	4a08      	ldr	r2, [pc, #32]	; (80089a0 <pxPortInitialiseStack+0x54>)
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	3b14      	subs	r3, #20
 8008986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008988:	687a      	ldr	r2, [r7, #4]
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	3b20      	subs	r3, #32
 8008992:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008994:	68fb      	ldr	r3, [r7, #12]
}
 8008996:	4618      	mov	r0, r3
 8008998:	3714      	adds	r7, #20
 800899a:	46bd      	mov	sp, r7
 800899c:	bc80      	pop	{r7}
 800899e:	4770      	bx	lr
 80089a0:	080089a5 	.word	0x080089a5

080089a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80089a4:	b480      	push	{r7}
 80089a6:	b085      	sub	sp, #20
 80089a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80089aa:	2300      	movs	r3, #0
 80089ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80089ae:	4b12      	ldr	r3, [pc, #72]	; (80089f8 <prvTaskExitError+0x54>)
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80089b6:	d00a      	beq.n	80089ce <prvTaskExitError+0x2a>
	__asm volatile
 80089b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089bc:	f383 8811 	msr	BASEPRI, r3
 80089c0:	f3bf 8f6f 	isb	sy
 80089c4:	f3bf 8f4f 	dsb	sy
 80089c8:	60fb      	str	r3, [r7, #12]
}
 80089ca:	bf00      	nop
 80089cc:	e7fe      	b.n	80089cc <prvTaskExitError+0x28>
	__asm volatile
 80089ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80089d2:	f383 8811 	msr	BASEPRI, r3
 80089d6:	f3bf 8f6f 	isb	sy
 80089da:	f3bf 8f4f 	dsb	sy
 80089de:	60bb      	str	r3, [r7, #8]
}
 80089e0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80089e2:	bf00      	nop
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d0fc      	beq.n	80089e4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80089ea:	bf00      	nop
 80089ec:	bf00      	nop
 80089ee:	3714      	adds	r7, #20
 80089f0:	46bd      	mov	sp, r7
 80089f2:	bc80      	pop	{r7}
 80089f4:	4770      	bx	lr
 80089f6:	bf00      	nop
 80089f8:	20000028 	.word	0x20000028
 80089fc:	00000000 	.word	0x00000000

08008a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008a00:	4b07      	ldr	r3, [pc, #28]	; (8008a20 <pxCurrentTCBConst2>)
 8008a02:	6819      	ldr	r1, [r3, #0]
 8008a04:	6808      	ldr	r0, [r1, #0]
 8008a06:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008a0a:	f380 8809 	msr	PSP, r0
 8008a0e:	f3bf 8f6f 	isb	sy
 8008a12:	f04f 0000 	mov.w	r0, #0
 8008a16:	f380 8811 	msr	BASEPRI, r0
 8008a1a:	f04e 0e0d 	orr.w	lr, lr, #13
 8008a1e:	4770      	bx	lr

08008a20 <pxCurrentTCBConst2>:
 8008a20:	20000f00 	.word	0x20000f00
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008a24:	bf00      	nop
 8008a26:	bf00      	nop

08008a28 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008a28:	4806      	ldr	r0, [pc, #24]	; (8008a44 <prvPortStartFirstTask+0x1c>)
 8008a2a:	6800      	ldr	r0, [r0, #0]
 8008a2c:	6800      	ldr	r0, [r0, #0]
 8008a2e:	f380 8808 	msr	MSP, r0
 8008a32:	b662      	cpsie	i
 8008a34:	b661      	cpsie	f
 8008a36:	f3bf 8f4f 	dsb	sy
 8008a3a:	f3bf 8f6f 	isb	sy
 8008a3e:	df00      	svc	0
 8008a40:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008a42:	bf00      	nop
 8008a44:	e000ed08 	.word	0xe000ed08

08008a48 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008a48:	b580      	push	{r7, lr}
 8008a4a:	b084      	sub	sp, #16
 8008a4c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008a4e:	4b32      	ldr	r3, [pc, #200]	; (8008b18 <xPortStartScheduler+0xd0>)
 8008a50:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	781b      	ldrb	r3, [r3, #0]
 8008a56:	b2db      	uxtb	r3, r3
 8008a58:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008a5a:	68fb      	ldr	r3, [r7, #12]
 8008a5c:	22ff      	movs	r2, #255	; 0xff
 8008a5e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	781b      	ldrb	r3, [r3, #0]
 8008a64:	b2db      	uxtb	r3, r3
 8008a66:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008a68:	78fb      	ldrb	r3, [r7, #3]
 8008a6a:	b2db      	uxtb	r3, r3
 8008a6c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008a70:	b2da      	uxtb	r2, r3
 8008a72:	4b2a      	ldr	r3, [pc, #168]	; (8008b1c <xPortStartScheduler+0xd4>)
 8008a74:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008a76:	4b2a      	ldr	r3, [pc, #168]	; (8008b20 <xPortStartScheduler+0xd8>)
 8008a78:	2207      	movs	r2, #7
 8008a7a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a7c:	e009      	b.n	8008a92 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8008a7e:	4b28      	ldr	r3, [pc, #160]	; (8008b20 <xPortStartScheduler+0xd8>)
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	3b01      	subs	r3, #1
 8008a84:	4a26      	ldr	r2, [pc, #152]	; (8008b20 <xPortStartScheduler+0xd8>)
 8008a86:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008a88:	78fb      	ldrb	r3, [r7, #3]
 8008a8a:	b2db      	uxtb	r3, r3
 8008a8c:	005b      	lsls	r3, r3, #1
 8008a8e:	b2db      	uxtb	r3, r3
 8008a90:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008a92:	78fb      	ldrb	r3, [r7, #3]
 8008a94:	b2db      	uxtb	r3, r3
 8008a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a9a:	2b80      	cmp	r3, #128	; 0x80
 8008a9c:	d0ef      	beq.n	8008a7e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008a9e:	4b20      	ldr	r3, [pc, #128]	; (8008b20 <xPortStartScheduler+0xd8>)
 8008aa0:	681b      	ldr	r3, [r3, #0]
 8008aa2:	f1c3 0307 	rsb	r3, r3, #7
 8008aa6:	2b04      	cmp	r3, #4
 8008aa8:	d00a      	beq.n	8008ac0 <xPortStartScheduler+0x78>
	__asm volatile
 8008aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008aae:	f383 8811 	msr	BASEPRI, r3
 8008ab2:	f3bf 8f6f 	isb	sy
 8008ab6:	f3bf 8f4f 	dsb	sy
 8008aba:	60bb      	str	r3, [r7, #8]
}
 8008abc:	bf00      	nop
 8008abe:	e7fe      	b.n	8008abe <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008ac0:	4b17      	ldr	r3, [pc, #92]	; (8008b20 <xPortStartScheduler+0xd8>)
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	021b      	lsls	r3, r3, #8
 8008ac6:	4a16      	ldr	r2, [pc, #88]	; (8008b20 <xPortStartScheduler+0xd8>)
 8008ac8:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008aca:	4b15      	ldr	r3, [pc, #84]	; (8008b20 <xPortStartScheduler+0xd8>)
 8008acc:	681b      	ldr	r3, [r3, #0]
 8008ace:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008ad2:	4a13      	ldr	r2, [pc, #76]	; (8008b20 <xPortStartScheduler+0xd8>)
 8008ad4:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008ad6:	687b      	ldr	r3, [r7, #4]
 8008ad8:	b2da      	uxtb	r2, r3
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008ade:	4b11      	ldr	r3, [pc, #68]	; (8008b24 <xPortStartScheduler+0xdc>)
 8008ae0:	681b      	ldr	r3, [r3, #0]
 8008ae2:	4a10      	ldr	r2, [pc, #64]	; (8008b24 <xPortStartScheduler+0xdc>)
 8008ae4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008ae8:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008aea:	4b0e      	ldr	r3, [pc, #56]	; (8008b24 <xPortStartScheduler+0xdc>)
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	4a0d      	ldr	r2, [pc, #52]	; (8008b24 <xPortStartScheduler+0xdc>)
 8008af0:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008af4:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008af6:	f000 f8b9 	bl	8008c6c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008afa:	4b0b      	ldr	r3, [pc, #44]	; (8008b28 <xPortStartScheduler+0xe0>)
 8008afc:	2200      	movs	r2, #0
 8008afe:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008b00:	f7ff ff92 	bl	8008a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008b04:	f7fe fff6 	bl	8007af4 <vTaskSwitchContext>
	prvTaskExitError();
 8008b08:	f7ff ff4c 	bl	80089a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008b0c:	2300      	movs	r3, #0
}
 8008b0e:	4618      	mov	r0, r3
 8008b10:	3710      	adds	r7, #16
 8008b12:	46bd      	mov	sp, r7
 8008b14:	bd80      	pop	{r7, pc}
 8008b16:	bf00      	nop
 8008b18:	e000e400 	.word	0xe000e400
 8008b1c:	2000152c 	.word	0x2000152c
 8008b20:	20001530 	.word	0x20001530
 8008b24:	e000ed20 	.word	0xe000ed20
 8008b28:	20000028 	.word	0x20000028

08008b2c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008b2c:	b480      	push	{r7}
 8008b2e:	b083      	sub	sp, #12
 8008b30:	af00      	add	r7, sp, #0
	__asm volatile
 8008b32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b36:	f383 8811 	msr	BASEPRI, r3
 8008b3a:	f3bf 8f6f 	isb	sy
 8008b3e:	f3bf 8f4f 	dsb	sy
 8008b42:	607b      	str	r3, [r7, #4]
}
 8008b44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008b46:	4b0f      	ldr	r3, [pc, #60]	; (8008b84 <vPortEnterCritical+0x58>)
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	3301      	adds	r3, #1
 8008b4c:	4a0d      	ldr	r2, [pc, #52]	; (8008b84 <vPortEnterCritical+0x58>)
 8008b4e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008b50:	4b0c      	ldr	r3, [pc, #48]	; (8008b84 <vPortEnterCritical+0x58>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d10f      	bne.n	8008b78 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008b58:	4b0b      	ldr	r3, [pc, #44]	; (8008b88 <vPortEnterCritical+0x5c>)
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	b2db      	uxtb	r3, r3
 8008b5e:	2b00      	cmp	r3, #0
 8008b60:	d00a      	beq.n	8008b78 <vPortEnterCritical+0x4c>
	__asm volatile
 8008b62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b66:	f383 8811 	msr	BASEPRI, r3
 8008b6a:	f3bf 8f6f 	isb	sy
 8008b6e:	f3bf 8f4f 	dsb	sy
 8008b72:	603b      	str	r3, [r7, #0]
}
 8008b74:	bf00      	nop
 8008b76:	e7fe      	b.n	8008b76 <vPortEnterCritical+0x4a>
	}
}
 8008b78:	bf00      	nop
 8008b7a:	370c      	adds	r7, #12
 8008b7c:	46bd      	mov	sp, r7
 8008b7e:	bc80      	pop	{r7}
 8008b80:	4770      	bx	lr
 8008b82:	bf00      	nop
 8008b84:	20000028 	.word	0x20000028
 8008b88:	e000ed04 	.word	0xe000ed04

08008b8c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008b8c:	b480      	push	{r7}
 8008b8e:	b083      	sub	sp, #12
 8008b90:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008b92:	4b11      	ldr	r3, [pc, #68]	; (8008bd8 <vPortExitCritical+0x4c>)
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d10a      	bne.n	8008bb0 <vPortExitCritical+0x24>
	__asm volatile
 8008b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b9e:	f383 8811 	msr	BASEPRI, r3
 8008ba2:	f3bf 8f6f 	isb	sy
 8008ba6:	f3bf 8f4f 	dsb	sy
 8008baa:	607b      	str	r3, [r7, #4]
}
 8008bac:	bf00      	nop
 8008bae:	e7fe      	b.n	8008bae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008bb0:	4b09      	ldr	r3, [pc, #36]	; (8008bd8 <vPortExitCritical+0x4c>)
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	3b01      	subs	r3, #1
 8008bb6:	4a08      	ldr	r2, [pc, #32]	; (8008bd8 <vPortExitCritical+0x4c>)
 8008bb8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008bba:	4b07      	ldr	r3, [pc, #28]	; (8008bd8 <vPortExitCritical+0x4c>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d105      	bne.n	8008bce <vPortExitCritical+0x42>
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008bc6:	683b      	ldr	r3, [r7, #0]
 8008bc8:	f383 8811 	msr	BASEPRI, r3
}
 8008bcc:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008bce:	bf00      	nop
 8008bd0:	370c      	adds	r7, #12
 8008bd2:	46bd      	mov	sp, r7
 8008bd4:	bc80      	pop	{r7}
 8008bd6:	4770      	bx	lr
 8008bd8:	20000028 	.word	0x20000028
 8008bdc:	00000000 	.word	0x00000000

08008be0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008be0:	f3ef 8009 	mrs	r0, PSP
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	4b0d      	ldr	r3, [pc, #52]	; (8008c20 <pxCurrentTCBConst>)
 8008bea:	681a      	ldr	r2, [r3, #0]
 8008bec:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008bf0:	6010      	str	r0, [r2, #0]
 8008bf2:	e92d 4008 	stmdb	sp!, {r3, lr}
 8008bf6:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008bfa:	f380 8811 	msr	BASEPRI, r0
 8008bfe:	f7fe ff79 	bl	8007af4 <vTaskSwitchContext>
 8008c02:	f04f 0000 	mov.w	r0, #0
 8008c06:	f380 8811 	msr	BASEPRI, r0
 8008c0a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8008c0e:	6819      	ldr	r1, [r3, #0]
 8008c10:	6808      	ldr	r0, [r1, #0]
 8008c12:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8008c16:	f380 8809 	msr	PSP, r0
 8008c1a:	f3bf 8f6f 	isb	sy
 8008c1e:	4770      	bx	lr

08008c20 <pxCurrentTCBConst>:
 8008c20:	20000f00 	.word	0x20000f00
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008c24:	bf00      	nop
 8008c26:	bf00      	nop

08008c28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008c28:	b580      	push	{r7, lr}
 8008c2a:	b082      	sub	sp, #8
 8008c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8008c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008c32:	f383 8811 	msr	BASEPRI, r3
 8008c36:	f3bf 8f6f 	isb	sy
 8008c3a:	f3bf 8f4f 	dsb	sy
 8008c3e:	607b      	str	r3, [r7, #4]
}
 8008c40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008c42:	f7fe fe99 	bl	8007978 <xTaskIncrementTick>
 8008c46:	4603      	mov	r3, r0
 8008c48:	2b00      	cmp	r3, #0
 8008c4a:	d003      	beq.n	8008c54 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8008c4c:	4b06      	ldr	r3, [pc, #24]	; (8008c68 <SysTick_Handler+0x40>)
 8008c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008c52:	601a      	str	r2, [r3, #0]
 8008c54:	2300      	movs	r3, #0
 8008c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008c58:	683b      	ldr	r3, [r7, #0]
 8008c5a:	f383 8811 	msr	BASEPRI, r3
}
 8008c5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008c60:	bf00      	nop
 8008c62:	3708      	adds	r7, #8
 8008c64:	46bd      	mov	sp, r7
 8008c66:	bd80      	pop	{r7, pc}
 8008c68:	e000ed04 	.word	0xe000ed04

08008c6c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008c70:	4b0a      	ldr	r3, [pc, #40]	; (8008c9c <vPortSetupTimerInterrupt+0x30>)
 8008c72:	2200      	movs	r2, #0
 8008c74:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008c76:	4b0a      	ldr	r3, [pc, #40]	; (8008ca0 <vPortSetupTimerInterrupt+0x34>)
 8008c78:	2200      	movs	r2, #0
 8008c7a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8008c7c:	4b09      	ldr	r3, [pc, #36]	; (8008ca4 <vPortSetupTimerInterrupt+0x38>)
 8008c7e:	681b      	ldr	r3, [r3, #0]
 8008c80:	4a09      	ldr	r2, [pc, #36]	; (8008ca8 <vPortSetupTimerInterrupt+0x3c>)
 8008c82:	fba2 2303 	umull	r2, r3, r2, r3
 8008c86:	099b      	lsrs	r3, r3, #6
 8008c88:	4a08      	ldr	r2, [pc, #32]	; (8008cac <vPortSetupTimerInterrupt+0x40>)
 8008c8a:	3b01      	subs	r3, #1
 8008c8c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8008c8e:	4b03      	ldr	r3, [pc, #12]	; (8008c9c <vPortSetupTimerInterrupt+0x30>)
 8008c90:	2207      	movs	r2, #7
 8008c92:	601a      	str	r2, [r3, #0]
}
 8008c94:	bf00      	nop
 8008c96:	46bd      	mov	sp, r7
 8008c98:	bc80      	pop	{r7}
 8008c9a:	4770      	bx	lr
 8008c9c:	e000e010 	.word	0xe000e010
 8008ca0:	e000e018 	.word	0xe000e018
 8008ca4:	2000001c 	.word	0x2000001c
 8008ca8:	10624dd3 	.word	0x10624dd3
 8008cac:	e000e014 	.word	0xe000e014

08008cb0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008cb0:	b480      	push	{r7}
 8008cb2:	b085      	sub	sp, #20
 8008cb4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008cb6:	f3ef 8305 	mrs	r3, IPSR
 8008cba:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	2b0f      	cmp	r3, #15
 8008cc0:	d914      	bls.n	8008cec <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8008cc2:	4a16      	ldr	r2, [pc, #88]	; (8008d1c <vPortValidateInterruptPriority+0x6c>)
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	4413      	add	r3, r2
 8008cc8:	781b      	ldrb	r3, [r3, #0]
 8008cca:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008ccc:	4b14      	ldr	r3, [pc, #80]	; (8008d20 <vPortValidateInterruptPriority+0x70>)
 8008cce:	781b      	ldrb	r3, [r3, #0]
 8008cd0:	7afa      	ldrb	r2, [r7, #11]
 8008cd2:	429a      	cmp	r2, r3
 8008cd4:	d20a      	bcs.n	8008cec <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8008cd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008cda:	f383 8811 	msr	BASEPRI, r3
 8008cde:	f3bf 8f6f 	isb	sy
 8008ce2:	f3bf 8f4f 	dsb	sy
 8008ce6:	607b      	str	r3, [r7, #4]
}
 8008ce8:	bf00      	nop
 8008cea:	e7fe      	b.n	8008cea <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008cec:	4b0d      	ldr	r3, [pc, #52]	; (8008d24 <vPortValidateInterruptPriority+0x74>)
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8008cf4:	4b0c      	ldr	r3, [pc, #48]	; (8008d28 <vPortValidateInterruptPriority+0x78>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	429a      	cmp	r2, r3
 8008cfa:	d90a      	bls.n	8008d12 <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8008cfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d00:	f383 8811 	msr	BASEPRI, r3
 8008d04:	f3bf 8f6f 	isb	sy
 8008d08:	f3bf 8f4f 	dsb	sy
 8008d0c:	603b      	str	r3, [r7, #0]
}
 8008d0e:	bf00      	nop
 8008d10:	e7fe      	b.n	8008d10 <vPortValidateInterruptPriority+0x60>
	}
 8008d12:	bf00      	nop
 8008d14:	3714      	adds	r7, #20
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bc80      	pop	{r7}
 8008d1a:	4770      	bx	lr
 8008d1c:	e000e3f0 	.word	0xe000e3f0
 8008d20:	2000152c 	.word	0x2000152c
 8008d24:	e000ed0c 	.word	0xe000ed0c
 8008d28:	20001530 	.word	0x20001530

08008d2c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008d2c:	b580      	push	{r7, lr}
 8008d2e:	b08a      	sub	sp, #40	; 0x28
 8008d30:	af00      	add	r7, sp, #0
 8008d32:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008d34:	2300      	movs	r3, #0
 8008d36:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8008d38:	f7fe fd64 	bl	8007804 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008d3c:	4b58      	ldr	r3, [pc, #352]	; (8008ea0 <pvPortMalloc+0x174>)
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d101      	bne.n	8008d48 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008d44:	f000 f910 	bl	8008f68 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8008d48:	4b56      	ldr	r3, [pc, #344]	; (8008ea4 <pvPortMalloc+0x178>)
 8008d4a:	681a      	ldr	r2, [r3, #0]
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	4013      	ands	r3, r2
 8008d50:	2b00      	cmp	r3, #0
 8008d52:	f040 808e 	bne.w	8008e72 <pvPortMalloc+0x146>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d01d      	beq.n	8008d98 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008d5c:	2208      	movs	r2, #8
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	4413      	add	r3, r2
 8008d62:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	f003 0307 	and.w	r3, r3, #7
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d014      	beq.n	8008d98 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008d6e:	687b      	ldr	r3, [r7, #4]
 8008d70:	f023 0307 	bic.w	r3, r3, #7
 8008d74:	3308      	adds	r3, #8
 8008d76:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	f003 0307 	and.w	r3, r3, #7
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d00a      	beq.n	8008d98 <pvPortMalloc+0x6c>
	__asm volatile
 8008d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d86:	f383 8811 	msr	BASEPRI, r3
 8008d8a:	f3bf 8f6f 	isb	sy
 8008d8e:	f3bf 8f4f 	dsb	sy
 8008d92:	617b      	str	r3, [r7, #20]
}
 8008d94:	bf00      	nop
 8008d96:	e7fe      	b.n	8008d96 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	d069      	beq.n	8008e72 <pvPortMalloc+0x146>
 8008d9e:	4b42      	ldr	r3, [pc, #264]	; (8008ea8 <pvPortMalloc+0x17c>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	687a      	ldr	r2, [r7, #4]
 8008da4:	429a      	cmp	r2, r3
 8008da6:	d864      	bhi.n	8008e72 <pvPortMalloc+0x146>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008da8:	4b40      	ldr	r3, [pc, #256]	; (8008eac <pvPortMalloc+0x180>)
 8008daa:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008dac:	4b3f      	ldr	r3, [pc, #252]	; (8008eac <pvPortMalloc+0x180>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008db2:	e004      	b.n	8008dbe <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008db6:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008db8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008dbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dc0:	685b      	ldr	r3, [r3, #4]
 8008dc2:	687a      	ldr	r2, [r7, #4]
 8008dc4:	429a      	cmp	r2, r3
 8008dc6:	d903      	bls.n	8008dd0 <pvPortMalloc+0xa4>
 8008dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	2b00      	cmp	r3, #0
 8008dce:	d1f1      	bne.n	8008db4 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008dd0:	4b33      	ldr	r3, [pc, #204]	; (8008ea0 <pvPortMalloc+0x174>)
 8008dd2:	681b      	ldr	r3, [r3, #0]
 8008dd4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dd6:	429a      	cmp	r2, r3
 8008dd8:	d04b      	beq.n	8008e72 <pvPortMalloc+0x146>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	2208      	movs	r2, #8
 8008de0:	4413      	add	r3, r2
 8008de2:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008de4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008de6:	681a      	ldr	r2, [r3, #0]
 8008de8:	6a3b      	ldr	r3, [r7, #32]
 8008dea:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dee:	685a      	ldr	r2, [r3, #4]
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	1ad2      	subs	r2, r2, r3
 8008df4:	2308      	movs	r3, #8
 8008df6:	005b      	lsls	r3, r3, #1
 8008df8:	429a      	cmp	r2, r3
 8008dfa:	d91f      	bls.n	8008e3c <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8008dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	4413      	add	r3, r2
 8008e02:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e04:	69bb      	ldr	r3, [r7, #24]
 8008e06:	f003 0307 	and.w	r3, r3, #7
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00a      	beq.n	8008e24 <pvPortMalloc+0xf8>
	__asm volatile
 8008e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e12:	f383 8811 	msr	BASEPRI, r3
 8008e16:	f3bf 8f6f 	isb	sy
 8008e1a:	f3bf 8f4f 	dsb	sy
 8008e1e:	613b      	str	r3, [r7, #16]
}
 8008e20:	bf00      	nop
 8008e22:	e7fe      	b.n	8008e22 <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8008e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e26:	685a      	ldr	r2, [r3, #4]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	1ad2      	subs	r2, r2, r3
 8008e2c:	69bb      	ldr	r3, [r7, #24]
 8008e2e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008e30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e32:	687a      	ldr	r2, [r7, #4]
 8008e34:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8008e36:	69b8      	ldr	r0, [r7, #24]
 8008e38:	f000 f8f8 	bl	800902c <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008e3c:	4b1a      	ldr	r3, [pc, #104]	; (8008ea8 <pvPortMalloc+0x17c>)
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e42:	685b      	ldr	r3, [r3, #4]
 8008e44:	1ad3      	subs	r3, r2, r3
 8008e46:	4a18      	ldr	r2, [pc, #96]	; (8008ea8 <pvPortMalloc+0x17c>)
 8008e48:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008e4a:	4b17      	ldr	r3, [pc, #92]	; (8008ea8 <pvPortMalloc+0x17c>)
 8008e4c:	681a      	ldr	r2, [r3, #0]
 8008e4e:	4b18      	ldr	r3, [pc, #96]	; (8008eb0 <pvPortMalloc+0x184>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	429a      	cmp	r2, r3
 8008e54:	d203      	bcs.n	8008e5e <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008e56:	4b14      	ldr	r3, [pc, #80]	; (8008ea8 <pvPortMalloc+0x17c>)
 8008e58:	681b      	ldr	r3, [r3, #0]
 8008e5a:	4a15      	ldr	r2, [pc, #84]	; (8008eb0 <pvPortMalloc+0x184>)
 8008e5c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008e5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e60:	685a      	ldr	r2, [r3, #4]
 8008e62:	4b10      	ldr	r3, [pc, #64]	; (8008ea4 <pvPortMalloc+0x178>)
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	431a      	orrs	r2, r3
 8008e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e6e:	2200      	movs	r2, #0
 8008e70:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008e72:	f7fe fcd5 	bl	8007820 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008e76:	69fb      	ldr	r3, [r7, #28]
 8008e78:	f003 0307 	and.w	r3, r3, #7
 8008e7c:	2b00      	cmp	r3, #0
 8008e7e:	d00a      	beq.n	8008e96 <pvPortMalloc+0x16a>
	__asm volatile
 8008e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e84:	f383 8811 	msr	BASEPRI, r3
 8008e88:	f3bf 8f6f 	isb	sy
 8008e8c:	f3bf 8f4f 	dsb	sy
 8008e90:	60fb      	str	r3, [r7, #12]
}
 8008e92:	bf00      	nop
 8008e94:	e7fe      	b.n	8008e94 <pvPortMalloc+0x168>
	return pvReturn;
 8008e96:	69fb      	ldr	r3, [r7, #28]
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3728      	adds	r7, #40	; 0x28
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	2000213c 	.word	0x2000213c
 8008ea4:	20002148 	.word	0x20002148
 8008ea8:	20002140 	.word	0x20002140
 8008eac:	20002134 	.word	0x20002134
 8008eb0:	20002144 	.word	0x20002144

08008eb4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008eb4:	b580      	push	{r7, lr}
 8008eb6:	b086      	sub	sp, #24
 8008eb8:	af00      	add	r7, sp, #0
 8008eba:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d048      	beq.n	8008f58 <vPortFree+0xa4>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008ec6:	2308      	movs	r3, #8
 8008ec8:	425b      	negs	r3, r3
 8008eca:	697a      	ldr	r2, [r7, #20]
 8008ecc:	4413      	add	r3, r2
 8008ece:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008ed0:	697b      	ldr	r3, [r7, #20]
 8008ed2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008ed4:	693b      	ldr	r3, [r7, #16]
 8008ed6:	685a      	ldr	r2, [r3, #4]
 8008ed8:	4b21      	ldr	r3, [pc, #132]	; (8008f60 <vPortFree+0xac>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	4013      	ands	r3, r2
 8008ede:	2b00      	cmp	r3, #0
 8008ee0:	d10a      	bne.n	8008ef8 <vPortFree+0x44>
	__asm volatile
 8008ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee6:	f383 8811 	msr	BASEPRI, r3
 8008eea:	f3bf 8f6f 	isb	sy
 8008eee:	f3bf 8f4f 	dsb	sy
 8008ef2:	60fb      	str	r3, [r7, #12]
}
 8008ef4:	bf00      	nop
 8008ef6:	e7fe      	b.n	8008ef6 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8008ef8:	693b      	ldr	r3, [r7, #16]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d00a      	beq.n	8008f16 <vPortFree+0x62>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	60bb      	str	r3, [r7, #8]
}
 8008f12:	bf00      	nop
 8008f14:	e7fe      	b.n	8008f14 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	685a      	ldr	r2, [r3, #4]
 8008f1a:	4b11      	ldr	r3, [pc, #68]	; (8008f60 <vPortFree+0xac>)
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	4013      	ands	r3, r2
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d019      	beq.n	8008f58 <vPortFree+0xa4>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008f24:	693b      	ldr	r3, [r7, #16]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d115      	bne.n	8008f58 <vPortFree+0xa4>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	685a      	ldr	r2, [r3, #4]
 8008f30:	4b0b      	ldr	r3, [pc, #44]	; (8008f60 <vPortFree+0xac>)
 8008f32:	681b      	ldr	r3, [r3, #0]
 8008f34:	43db      	mvns	r3, r3
 8008f36:	401a      	ands	r2, r3
 8008f38:	693b      	ldr	r3, [r7, #16]
 8008f3a:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008f3c:	f7fe fc62 	bl	8007804 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008f40:	693b      	ldr	r3, [r7, #16]
 8008f42:	685a      	ldr	r2, [r3, #4]
 8008f44:	4b07      	ldr	r3, [pc, #28]	; (8008f64 <vPortFree+0xb0>)
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4413      	add	r3, r2
 8008f4a:	4a06      	ldr	r2, [pc, #24]	; (8008f64 <vPortFree+0xb0>)
 8008f4c:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008f4e:	6938      	ldr	r0, [r7, #16]
 8008f50:	f000 f86c 	bl	800902c <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8008f54:	f7fe fc64 	bl	8007820 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8008f58:	bf00      	nop
 8008f5a:	3718      	adds	r7, #24
 8008f5c:	46bd      	mov	sp, r7
 8008f5e:	bd80      	pop	{r7, pc}
 8008f60:	20002148 	.word	0x20002148
 8008f64:	20002140 	.word	0x20002140

08008f68 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008f68:	b480      	push	{r7}
 8008f6a:	b085      	sub	sp, #20
 8008f6c:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008f6e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8008f72:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008f74:	4b27      	ldr	r3, [pc, #156]	; (8009014 <prvHeapInit+0xac>)
 8008f76:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008f78:	68fb      	ldr	r3, [r7, #12]
 8008f7a:	f003 0307 	and.w	r3, r3, #7
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d00c      	beq.n	8008f9c <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	3307      	adds	r3, #7
 8008f86:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008f88:	68fb      	ldr	r3, [r7, #12]
 8008f8a:	f023 0307 	bic.w	r3, r3, #7
 8008f8e:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008f90:	68ba      	ldr	r2, [r7, #8]
 8008f92:	68fb      	ldr	r3, [r7, #12]
 8008f94:	1ad3      	subs	r3, r2, r3
 8008f96:	4a1f      	ldr	r2, [pc, #124]	; (8009014 <prvHeapInit+0xac>)
 8008f98:	4413      	add	r3, r2
 8008f9a:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008fa0:	4a1d      	ldr	r2, [pc, #116]	; (8009018 <prvHeapInit+0xb0>)
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008fa6:	4b1c      	ldr	r3, [pc, #112]	; (8009018 <prvHeapInit+0xb0>)
 8008fa8:	2200      	movs	r2, #0
 8008faa:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	68ba      	ldr	r2, [r7, #8]
 8008fb0:	4413      	add	r3, r2
 8008fb2:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008fb4:	2208      	movs	r2, #8
 8008fb6:	68fb      	ldr	r3, [r7, #12]
 8008fb8:	1a9b      	subs	r3, r3, r2
 8008fba:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	f023 0307 	bic.w	r3, r3, #7
 8008fc2:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008fc4:	68fb      	ldr	r3, [r7, #12]
 8008fc6:	4a15      	ldr	r2, [pc, #84]	; (800901c <prvHeapInit+0xb4>)
 8008fc8:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008fca:	4b14      	ldr	r3, [pc, #80]	; (800901c <prvHeapInit+0xb4>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	2200      	movs	r2, #0
 8008fd0:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8008fd2:	4b12      	ldr	r3, [pc, #72]	; (800901c <prvHeapInit+0xb4>)
 8008fd4:	681b      	ldr	r3, [r3, #0]
 8008fd6:	2200      	movs	r2, #0
 8008fd8:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8008fde:	683b      	ldr	r3, [r7, #0]
 8008fe0:	68fa      	ldr	r2, [r7, #12]
 8008fe2:	1ad2      	subs	r2, r2, r3
 8008fe4:	683b      	ldr	r3, [r7, #0]
 8008fe6:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8008fe8:	4b0c      	ldr	r3, [pc, #48]	; (800901c <prvHeapInit+0xb4>)
 8008fea:	681a      	ldr	r2, [r3, #0]
 8008fec:	683b      	ldr	r3, [r7, #0]
 8008fee:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	685b      	ldr	r3, [r3, #4]
 8008ff4:	4a0a      	ldr	r2, [pc, #40]	; (8009020 <prvHeapInit+0xb8>)
 8008ff6:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008ff8:	683b      	ldr	r3, [r7, #0]
 8008ffa:	685b      	ldr	r3, [r3, #4]
 8008ffc:	4a09      	ldr	r2, [pc, #36]	; (8009024 <prvHeapInit+0xbc>)
 8008ffe:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8009000:	4b09      	ldr	r3, [pc, #36]	; (8009028 <prvHeapInit+0xc0>)
 8009002:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009006:	601a      	str	r2, [r3, #0]
}
 8009008:	bf00      	nop
 800900a:	3714      	adds	r7, #20
 800900c:	46bd      	mov	sp, r7
 800900e:	bc80      	pop	{r7}
 8009010:	4770      	bx	lr
 8009012:	bf00      	nop
 8009014:	20001534 	.word	0x20001534
 8009018:	20002134 	.word	0x20002134
 800901c:	2000213c 	.word	0x2000213c
 8009020:	20002144 	.word	0x20002144
 8009024:	20002140 	.word	0x20002140
 8009028:	20002148 	.word	0x20002148

0800902c <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800902c:	b480      	push	{r7}
 800902e:	b085      	sub	sp, #20
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009034:	4b27      	ldr	r3, [pc, #156]	; (80090d4 <prvInsertBlockIntoFreeList+0xa8>)
 8009036:	60fb      	str	r3, [r7, #12]
 8009038:	e002      	b.n	8009040 <prvInsertBlockIntoFreeList+0x14>
 800903a:	68fb      	ldr	r3, [r7, #12]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	60fb      	str	r3, [r7, #12]
 8009040:	68fb      	ldr	r3, [r7, #12]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	687a      	ldr	r2, [r7, #4]
 8009046:	429a      	cmp	r2, r3
 8009048:	d8f7      	bhi.n	800903a <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800904a:	68fb      	ldr	r3, [r7, #12]
 800904c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800904e:	68fb      	ldr	r3, [r7, #12]
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	68ba      	ldr	r2, [r7, #8]
 8009054:	4413      	add	r3, r2
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	429a      	cmp	r2, r3
 800905a:	d108      	bne.n	800906e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	685a      	ldr	r2, [r3, #4]
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	441a      	add	r2, r3
 8009066:	68fb      	ldr	r3, [r7, #12]
 8009068:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	685b      	ldr	r3, [r3, #4]
 8009076:	68ba      	ldr	r2, [r7, #8]
 8009078:	441a      	add	r2, r3
 800907a:	68fb      	ldr	r3, [r7, #12]
 800907c:	681b      	ldr	r3, [r3, #0]
 800907e:	429a      	cmp	r2, r3
 8009080:	d118      	bne.n	80090b4 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8009082:	68fb      	ldr	r3, [r7, #12]
 8009084:	681a      	ldr	r2, [r3, #0]
 8009086:	4b14      	ldr	r3, [pc, #80]	; (80090d8 <prvInsertBlockIntoFreeList+0xac>)
 8009088:	681b      	ldr	r3, [r3, #0]
 800908a:	429a      	cmp	r2, r3
 800908c:	d00d      	beq.n	80090aa <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800908e:	687b      	ldr	r3, [r7, #4]
 8009090:	685a      	ldr	r2, [r3, #4]
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	685b      	ldr	r3, [r3, #4]
 8009098:	441a      	add	r2, r3
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	681b      	ldr	r3, [r3, #0]
 80090a2:	681a      	ldr	r2, [r3, #0]
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	601a      	str	r2, [r3, #0]
 80090a8:	e008      	b.n	80090bc <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80090aa:	4b0b      	ldr	r3, [pc, #44]	; (80090d8 <prvInsertBlockIntoFreeList+0xac>)
 80090ac:	681a      	ldr	r2, [r3, #0]
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	601a      	str	r2, [r3, #0]
 80090b2:	e003      	b.n	80090bc <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80090b4:	68fb      	ldr	r3, [r7, #12]
 80090b6:	681a      	ldr	r2, [r3, #0]
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80090bc:	68fa      	ldr	r2, [r7, #12]
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	429a      	cmp	r2, r3
 80090c2:	d002      	beq.n	80090ca <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	687a      	ldr	r2, [r7, #4]
 80090c8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80090ca:	bf00      	nop
 80090cc:	3714      	adds	r7, #20
 80090ce:	46bd      	mov	sp, r7
 80090d0:	bc80      	pop	{r7}
 80090d2:	4770      	bx	lr
 80090d4:	20002134 	.word	0x20002134
 80090d8:	2000213c 	.word	0x2000213c

080090dc <atof>:
 80090dc:	2100      	movs	r1, #0
 80090de:	f001 bf0d 	b.w	800aefc <strtod>
	...

080090e4 <calloc>:
 80090e4:	4b02      	ldr	r3, [pc, #8]	; (80090f0 <calloc+0xc>)
 80090e6:	460a      	mov	r2, r1
 80090e8:	4601      	mov	r1, r0
 80090ea:	6818      	ldr	r0, [r3, #0]
 80090ec:	f000 b84a 	b.w	8009184 <_calloc_r>
 80090f0:	2000002c 	.word	0x2000002c

080090f4 <__errno>:
 80090f4:	4b01      	ldr	r3, [pc, #4]	; (80090fc <__errno+0x8>)
 80090f6:	6818      	ldr	r0, [r3, #0]
 80090f8:	4770      	bx	lr
 80090fa:	bf00      	nop
 80090fc:	2000002c 	.word	0x2000002c

08009100 <__libc_init_array>:
 8009100:	b570      	push	{r4, r5, r6, lr}
 8009102:	2600      	movs	r6, #0
 8009104:	4d0c      	ldr	r5, [pc, #48]	; (8009138 <__libc_init_array+0x38>)
 8009106:	4c0d      	ldr	r4, [pc, #52]	; (800913c <__libc_init_array+0x3c>)
 8009108:	1b64      	subs	r4, r4, r5
 800910a:	10a4      	asrs	r4, r4, #2
 800910c:	42a6      	cmp	r6, r4
 800910e:	d109      	bne.n	8009124 <__libc_init_array+0x24>
 8009110:	f005 f940 	bl	800e394 <_init>
 8009114:	2600      	movs	r6, #0
 8009116:	4d0a      	ldr	r5, [pc, #40]	; (8009140 <__libc_init_array+0x40>)
 8009118:	4c0a      	ldr	r4, [pc, #40]	; (8009144 <__libc_init_array+0x44>)
 800911a:	1b64      	subs	r4, r4, r5
 800911c:	10a4      	asrs	r4, r4, #2
 800911e:	42a6      	cmp	r6, r4
 8009120:	d105      	bne.n	800912e <__libc_init_array+0x2e>
 8009122:	bd70      	pop	{r4, r5, r6, pc}
 8009124:	f855 3b04 	ldr.w	r3, [r5], #4
 8009128:	4798      	blx	r3
 800912a:	3601      	adds	r6, #1
 800912c:	e7ee      	b.n	800910c <__libc_init_array+0xc>
 800912e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009132:	4798      	blx	r3
 8009134:	3601      	adds	r6, #1
 8009136:	e7f2      	b.n	800911e <__libc_init_array+0x1e>
 8009138:	0800fd34 	.word	0x0800fd34
 800913c:	0800fd34 	.word	0x0800fd34
 8009140:	0800fd34 	.word	0x0800fd34
 8009144:	0800fd38 	.word	0x0800fd38

08009148 <malloc>:
 8009148:	4b02      	ldr	r3, [pc, #8]	; (8009154 <malloc+0xc>)
 800914a:	4601      	mov	r1, r0
 800914c:	6818      	ldr	r0, [r3, #0]
 800914e:	f000 b895 	b.w	800927c <_malloc_r>
 8009152:	bf00      	nop
 8009154:	2000002c 	.word	0x2000002c

08009158 <memcpy>:
 8009158:	440a      	add	r2, r1
 800915a:	4291      	cmp	r1, r2
 800915c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009160:	d100      	bne.n	8009164 <memcpy+0xc>
 8009162:	4770      	bx	lr
 8009164:	b510      	push	{r4, lr}
 8009166:	f811 4b01 	ldrb.w	r4, [r1], #1
 800916a:	4291      	cmp	r1, r2
 800916c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009170:	d1f9      	bne.n	8009166 <memcpy+0xe>
 8009172:	bd10      	pop	{r4, pc}

08009174 <memset>:
 8009174:	4603      	mov	r3, r0
 8009176:	4402      	add	r2, r0
 8009178:	4293      	cmp	r3, r2
 800917a:	d100      	bne.n	800917e <memset+0xa>
 800917c:	4770      	bx	lr
 800917e:	f803 1b01 	strb.w	r1, [r3], #1
 8009182:	e7f9      	b.n	8009178 <memset+0x4>

08009184 <_calloc_r>:
 8009184:	b570      	push	{r4, r5, r6, lr}
 8009186:	fba1 5402 	umull	r5, r4, r1, r2
 800918a:	b934      	cbnz	r4, 800919a <_calloc_r+0x16>
 800918c:	4629      	mov	r1, r5
 800918e:	f000 f875 	bl	800927c <_malloc_r>
 8009192:	4606      	mov	r6, r0
 8009194:	b928      	cbnz	r0, 80091a2 <_calloc_r+0x1e>
 8009196:	4630      	mov	r0, r6
 8009198:	bd70      	pop	{r4, r5, r6, pc}
 800919a:	220c      	movs	r2, #12
 800919c:	2600      	movs	r6, #0
 800919e:	6002      	str	r2, [r0, #0]
 80091a0:	e7f9      	b.n	8009196 <_calloc_r+0x12>
 80091a2:	462a      	mov	r2, r5
 80091a4:	4621      	mov	r1, r4
 80091a6:	f7ff ffe5 	bl	8009174 <memset>
 80091aa:	e7f4      	b.n	8009196 <_calloc_r+0x12>

080091ac <_free_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	4605      	mov	r5, r0
 80091b0:	2900      	cmp	r1, #0
 80091b2:	d040      	beq.n	8009236 <_free_r+0x8a>
 80091b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80091b8:	1f0c      	subs	r4, r1, #4
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	bfb8      	it	lt
 80091be:	18e4      	addlt	r4, r4, r3
 80091c0:	f003 fc3e 	bl	800ca40 <__malloc_lock>
 80091c4:	4a1c      	ldr	r2, [pc, #112]	; (8009238 <_free_r+0x8c>)
 80091c6:	6813      	ldr	r3, [r2, #0]
 80091c8:	b933      	cbnz	r3, 80091d8 <_free_r+0x2c>
 80091ca:	6063      	str	r3, [r4, #4]
 80091cc:	6014      	str	r4, [r2, #0]
 80091ce:	4628      	mov	r0, r5
 80091d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80091d4:	f003 bc3a 	b.w	800ca4c <__malloc_unlock>
 80091d8:	42a3      	cmp	r3, r4
 80091da:	d908      	bls.n	80091ee <_free_r+0x42>
 80091dc:	6820      	ldr	r0, [r4, #0]
 80091de:	1821      	adds	r1, r4, r0
 80091e0:	428b      	cmp	r3, r1
 80091e2:	bf01      	itttt	eq
 80091e4:	6819      	ldreq	r1, [r3, #0]
 80091e6:	685b      	ldreq	r3, [r3, #4]
 80091e8:	1809      	addeq	r1, r1, r0
 80091ea:	6021      	streq	r1, [r4, #0]
 80091ec:	e7ed      	b.n	80091ca <_free_r+0x1e>
 80091ee:	461a      	mov	r2, r3
 80091f0:	685b      	ldr	r3, [r3, #4]
 80091f2:	b10b      	cbz	r3, 80091f8 <_free_r+0x4c>
 80091f4:	42a3      	cmp	r3, r4
 80091f6:	d9fa      	bls.n	80091ee <_free_r+0x42>
 80091f8:	6811      	ldr	r1, [r2, #0]
 80091fa:	1850      	adds	r0, r2, r1
 80091fc:	42a0      	cmp	r0, r4
 80091fe:	d10b      	bne.n	8009218 <_free_r+0x6c>
 8009200:	6820      	ldr	r0, [r4, #0]
 8009202:	4401      	add	r1, r0
 8009204:	1850      	adds	r0, r2, r1
 8009206:	4283      	cmp	r3, r0
 8009208:	6011      	str	r1, [r2, #0]
 800920a:	d1e0      	bne.n	80091ce <_free_r+0x22>
 800920c:	6818      	ldr	r0, [r3, #0]
 800920e:	685b      	ldr	r3, [r3, #4]
 8009210:	4401      	add	r1, r0
 8009212:	6011      	str	r1, [r2, #0]
 8009214:	6053      	str	r3, [r2, #4]
 8009216:	e7da      	b.n	80091ce <_free_r+0x22>
 8009218:	d902      	bls.n	8009220 <_free_r+0x74>
 800921a:	230c      	movs	r3, #12
 800921c:	602b      	str	r3, [r5, #0]
 800921e:	e7d6      	b.n	80091ce <_free_r+0x22>
 8009220:	6820      	ldr	r0, [r4, #0]
 8009222:	1821      	adds	r1, r4, r0
 8009224:	428b      	cmp	r3, r1
 8009226:	bf01      	itttt	eq
 8009228:	6819      	ldreq	r1, [r3, #0]
 800922a:	685b      	ldreq	r3, [r3, #4]
 800922c:	1809      	addeq	r1, r1, r0
 800922e:	6021      	streq	r1, [r4, #0]
 8009230:	6063      	str	r3, [r4, #4]
 8009232:	6054      	str	r4, [r2, #4]
 8009234:	e7cb      	b.n	80091ce <_free_r+0x22>
 8009236:	bd38      	pop	{r3, r4, r5, pc}
 8009238:	2000214c 	.word	0x2000214c

0800923c <sbrk_aligned>:
 800923c:	b570      	push	{r4, r5, r6, lr}
 800923e:	4e0e      	ldr	r6, [pc, #56]	; (8009278 <sbrk_aligned+0x3c>)
 8009240:	460c      	mov	r4, r1
 8009242:	6831      	ldr	r1, [r6, #0]
 8009244:	4605      	mov	r5, r0
 8009246:	b911      	cbnz	r1, 800924e <sbrk_aligned+0x12>
 8009248:	f000 ff88 	bl	800a15c <_sbrk_r>
 800924c:	6030      	str	r0, [r6, #0]
 800924e:	4621      	mov	r1, r4
 8009250:	4628      	mov	r0, r5
 8009252:	f000 ff83 	bl	800a15c <_sbrk_r>
 8009256:	1c43      	adds	r3, r0, #1
 8009258:	d00a      	beq.n	8009270 <sbrk_aligned+0x34>
 800925a:	1cc4      	adds	r4, r0, #3
 800925c:	f024 0403 	bic.w	r4, r4, #3
 8009260:	42a0      	cmp	r0, r4
 8009262:	d007      	beq.n	8009274 <sbrk_aligned+0x38>
 8009264:	1a21      	subs	r1, r4, r0
 8009266:	4628      	mov	r0, r5
 8009268:	f000 ff78 	bl	800a15c <_sbrk_r>
 800926c:	3001      	adds	r0, #1
 800926e:	d101      	bne.n	8009274 <sbrk_aligned+0x38>
 8009270:	f04f 34ff 	mov.w	r4, #4294967295
 8009274:	4620      	mov	r0, r4
 8009276:	bd70      	pop	{r4, r5, r6, pc}
 8009278:	20002150 	.word	0x20002150

0800927c <_malloc_r>:
 800927c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009280:	1ccd      	adds	r5, r1, #3
 8009282:	f025 0503 	bic.w	r5, r5, #3
 8009286:	3508      	adds	r5, #8
 8009288:	2d0c      	cmp	r5, #12
 800928a:	bf38      	it	cc
 800928c:	250c      	movcc	r5, #12
 800928e:	2d00      	cmp	r5, #0
 8009290:	4607      	mov	r7, r0
 8009292:	db01      	blt.n	8009298 <_malloc_r+0x1c>
 8009294:	42a9      	cmp	r1, r5
 8009296:	d905      	bls.n	80092a4 <_malloc_r+0x28>
 8009298:	230c      	movs	r3, #12
 800929a:	2600      	movs	r6, #0
 800929c:	603b      	str	r3, [r7, #0]
 800929e:	4630      	mov	r0, r6
 80092a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80092a4:	4e2e      	ldr	r6, [pc, #184]	; (8009360 <_malloc_r+0xe4>)
 80092a6:	f003 fbcb 	bl	800ca40 <__malloc_lock>
 80092aa:	6833      	ldr	r3, [r6, #0]
 80092ac:	461c      	mov	r4, r3
 80092ae:	bb34      	cbnz	r4, 80092fe <_malloc_r+0x82>
 80092b0:	4629      	mov	r1, r5
 80092b2:	4638      	mov	r0, r7
 80092b4:	f7ff ffc2 	bl	800923c <sbrk_aligned>
 80092b8:	1c43      	adds	r3, r0, #1
 80092ba:	4604      	mov	r4, r0
 80092bc:	d14d      	bne.n	800935a <_malloc_r+0xde>
 80092be:	6834      	ldr	r4, [r6, #0]
 80092c0:	4626      	mov	r6, r4
 80092c2:	2e00      	cmp	r6, #0
 80092c4:	d140      	bne.n	8009348 <_malloc_r+0xcc>
 80092c6:	6823      	ldr	r3, [r4, #0]
 80092c8:	4631      	mov	r1, r6
 80092ca:	4638      	mov	r0, r7
 80092cc:	eb04 0803 	add.w	r8, r4, r3
 80092d0:	f000 ff44 	bl	800a15c <_sbrk_r>
 80092d4:	4580      	cmp	r8, r0
 80092d6:	d13a      	bne.n	800934e <_malloc_r+0xd2>
 80092d8:	6821      	ldr	r1, [r4, #0]
 80092da:	3503      	adds	r5, #3
 80092dc:	1a6d      	subs	r5, r5, r1
 80092de:	f025 0503 	bic.w	r5, r5, #3
 80092e2:	3508      	adds	r5, #8
 80092e4:	2d0c      	cmp	r5, #12
 80092e6:	bf38      	it	cc
 80092e8:	250c      	movcc	r5, #12
 80092ea:	4638      	mov	r0, r7
 80092ec:	4629      	mov	r1, r5
 80092ee:	f7ff ffa5 	bl	800923c <sbrk_aligned>
 80092f2:	3001      	adds	r0, #1
 80092f4:	d02b      	beq.n	800934e <_malloc_r+0xd2>
 80092f6:	6823      	ldr	r3, [r4, #0]
 80092f8:	442b      	add	r3, r5
 80092fa:	6023      	str	r3, [r4, #0]
 80092fc:	e00e      	b.n	800931c <_malloc_r+0xa0>
 80092fe:	6822      	ldr	r2, [r4, #0]
 8009300:	1b52      	subs	r2, r2, r5
 8009302:	d41e      	bmi.n	8009342 <_malloc_r+0xc6>
 8009304:	2a0b      	cmp	r2, #11
 8009306:	d916      	bls.n	8009336 <_malloc_r+0xba>
 8009308:	1961      	adds	r1, r4, r5
 800930a:	42a3      	cmp	r3, r4
 800930c:	6025      	str	r5, [r4, #0]
 800930e:	bf18      	it	ne
 8009310:	6059      	strne	r1, [r3, #4]
 8009312:	6863      	ldr	r3, [r4, #4]
 8009314:	bf08      	it	eq
 8009316:	6031      	streq	r1, [r6, #0]
 8009318:	5162      	str	r2, [r4, r5]
 800931a:	604b      	str	r3, [r1, #4]
 800931c:	4638      	mov	r0, r7
 800931e:	f104 060b 	add.w	r6, r4, #11
 8009322:	f003 fb93 	bl	800ca4c <__malloc_unlock>
 8009326:	f026 0607 	bic.w	r6, r6, #7
 800932a:	1d23      	adds	r3, r4, #4
 800932c:	1af2      	subs	r2, r6, r3
 800932e:	d0b6      	beq.n	800929e <_malloc_r+0x22>
 8009330:	1b9b      	subs	r3, r3, r6
 8009332:	50a3      	str	r3, [r4, r2]
 8009334:	e7b3      	b.n	800929e <_malloc_r+0x22>
 8009336:	6862      	ldr	r2, [r4, #4]
 8009338:	42a3      	cmp	r3, r4
 800933a:	bf0c      	ite	eq
 800933c:	6032      	streq	r2, [r6, #0]
 800933e:	605a      	strne	r2, [r3, #4]
 8009340:	e7ec      	b.n	800931c <_malloc_r+0xa0>
 8009342:	4623      	mov	r3, r4
 8009344:	6864      	ldr	r4, [r4, #4]
 8009346:	e7b2      	b.n	80092ae <_malloc_r+0x32>
 8009348:	4634      	mov	r4, r6
 800934a:	6876      	ldr	r6, [r6, #4]
 800934c:	e7b9      	b.n	80092c2 <_malloc_r+0x46>
 800934e:	230c      	movs	r3, #12
 8009350:	4638      	mov	r0, r7
 8009352:	603b      	str	r3, [r7, #0]
 8009354:	f003 fb7a 	bl	800ca4c <__malloc_unlock>
 8009358:	e7a1      	b.n	800929e <_malloc_r+0x22>
 800935a:	6025      	str	r5, [r4, #0]
 800935c:	e7de      	b.n	800931c <_malloc_r+0xa0>
 800935e:	bf00      	nop
 8009360:	2000214c 	.word	0x2000214c

08009364 <__cvt>:
 8009364:	2b00      	cmp	r3, #0
 8009366:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800936a:	461f      	mov	r7, r3
 800936c:	bfbb      	ittet	lt
 800936e:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8009372:	461f      	movlt	r7, r3
 8009374:	2300      	movge	r3, #0
 8009376:	232d      	movlt	r3, #45	; 0x2d
 8009378:	b088      	sub	sp, #32
 800937a:	4614      	mov	r4, r2
 800937c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800937e:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8009380:	7013      	strb	r3, [r2, #0]
 8009382:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8009384:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8009388:	f023 0820 	bic.w	r8, r3, #32
 800938c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009390:	d005      	beq.n	800939e <__cvt+0x3a>
 8009392:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009396:	d100      	bne.n	800939a <__cvt+0x36>
 8009398:	3501      	adds	r5, #1
 800939a:	2302      	movs	r3, #2
 800939c:	e000      	b.n	80093a0 <__cvt+0x3c>
 800939e:	2303      	movs	r3, #3
 80093a0:	aa07      	add	r2, sp, #28
 80093a2:	9204      	str	r2, [sp, #16]
 80093a4:	aa06      	add	r2, sp, #24
 80093a6:	e9cd a202 	strd	sl, r2, [sp, #8]
 80093aa:	e9cd 3500 	strd	r3, r5, [sp]
 80093ae:	4622      	mov	r2, r4
 80093b0:	463b      	mov	r3, r7
 80093b2:	f001 ff9d 	bl	800b2f0 <_dtoa_r>
 80093b6:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80093ba:	4606      	mov	r6, r0
 80093bc:	d102      	bne.n	80093c4 <__cvt+0x60>
 80093be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80093c0:	07db      	lsls	r3, r3, #31
 80093c2:	d522      	bpl.n	800940a <__cvt+0xa6>
 80093c4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80093c8:	eb06 0905 	add.w	r9, r6, r5
 80093cc:	d110      	bne.n	80093f0 <__cvt+0x8c>
 80093ce:	7833      	ldrb	r3, [r6, #0]
 80093d0:	2b30      	cmp	r3, #48	; 0x30
 80093d2:	d10a      	bne.n	80093ea <__cvt+0x86>
 80093d4:	2200      	movs	r2, #0
 80093d6:	2300      	movs	r3, #0
 80093d8:	4620      	mov	r0, r4
 80093da:	4639      	mov	r1, r7
 80093dc:	f7f7 fae4 	bl	80009a8 <__aeabi_dcmpeq>
 80093e0:	b918      	cbnz	r0, 80093ea <__cvt+0x86>
 80093e2:	f1c5 0501 	rsb	r5, r5, #1
 80093e6:	f8ca 5000 	str.w	r5, [sl]
 80093ea:	f8da 3000 	ldr.w	r3, [sl]
 80093ee:	4499      	add	r9, r3
 80093f0:	2200      	movs	r2, #0
 80093f2:	2300      	movs	r3, #0
 80093f4:	4620      	mov	r0, r4
 80093f6:	4639      	mov	r1, r7
 80093f8:	f7f7 fad6 	bl	80009a8 <__aeabi_dcmpeq>
 80093fc:	b108      	cbz	r0, 8009402 <__cvt+0x9e>
 80093fe:	f8cd 901c 	str.w	r9, [sp, #28]
 8009402:	2230      	movs	r2, #48	; 0x30
 8009404:	9b07      	ldr	r3, [sp, #28]
 8009406:	454b      	cmp	r3, r9
 8009408:	d307      	bcc.n	800941a <__cvt+0xb6>
 800940a:	4630      	mov	r0, r6
 800940c:	9b07      	ldr	r3, [sp, #28]
 800940e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8009410:	1b9b      	subs	r3, r3, r6
 8009412:	6013      	str	r3, [r2, #0]
 8009414:	b008      	add	sp, #32
 8009416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800941a:	1c59      	adds	r1, r3, #1
 800941c:	9107      	str	r1, [sp, #28]
 800941e:	701a      	strb	r2, [r3, #0]
 8009420:	e7f0      	b.n	8009404 <__cvt+0xa0>

08009422 <__exponent>:
 8009422:	4603      	mov	r3, r0
 8009424:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009426:	2900      	cmp	r1, #0
 8009428:	f803 2b02 	strb.w	r2, [r3], #2
 800942c:	bfb6      	itet	lt
 800942e:	222d      	movlt	r2, #45	; 0x2d
 8009430:	222b      	movge	r2, #43	; 0x2b
 8009432:	4249      	neglt	r1, r1
 8009434:	2909      	cmp	r1, #9
 8009436:	7042      	strb	r2, [r0, #1]
 8009438:	dd2b      	ble.n	8009492 <__exponent+0x70>
 800943a:	f10d 0407 	add.w	r4, sp, #7
 800943e:	46a4      	mov	ip, r4
 8009440:	270a      	movs	r7, #10
 8009442:	fb91 f6f7 	sdiv	r6, r1, r7
 8009446:	460a      	mov	r2, r1
 8009448:	46a6      	mov	lr, r4
 800944a:	fb07 1516 	mls	r5, r7, r6, r1
 800944e:	2a63      	cmp	r2, #99	; 0x63
 8009450:	f105 0530 	add.w	r5, r5, #48	; 0x30
 8009454:	4631      	mov	r1, r6
 8009456:	f104 34ff 	add.w	r4, r4, #4294967295
 800945a:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800945e:	dcf0      	bgt.n	8009442 <__exponent+0x20>
 8009460:	3130      	adds	r1, #48	; 0x30
 8009462:	f1ae 0502 	sub.w	r5, lr, #2
 8009466:	f804 1c01 	strb.w	r1, [r4, #-1]
 800946a:	4629      	mov	r1, r5
 800946c:	1c44      	adds	r4, r0, #1
 800946e:	4561      	cmp	r1, ip
 8009470:	d30a      	bcc.n	8009488 <__exponent+0x66>
 8009472:	f10d 0209 	add.w	r2, sp, #9
 8009476:	eba2 020e 	sub.w	r2, r2, lr
 800947a:	4565      	cmp	r5, ip
 800947c:	bf88      	it	hi
 800947e:	2200      	movhi	r2, #0
 8009480:	4413      	add	r3, r2
 8009482:	1a18      	subs	r0, r3, r0
 8009484:	b003      	add	sp, #12
 8009486:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009488:	f811 2b01 	ldrb.w	r2, [r1], #1
 800948c:	f804 2f01 	strb.w	r2, [r4, #1]!
 8009490:	e7ed      	b.n	800946e <__exponent+0x4c>
 8009492:	2330      	movs	r3, #48	; 0x30
 8009494:	3130      	adds	r1, #48	; 0x30
 8009496:	7083      	strb	r3, [r0, #2]
 8009498:	70c1      	strb	r1, [r0, #3]
 800949a:	1d03      	adds	r3, r0, #4
 800949c:	e7f1      	b.n	8009482 <__exponent+0x60>
	...

080094a0 <_printf_float>:
 80094a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094a4:	b091      	sub	sp, #68	; 0x44
 80094a6:	460c      	mov	r4, r1
 80094a8:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80094ac:	4616      	mov	r6, r2
 80094ae:	461f      	mov	r7, r3
 80094b0:	4605      	mov	r5, r0
 80094b2:	f003 fa25 	bl	800c900 <_localeconv_r>
 80094b6:	6803      	ldr	r3, [r0, #0]
 80094b8:	4618      	mov	r0, r3
 80094ba:	9309      	str	r3, [sp, #36]	; 0x24
 80094bc:	f7f6 fe48 	bl	8000150 <strlen>
 80094c0:	2300      	movs	r3, #0
 80094c2:	930e      	str	r3, [sp, #56]	; 0x38
 80094c4:	f8d8 3000 	ldr.w	r3, [r8]
 80094c8:	900a      	str	r0, [sp, #40]	; 0x28
 80094ca:	3307      	adds	r3, #7
 80094cc:	f023 0307 	bic.w	r3, r3, #7
 80094d0:	f103 0208 	add.w	r2, r3, #8
 80094d4:	f894 9018 	ldrb.w	r9, [r4, #24]
 80094d8:	f8d4 b000 	ldr.w	fp, [r4]
 80094dc:	f8c8 2000 	str.w	r2, [r8]
 80094e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094e4:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80094e8:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 80094ec:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 80094f0:	930b      	str	r3, [sp, #44]	; 0x2c
 80094f2:	f04f 32ff 	mov.w	r2, #4294967295
 80094f6:	4640      	mov	r0, r8
 80094f8:	4b9c      	ldr	r3, [pc, #624]	; (800976c <_printf_float+0x2cc>)
 80094fa:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094fc:	f7f7 fa86 	bl	8000a0c <__aeabi_dcmpun>
 8009500:	bb70      	cbnz	r0, 8009560 <_printf_float+0xc0>
 8009502:	f04f 32ff 	mov.w	r2, #4294967295
 8009506:	4640      	mov	r0, r8
 8009508:	4b98      	ldr	r3, [pc, #608]	; (800976c <_printf_float+0x2cc>)
 800950a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800950c:	f7f7 fa60 	bl	80009d0 <__aeabi_dcmple>
 8009510:	bb30      	cbnz	r0, 8009560 <_printf_float+0xc0>
 8009512:	2200      	movs	r2, #0
 8009514:	2300      	movs	r3, #0
 8009516:	4640      	mov	r0, r8
 8009518:	4651      	mov	r1, sl
 800951a:	f7f7 fa4f 	bl	80009bc <__aeabi_dcmplt>
 800951e:	b110      	cbz	r0, 8009526 <_printf_float+0x86>
 8009520:	232d      	movs	r3, #45	; 0x2d
 8009522:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009526:	4b92      	ldr	r3, [pc, #584]	; (8009770 <_printf_float+0x2d0>)
 8009528:	4892      	ldr	r0, [pc, #584]	; (8009774 <_printf_float+0x2d4>)
 800952a:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 800952e:	bf94      	ite	ls
 8009530:	4698      	movls	r8, r3
 8009532:	4680      	movhi	r8, r0
 8009534:	2303      	movs	r3, #3
 8009536:	f04f 0a00 	mov.w	sl, #0
 800953a:	6123      	str	r3, [r4, #16]
 800953c:	f02b 0304 	bic.w	r3, fp, #4
 8009540:	6023      	str	r3, [r4, #0]
 8009542:	4633      	mov	r3, r6
 8009544:	4621      	mov	r1, r4
 8009546:	4628      	mov	r0, r5
 8009548:	9700      	str	r7, [sp, #0]
 800954a:	aa0f      	add	r2, sp, #60	; 0x3c
 800954c:	f000 f9d4 	bl	80098f8 <_printf_common>
 8009550:	3001      	adds	r0, #1
 8009552:	f040 8090 	bne.w	8009676 <_printf_float+0x1d6>
 8009556:	f04f 30ff 	mov.w	r0, #4294967295
 800955a:	b011      	add	sp, #68	; 0x44
 800955c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009560:	4642      	mov	r2, r8
 8009562:	4653      	mov	r3, sl
 8009564:	4640      	mov	r0, r8
 8009566:	4651      	mov	r1, sl
 8009568:	f7f7 fa50 	bl	8000a0c <__aeabi_dcmpun>
 800956c:	b148      	cbz	r0, 8009582 <_printf_float+0xe2>
 800956e:	f1ba 0f00 	cmp.w	sl, #0
 8009572:	bfb8      	it	lt
 8009574:	232d      	movlt	r3, #45	; 0x2d
 8009576:	4880      	ldr	r0, [pc, #512]	; (8009778 <_printf_float+0x2d8>)
 8009578:	bfb8      	it	lt
 800957a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800957e:	4b7f      	ldr	r3, [pc, #508]	; (800977c <_printf_float+0x2dc>)
 8009580:	e7d3      	b.n	800952a <_printf_float+0x8a>
 8009582:	6863      	ldr	r3, [r4, #4]
 8009584:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8009588:	1c5a      	adds	r2, r3, #1
 800958a:	d142      	bne.n	8009612 <_printf_float+0x172>
 800958c:	2306      	movs	r3, #6
 800958e:	6063      	str	r3, [r4, #4]
 8009590:	2200      	movs	r2, #0
 8009592:	9206      	str	r2, [sp, #24]
 8009594:	aa0e      	add	r2, sp, #56	; 0x38
 8009596:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800959a:	aa0d      	add	r2, sp, #52	; 0x34
 800959c:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80095a0:	9203      	str	r2, [sp, #12]
 80095a2:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80095a6:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80095aa:	6023      	str	r3, [r4, #0]
 80095ac:	6863      	ldr	r3, [r4, #4]
 80095ae:	4642      	mov	r2, r8
 80095b0:	9300      	str	r3, [sp, #0]
 80095b2:	4628      	mov	r0, r5
 80095b4:	4653      	mov	r3, sl
 80095b6:	910b      	str	r1, [sp, #44]	; 0x2c
 80095b8:	f7ff fed4 	bl	8009364 <__cvt>
 80095bc:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80095be:	4680      	mov	r8, r0
 80095c0:	2947      	cmp	r1, #71	; 0x47
 80095c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80095c4:	d108      	bne.n	80095d8 <_printf_float+0x138>
 80095c6:	1cc8      	adds	r0, r1, #3
 80095c8:	db02      	blt.n	80095d0 <_printf_float+0x130>
 80095ca:	6863      	ldr	r3, [r4, #4]
 80095cc:	4299      	cmp	r1, r3
 80095ce:	dd40      	ble.n	8009652 <_printf_float+0x1b2>
 80095d0:	f1a9 0902 	sub.w	r9, r9, #2
 80095d4:	fa5f f989 	uxtb.w	r9, r9
 80095d8:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80095dc:	d81f      	bhi.n	800961e <_printf_float+0x17e>
 80095de:	464a      	mov	r2, r9
 80095e0:	3901      	subs	r1, #1
 80095e2:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80095e6:	910d      	str	r1, [sp, #52]	; 0x34
 80095e8:	f7ff ff1b 	bl	8009422 <__exponent>
 80095ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80095ee:	4682      	mov	sl, r0
 80095f0:	1813      	adds	r3, r2, r0
 80095f2:	2a01      	cmp	r2, #1
 80095f4:	6123      	str	r3, [r4, #16]
 80095f6:	dc02      	bgt.n	80095fe <_printf_float+0x15e>
 80095f8:	6822      	ldr	r2, [r4, #0]
 80095fa:	07d2      	lsls	r2, r2, #31
 80095fc:	d501      	bpl.n	8009602 <_printf_float+0x162>
 80095fe:	3301      	adds	r3, #1
 8009600:	6123      	str	r3, [r4, #16]
 8009602:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 8009606:	2b00      	cmp	r3, #0
 8009608:	d09b      	beq.n	8009542 <_printf_float+0xa2>
 800960a:	232d      	movs	r3, #45	; 0x2d
 800960c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009610:	e797      	b.n	8009542 <_printf_float+0xa2>
 8009612:	2947      	cmp	r1, #71	; 0x47
 8009614:	d1bc      	bne.n	8009590 <_printf_float+0xf0>
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1ba      	bne.n	8009590 <_printf_float+0xf0>
 800961a:	2301      	movs	r3, #1
 800961c:	e7b7      	b.n	800958e <_printf_float+0xee>
 800961e:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 8009622:	d118      	bne.n	8009656 <_printf_float+0x1b6>
 8009624:	2900      	cmp	r1, #0
 8009626:	6863      	ldr	r3, [r4, #4]
 8009628:	dd0b      	ble.n	8009642 <_printf_float+0x1a2>
 800962a:	6121      	str	r1, [r4, #16]
 800962c:	b913      	cbnz	r3, 8009634 <_printf_float+0x194>
 800962e:	6822      	ldr	r2, [r4, #0]
 8009630:	07d0      	lsls	r0, r2, #31
 8009632:	d502      	bpl.n	800963a <_printf_float+0x19a>
 8009634:	3301      	adds	r3, #1
 8009636:	440b      	add	r3, r1
 8009638:	6123      	str	r3, [r4, #16]
 800963a:	f04f 0a00 	mov.w	sl, #0
 800963e:	65a1      	str	r1, [r4, #88]	; 0x58
 8009640:	e7df      	b.n	8009602 <_printf_float+0x162>
 8009642:	b913      	cbnz	r3, 800964a <_printf_float+0x1aa>
 8009644:	6822      	ldr	r2, [r4, #0]
 8009646:	07d2      	lsls	r2, r2, #31
 8009648:	d501      	bpl.n	800964e <_printf_float+0x1ae>
 800964a:	3302      	adds	r3, #2
 800964c:	e7f4      	b.n	8009638 <_printf_float+0x198>
 800964e:	2301      	movs	r3, #1
 8009650:	e7f2      	b.n	8009638 <_printf_float+0x198>
 8009652:	f04f 0967 	mov.w	r9, #103	; 0x67
 8009656:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009658:	4299      	cmp	r1, r3
 800965a:	db05      	blt.n	8009668 <_printf_float+0x1c8>
 800965c:	6823      	ldr	r3, [r4, #0]
 800965e:	6121      	str	r1, [r4, #16]
 8009660:	07d8      	lsls	r0, r3, #31
 8009662:	d5ea      	bpl.n	800963a <_printf_float+0x19a>
 8009664:	1c4b      	adds	r3, r1, #1
 8009666:	e7e7      	b.n	8009638 <_printf_float+0x198>
 8009668:	2900      	cmp	r1, #0
 800966a:	bfcc      	ite	gt
 800966c:	2201      	movgt	r2, #1
 800966e:	f1c1 0202 	rsble	r2, r1, #2
 8009672:	4413      	add	r3, r2
 8009674:	e7e0      	b.n	8009638 <_printf_float+0x198>
 8009676:	6823      	ldr	r3, [r4, #0]
 8009678:	055a      	lsls	r2, r3, #21
 800967a:	d407      	bmi.n	800968c <_printf_float+0x1ec>
 800967c:	6923      	ldr	r3, [r4, #16]
 800967e:	4642      	mov	r2, r8
 8009680:	4631      	mov	r1, r6
 8009682:	4628      	mov	r0, r5
 8009684:	47b8      	blx	r7
 8009686:	3001      	adds	r0, #1
 8009688:	d12b      	bne.n	80096e2 <_printf_float+0x242>
 800968a:	e764      	b.n	8009556 <_printf_float+0xb6>
 800968c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8009690:	f240 80dd 	bls.w	800984e <_printf_float+0x3ae>
 8009694:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009698:	2200      	movs	r2, #0
 800969a:	2300      	movs	r3, #0
 800969c:	f7f7 f984 	bl	80009a8 <__aeabi_dcmpeq>
 80096a0:	2800      	cmp	r0, #0
 80096a2:	d033      	beq.n	800970c <_printf_float+0x26c>
 80096a4:	2301      	movs	r3, #1
 80096a6:	4631      	mov	r1, r6
 80096a8:	4628      	mov	r0, r5
 80096aa:	4a35      	ldr	r2, [pc, #212]	; (8009780 <_printf_float+0x2e0>)
 80096ac:	47b8      	blx	r7
 80096ae:	3001      	adds	r0, #1
 80096b0:	f43f af51 	beq.w	8009556 <_printf_float+0xb6>
 80096b4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80096b8:	429a      	cmp	r2, r3
 80096ba:	db02      	blt.n	80096c2 <_printf_float+0x222>
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	07d8      	lsls	r0, r3, #31
 80096c0:	d50f      	bpl.n	80096e2 <_printf_float+0x242>
 80096c2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80096c6:	4631      	mov	r1, r6
 80096c8:	4628      	mov	r0, r5
 80096ca:	47b8      	blx	r7
 80096cc:	3001      	adds	r0, #1
 80096ce:	f43f af42 	beq.w	8009556 <_printf_float+0xb6>
 80096d2:	f04f 0800 	mov.w	r8, #0
 80096d6:	f104 091a 	add.w	r9, r4, #26
 80096da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80096dc:	3b01      	subs	r3, #1
 80096de:	4543      	cmp	r3, r8
 80096e0:	dc09      	bgt.n	80096f6 <_printf_float+0x256>
 80096e2:	6823      	ldr	r3, [r4, #0]
 80096e4:	079b      	lsls	r3, r3, #30
 80096e6:	f100 8102 	bmi.w	80098ee <_printf_float+0x44e>
 80096ea:	68e0      	ldr	r0, [r4, #12]
 80096ec:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80096ee:	4298      	cmp	r0, r3
 80096f0:	bfb8      	it	lt
 80096f2:	4618      	movlt	r0, r3
 80096f4:	e731      	b.n	800955a <_printf_float+0xba>
 80096f6:	2301      	movs	r3, #1
 80096f8:	464a      	mov	r2, r9
 80096fa:	4631      	mov	r1, r6
 80096fc:	4628      	mov	r0, r5
 80096fe:	47b8      	blx	r7
 8009700:	3001      	adds	r0, #1
 8009702:	f43f af28 	beq.w	8009556 <_printf_float+0xb6>
 8009706:	f108 0801 	add.w	r8, r8, #1
 800970a:	e7e6      	b.n	80096da <_printf_float+0x23a>
 800970c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800970e:	2b00      	cmp	r3, #0
 8009710:	dc38      	bgt.n	8009784 <_printf_float+0x2e4>
 8009712:	2301      	movs	r3, #1
 8009714:	4631      	mov	r1, r6
 8009716:	4628      	mov	r0, r5
 8009718:	4a19      	ldr	r2, [pc, #100]	; (8009780 <_printf_float+0x2e0>)
 800971a:	47b8      	blx	r7
 800971c:	3001      	adds	r0, #1
 800971e:	f43f af1a 	beq.w	8009556 <_printf_float+0xb6>
 8009722:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8009726:	4313      	orrs	r3, r2
 8009728:	d102      	bne.n	8009730 <_printf_float+0x290>
 800972a:	6823      	ldr	r3, [r4, #0]
 800972c:	07d9      	lsls	r1, r3, #31
 800972e:	d5d8      	bpl.n	80096e2 <_printf_float+0x242>
 8009730:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009734:	4631      	mov	r1, r6
 8009736:	4628      	mov	r0, r5
 8009738:	47b8      	blx	r7
 800973a:	3001      	adds	r0, #1
 800973c:	f43f af0b 	beq.w	8009556 <_printf_float+0xb6>
 8009740:	f04f 0900 	mov.w	r9, #0
 8009744:	f104 0a1a 	add.w	sl, r4, #26
 8009748:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800974a:	425b      	negs	r3, r3
 800974c:	454b      	cmp	r3, r9
 800974e:	dc01      	bgt.n	8009754 <_printf_float+0x2b4>
 8009750:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009752:	e794      	b.n	800967e <_printf_float+0x1de>
 8009754:	2301      	movs	r3, #1
 8009756:	4652      	mov	r2, sl
 8009758:	4631      	mov	r1, r6
 800975a:	4628      	mov	r0, r5
 800975c:	47b8      	blx	r7
 800975e:	3001      	adds	r0, #1
 8009760:	f43f aef9 	beq.w	8009556 <_printf_float+0xb6>
 8009764:	f109 0901 	add.w	r9, r9, #1
 8009768:	e7ee      	b.n	8009748 <_printf_float+0x2a8>
 800976a:	bf00      	nop
 800976c:	7fefffff 	.word	0x7fefffff
 8009770:	0800f878 	.word	0x0800f878
 8009774:	0800f87c 	.word	0x0800f87c
 8009778:	0800f884 	.word	0x0800f884
 800977c:	0800f880 	.word	0x0800f880
 8009780:	0800fce1 	.word	0x0800fce1
 8009784:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009786:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009788:	429a      	cmp	r2, r3
 800978a:	bfa8      	it	ge
 800978c:	461a      	movge	r2, r3
 800978e:	2a00      	cmp	r2, #0
 8009790:	4691      	mov	r9, r2
 8009792:	dc37      	bgt.n	8009804 <_printf_float+0x364>
 8009794:	f04f 0b00 	mov.w	fp, #0
 8009798:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800979c:	f104 021a 	add.w	r2, r4, #26
 80097a0:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80097a4:	ebaa 0309 	sub.w	r3, sl, r9
 80097a8:	455b      	cmp	r3, fp
 80097aa:	dc33      	bgt.n	8009814 <_printf_float+0x374>
 80097ac:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80097b0:	429a      	cmp	r2, r3
 80097b2:	db3b      	blt.n	800982c <_printf_float+0x38c>
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	07da      	lsls	r2, r3, #31
 80097b8:	d438      	bmi.n	800982c <_printf_float+0x38c>
 80097ba:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80097bc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80097be:	eba3 020a 	sub.w	r2, r3, sl
 80097c2:	eba3 0901 	sub.w	r9, r3, r1
 80097c6:	4591      	cmp	r9, r2
 80097c8:	bfa8      	it	ge
 80097ca:	4691      	movge	r9, r2
 80097cc:	f1b9 0f00 	cmp.w	r9, #0
 80097d0:	dc34      	bgt.n	800983c <_printf_float+0x39c>
 80097d2:	f04f 0800 	mov.w	r8, #0
 80097d6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80097da:	f104 0a1a 	add.w	sl, r4, #26
 80097de:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80097e2:	1a9b      	subs	r3, r3, r2
 80097e4:	eba3 0309 	sub.w	r3, r3, r9
 80097e8:	4543      	cmp	r3, r8
 80097ea:	f77f af7a 	ble.w	80096e2 <_printf_float+0x242>
 80097ee:	2301      	movs	r3, #1
 80097f0:	4652      	mov	r2, sl
 80097f2:	4631      	mov	r1, r6
 80097f4:	4628      	mov	r0, r5
 80097f6:	47b8      	blx	r7
 80097f8:	3001      	adds	r0, #1
 80097fa:	f43f aeac 	beq.w	8009556 <_printf_float+0xb6>
 80097fe:	f108 0801 	add.w	r8, r8, #1
 8009802:	e7ec      	b.n	80097de <_printf_float+0x33e>
 8009804:	4613      	mov	r3, r2
 8009806:	4631      	mov	r1, r6
 8009808:	4642      	mov	r2, r8
 800980a:	4628      	mov	r0, r5
 800980c:	47b8      	blx	r7
 800980e:	3001      	adds	r0, #1
 8009810:	d1c0      	bne.n	8009794 <_printf_float+0x2f4>
 8009812:	e6a0      	b.n	8009556 <_printf_float+0xb6>
 8009814:	2301      	movs	r3, #1
 8009816:	4631      	mov	r1, r6
 8009818:	4628      	mov	r0, r5
 800981a:	920b      	str	r2, [sp, #44]	; 0x2c
 800981c:	47b8      	blx	r7
 800981e:	3001      	adds	r0, #1
 8009820:	f43f ae99 	beq.w	8009556 <_printf_float+0xb6>
 8009824:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009826:	f10b 0b01 	add.w	fp, fp, #1
 800982a:	e7b9      	b.n	80097a0 <_printf_float+0x300>
 800982c:	4631      	mov	r1, r6
 800982e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009832:	4628      	mov	r0, r5
 8009834:	47b8      	blx	r7
 8009836:	3001      	adds	r0, #1
 8009838:	d1bf      	bne.n	80097ba <_printf_float+0x31a>
 800983a:	e68c      	b.n	8009556 <_printf_float+0xb6>
 800983c:	464b      	mov	r3, r9
 800983e:	4631      	mov	r1, r6
 8009840:	4628      	mov	r0, r5
 8009842:	eb08 020a 	add.w	r2, r8, sl
 8009846:	47b8      	blx	r7
 8009848:	3001      	adds	r0, #1
 800984a:	d1c2      	bne.n	80097d2 <_printf_float+0x332>
 800984c:	e683      	b.n	8009556 <_printf_float+0xb6>
 800984e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009850:	2a01      	cmp	r2, #1
 8009852:	dc01      	bgt.n	8009858 <_printf_float+0x3b8>
 8009854:	07db      	lsls	r3, r3, #31
 8009856:	d537      	bpl.n	80098c8 <_printf_float+0x428>
 8009858:	2301      	movs	r3, #1
 800985a:	4642      	mov	r2, r8
 800985c:	4631      	mov	r1, r6
 800985e:	4628      	mov	r0, r5
 8009860:	47b8      	blx	r7
 8009862:	3001      	adds	r0, #1
 8009864:	f43f ae77 	beq.w	8009556 <_printf_float+0xb6>
 8009868:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800986c:	4631      	mov	r1, r6
 800986e:	4628      	mov	r0, r5
 8009870:	47b8      	blx	r7
 8009872:	3001      	adds	r0, #1
 8009874:	f43f ae6f 	beq.w	8009556 <_printf_float+0xb6>
 8009878:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800987c:	2200      	movs	r2, #0
 800987e:	2300      	movs	r3, #0
 8009880:	f7f7 f892 	bl	80009a8 <__aeabi_dcmpeq>
 8009884:	b9d8      	cbnz	r0, 80098be <_printf_float+0x41e>
 8009886:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8009888:	f108 0201 	add.w	r2, r8, #1
 800988c:	3b01      	subs	r3, #1
 800988e:	4631      	mov	r1, r6
 8009890:	4628      	mov	r0, r5
 8009892:	47b8      	blx	r7
 8009894:	3001      	adds	r0, #1
 8009896:	d10e      	bne.n	80098b6 <_printf_float+0x416>
 8009898:	e65d      	b.n	8009556 <_printf_float+0xb6>
 800989a:	2301      	movs	r3, #1
 800989c:	464a      	mov	r2, r9
 800989e:	4631      	mov	r1, r6
 80098a0:	4628      	mov	r0, r5
 80098a2:	47b8      	blx	r7
 80098a4:	3001      	adds	r0, #1
 80098a6:	f43f ae56 	beq.w	8009556 <_printf_float+0xb6>
 80098aa:	f108 0801 	add.w	r8, r8, #1
 80098ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80098b0:	3b01      	subs	r3, #1
 80098b2:	4543      	cmp	r3, r8
 80098b4:	dcf1      	bgt.n	800989a <_printf_float+0x3fa>
 80098b6:	4653      	mov	r3, sl
 80098b8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80098bc:	e6e0      	b.n	8009680 <_printf_float+0x1e0>
 80098be:	f04f 0800 	mov.w	r8, #0
 80098c2:	f104 091a 	add.w	r9, r4, #26
 80098c6:	e7f2      	b.n	80098ae <_printf_float+0x40e>
 80098c8:	2301      	movs	r3, #1
 80098ca:	4642      	mov	r2, r8
 80098cc:	e7df      	b.n	800988e <_printf_float+0x3ee>
 80098ce:	2301      	movs	r3, #1
 80098d0:	464a      	mov	r2, r9
 80098d2:	4631      	mov	r1, r6
 80098d4:	4628      	mov	r0, r5
 80098d6:	47b8      	blx	r7
 80098d8:	3001      	adds	r0, #1
 80098da:	f43f ae3c 	beq.w	8009556 <_printf_float+0xb6>
 80098de:	f108 0801 	add.w	r8, r8, #1
 80098e2:	68e3      	ldr	r3, [r4, #12]
 80098e4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80098e6:	1a5b      	subs	r3, r3, r1
 80098e8:	4543      	cmp	r3, r8
 80098ea:	dcf0      	bgt.n	80098ce <_printf_float+0x42e>
 80098ec:	e6fd      	b.n	80096ea <_printf_float+0x24a>
 80098ee:	f04f 0800 	mov.w	r8, #0
 80098f2:	f104 0919 	add.w	r9, r4, #25
 80098f6:	e7f4      	b.n	80098e2 <_printf_float+0x442>

080098f8 <_printf_common>:
 80098f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80098fc:	4616      	mov	r6, r2
 80098fe:	4699      	mov	r9, r3
 8009900:	688a      	ldr	r2, [r1, #8]
 8009902:	690b      	ldr	r3, [r1, #16]
 8009904:	4607      	mov	r7, r0
 8009906:	4293      	cmp	r3, r2
 8009908:	bfb8      	it	lt
 800990a:	4613      	movlt	r3, r2
 800990c:	6033      	str	r3, [r6, #0]
 800990e:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009912:	460c      	mov	r4, r1
 8009914:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009918:	b10a      	cbz	r2, 800991e <_printf_common+0x26>
 800991a:	3301      	adds	r3, #1
 800991c:	6033      	str	r3, [r6, #0]
 800991e:	6823      	ldr	r3, [r4, #0]
 8009920:	0699      	lsls	r1, r3, #26
 8009922:	bf42      	ittt	mi
 8009924:	6833      	ldrmi	r3, [r6, #0]
 8009926:	3302      	addmi	r3, #2
 8009928:	6033      	strmi	r3, [r6, #0]
 800992a:	6825      	ldr	r5, [r4, #0]
 800992c:	f015 0506 	ands.w	r5, r5, #6
 8009930:	d106      	bne.n	8009940 <_printf_common+0x48>
 8009932:	f104 0a19 	add.w	sl, r4, #25
 8009936:	68e3      	ldr	r3, [r4, #12]
 8009938:	6832      	ldr	r2, [r6, #0]
 800993a:	1a9b      	subs	r3, r3, r2
 800993c:	42ab      	cmp	r3, r5
 800993e:	dc28      	bgt.n	8009992 <_printf_common+0x9a>
 8009940:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009944:	1e13      	subs	r3, r2, #0
 8009946:	6822      	ldr	r2, [r4, #0]
 8009948:	bf18      	it	ne
 800994a:	2301      	movne	r3, #1
 800994c:	0692      	lsls	r2, r2, #26
 800994e:	d42d      	bmi.n	80099ac <_printf_common+0xb4>
 8009950:	4649      	mov	r1, r9
 8009952:	4638      	mov	r0, r7
 8009954:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009958:	47c0      	blx	r8
 800995a:	3001      	adds	r0, #1
 800995c:	d020      	beq.n	80099a0 <_printf_common+0xa8>
 800995e:	6823      	ldr	r3, [r4, #0]
 8009960:	68e5      	ldr	r5, [r4, #12]
 8009962:	f003 0306 	and.w	r3, r3, #6
 8009966:	2b04      	cmp	r3, #4
 8009968:	bf18      	it	ne
 800996a:	2500      	movne	r5, #0
 800996c:	6832      	ldr	r2, [r6, #0]
 800996e:	f04f 0600 	mov.w	r6, #0
 8009972:	68a3      	ldr	r3, [r4, #8]
 8009974:	bf08      	it	eq
 8009976:	1aad      	subeq	r5, r5, r2
 8009978:	6922      	ldr	r2, [r4, #16]
 800997a:	bf08      	it	eq
 800997c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009980:	4293      	cmp	r3, r2
 8009982:	bfc4      	itt	gt
 8009984:	1a9b      	subgt	r3, r3, r2
 8009986:	18ed      	addgt	r5, r5, r3
 8009988:	341a      	adds	r4, #26
 800998a:	42b5      	cmp	r5, r6
 800998c:	d11a      	bne.n	80099c4 <_printf_common+0xcc>
 800998e:	2000      	movs	r0, #0
 8009990:	e008      	b.n	80099a4 <_printf_common+0xac>
 8009992:	2301      	movs	r3, #1
 8009994:	4652      	mov	r2, sl
 8009996:	4649      	mov	r1, r9
 8009998:	4638      	mov	r0, r7
 800999a:	47c0      	blx	r8
 800999c:	3001      	adds	r0, #1
 800999e:	d103      	bne.n	80099a8 <_printf_common+0xb0>
 80099a0:	f04f 30ff 	mov.w	r0, #4294967295
 80099a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80099a8:	3501      	adds	r5, #1
 80099aa:	e7c4      	b.n	8009936 <_printf_common+0x3e>
 80099ac:	2030      	movs	r0, #48	; 0x30
 80099ae:	18e1      	adds	r1, r4, r3
 80099b0:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80099b4:	1c5a      	adds	r2, r3, #1
 80099b6:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80099ba:	4422      	add	r2, r4
 80099bc:	3302      	adds	r3, #2
 80099be:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80099c2:	e7c5      	b.n	8009950 <_printf_common+0x58>
 80099c4:	2301      	movs	r3, #1
 80099c6:	4622      	mov	r2, r4
 80099c8:	4649      	mov	r1, r9
 80099ca:	4638      	mov	r0, r7
 80099cc:	47c0      	blx	r8
 80099ce:	3001      	adds	r0, #1
 80099d0:	d0e6      	beq.n	80099a0 <_printf_common+0xa8>
 80099d2:	3601      	adds	r6, #1
 80099d4:	e7d9      	b.n	800998a <_printf_common+0x92>
	...

080099d8 <_printf_i>:
 80099d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80099dc:	7e0f      	ldrb	r7, [r1, #24]
 80099de:	4691      	mov	r9, r2
 80099e0:	2f78      	cmp	r7, #120	; 0x78
 80099e2:	4680      	mov	r8, r0
 80099e4:	460c      	mov	r4, r1
 80099e6:	469a      	mov	sl, r3
 80099e8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80099ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80099ee:	d807      	bhi.n	8009a00 <_printf_i+0x28>
 80099f0:	2f62      	cmp	r7, #98	; 0x62
 80099f2:	d80a      	bhi.n	8009a0a <_printf_i+0x32>
 80099f4:	2f00      	cmp	r7, #0
 80099f6:	f000 80d9 	beq.w	8009bac <_printf_i+0x1d4>
 80099fa:	2f58      	cmp	r7, #88	; 0x58
 80099fc:	f000 80a4 	beq.w	8009b48 <_printf_i+0x170>
 8009a00:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a04:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009a08:	e03a      	b.n	8009a80 <_printf_i+0xa8>
 8009a0a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009a0e:	2b15      	cmp	r3, #21
 8009a10:	d8f6      	bhi.n	8009a00 <_printf_i+0x28>
 8009a12:	a101      	add	r1, pc, #4	; (adr r1, 8009a18 <_printf_i+0x40>)
 8009a14:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009a18:	08009a71 	.word	0x08009a71
 8009a1c:	08009a85 	.word	0x08009a85
 8009a20:	08009a01 	.word	0x08009a01
 8009a24:	08009a01 	.word	0x08009a01
 8009a28:	08009a01 	.word	0x08009a01
 8009a2c:	08009a01 	.word	0x08009a01
 8009a30:	08009a85 	.word	0x08009a85
 8009a34:	08009a01 	.word	0x08009a01
 8009a38:	08009a01 	.word	0x08009a01
 8009a3c:	08009a01 	.word	0x08009a01
 8009a40:	08009a01 	.word	0x08009a01
 8009a44:	08009b93 	.word	0x08009b93
 8009a48:	08009ab5 	.word	0x08009ab5
 8009a4c:	08009b75 	.word	0x08009b75
 8009a50:	08009a01 	.word	0x08009a01
 8009a54:	08009a01 	.word	0x08009a01
 8009a58:	08009bb5 	.word	0x08009bb5
 8009a5c:	08009a01 	.word	0x08009a01
 8009a60:	08009ab5 	.word	0x08009ab5
 8009a64:	08009a01 	.word	0x08009a01
 8009a68:	08009a01 	.word	0x08009a01
 8009a6c:	08009b7d 	.word	0x08009b7d
 8009a70:	682b      	ldr	r3, [r5, #0]
 8009a72:	1d1a      	adds	r2, r3, #4
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	602a      	str	r2, [r5, #0]
 8009a78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009a7c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009a80:	2301      	movs	r3, #1
 8009a82:	e0a4      	b.n	8009bce <_printf_i+0x1f6>
 8009a84:	6820      	ldr	r0, [r4, #0]
 8009a86:	6829      	ldr	r1, [r5, #0]
 8009a88:	0606      	lsls	r6, r0, #24
 8009a8a:	f101 0304 	add.w	r3, r1, #4
 8009a8e:	d50a      	bpl.n	8009aa6 <_printf_i+0xce>
 8009a90:	680e      	ldr	r6, [r1, #0]
 8009a92:	602b      	str	r3, [r5, #0]
 8009a94:	2e00      	cmp	r6, #0
 8009a96:	da03      	bge.n	8009aa0 <_printf_i+0xc8>
 8009a98:	232d      	movs	r3, #45	; 0x2d
 8009a9a:	4276      	negs	r6, r6
 8009a9c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009aa0:	230a      	movs	r3, #10
 8009aa2:	485e      	ldr	r0, [pc, #376]	; (8009c1c <_printf_i+0x244>)
 8009aa4:	e019      	b.n	8009ada <_printf_i+0x102>
 8009aa6:	680e      	ldr	r6, [r1, #0]
 8009aa8:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009aac:	602b      	str	r3, [r5, #0]
 8009aae:	bf18      	it	ne
 8009ab0:	b236      	sxthne	r6, r6
 8009ab2:	e7ef      	b.n	8009a94 <_printf_i+0xbc>
 8009ab4:	682b      	ldr	r3, [r5, #0]
 8009ab6:	6820      	ldr	r0, [r4, #0]
 8009ab8:	1d19      	adds	r1, r3, #4
 8009aba:	6029      	str	r1, [r5, #0]
 8009abc:	0601      	lsls	r1, r0, #24
 8009abe:	d501      	bpl.n	8009ac4 <_printf_i+0xec>
 8009ac0:	681e      	ldr	r6, [r3, #0]
 8009ac2:	e002      	b.n	8009aca <_printf_i+0xf2>
 8009ac4:	0646      	lsls	r6, r0, #25
 8009ac6:	d5fb      	bpl.n	8009ac0 <_printf_i+0xe8>
 8009ac8:	881e      	ldrh	r6, [r3, #0]
 8009aca:	2f6f      	cmp	r7, #111	; 0x6f
 8009acc:	bf0c      	ite	eq
 8009ace:	2308      	moveq	r3, #8
 8009ad0:	230a      	movne	r3, #10
 8009ad2:	4852      	ldr	r0, [pc, #328]	; (8009c1c <_printf_i+0x244>)
 8009ad4:	2100      	movs	r1, #0
 8009ad6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009ada:	6865      	ldr	r5, [r4, #4]
 8009adc:	2d00      	cmp	r5, #0
 8009ade:	bfa8      	it	ge
 8009ae0:	6821      	ldrge	r1, [r4, #0]
 8009ae2:	60a5      	str	r5, [r4, #8]
 8009ae4:	bfa4      	itt	ge
 8009ae6:	f021 0104 	bicge.w	r1, r1, #4
 8009aea:	6021      	strge	r1, [r4, #0]
 8009aec:	b90e      	cbnz	r6, 8009af2 <_printf_i+0x11a>
 8009aee:	2d00      	cmp	r5, #0
 8009af0:	d04d      	beq.n	8009b8e <_printf_i+0x1b6>
 8009af2:	4615      	mov	r5, r2
 8009af4:	fbb6 f1f3 	udiv	r1, r6, r3
 8009af8:	fb03 6711 	mls	r7, r3, r1, r6
 8009afc:	5dc7      	ldrb	r7, [r0, r7]
 8009afe:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009b02:	4637      	mov	r7, r6
 8009b04:	42bb      	cmp	r3, r7
 8009b06:	460e      	mov	r6, r1
 8009b08:	d9f4      	bls.n	8009af4 <_printf_i+0x11c>
 8009b0a:	2b08      	cmp	r3, #8
 8009b0c:	d10b      	bne.n	8009b26 <_printf_i+0x14e>
 8009b0e:	6823      	ldr	r3, [r4, #0]
 8009b10:	07de      	lsls	r6, r3, #31
 8009b12:	d508      	bpl.n	8009b26 <_printf_i+0x14e>
 8009b14:	6923      	ldr	r3, [r4, #16]
 8009b16:	6861      	ldr	r1, [r4, #4]
 8009b18:	4299      	cmp	r1, r3
 8009b1a:	bfde      	ittt	le
 8009b1c:	2330      	movle	r3, #48	; 0x30
 8009b1e:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009b22:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009b26:	1b52      	subs	r2, r2, r5
 8009b28:	6122      	str	r2, [r4, #16]
 8009b2a:	464b      	mov	r3, r9
 8009b2c:	4621      	mov	r1, r4
 8009b2e:	4640      	mov	r0, r8
 8009b30:	f8cd a000 	str.w	sl, [sp]
 8009b34:	aa03      	add	r2, sp, #12
 8009b36:	f7ff fedf 	bl	80098f8 <_printf_common>
 8009b3a:	3001      	adds	r0, #1
 8009b3c:	d14c      	bne.n	8009bd8 <_printf_i+0x200>
 8009b3e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b42:	b004      	add	sp, #16
 8009b44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009b48:	4834      	ldr	r0, [pc, #208]	; (8009c1c <_printf_i+0x244>)
 8009b4a:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009b4e:	6829      	ldr	r1, [r5, #0]
 8009b50:	6823      	ldr	r3, [r4, #0]
 8009b52:	f851 6b04 	ldr.w	r6, [r1], #4
 8009b56:	6029      	str	r1, [r5, #0]
 8009b58:	061d      	lsls	r5, r3, #24
 8009b5a:	d514      	bpl.n	8009b86 <_printf_i+0x1ae>
 8009b5c:	07df      	lsls	r7, r3, #31
 8009b5e:	bf44      	itt	mi
 8009b60:	f043 0320 	orrmi.w	r3, r3, #32
 8009b64:	6023      	strmi	r3, [r4, #0]
 8009b66:	b91e      	cbnz	r6, 8009b70 <_printf_i+0x198>
 8009b68:	6823      	ldr	r3, [r4, #0]
 8009b6a:	f023 0320 	bic.w	r3, r3, #32
 8009b6e:	6023      	str	r3, [r4, #0]
 8009b70:	2310      	movs	r3, #16
 8009b72:	e7af      	b.n	8009ad4 <_printf_i+0xfc>
 8009b74:	6823      	ldr	r3, [r4, #0]
 8009b76:	f043 0320 	orr.w	r3, r3, #32
 8009b7a:	6023      	str	r3, [r4, #0]
 8009b7c:	2378      	movs	r3, #120	; 0x78
 8009b7e:	4828      	ldr	r0, [pc, #160]	; (8009c20 <_printf_i+0x248>)
 8009b80:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009b84:	e7e3      	b.n	8009b4e <_printf_i+0x176>
 8009b86:	0659      	lsls	r1, r3, #25
 8009b88:	bf48      	it	mi
 8009b8a:	b2b6      	uxthmi	r6, r6
 8009b8c:	e7e6      	b.n	8009b5c <_printf_i+0x184>
 8009b8e:	4615      	mov	r5, r2
 8009b90:	e7bb      	b.n	8009b0a <_printf_i+0x132>
 8009b92:	682b      	ldr	r3, [r5, #0]
 8009b94:	6826      	ldr	r6, [r4, #0]
 8009b96:	1d18      	adds	r0, r3, #4
 8009b98:	6961      	ldr	r1, [r4, #20]
 8009b9a:	6028      	str	r0, [r5, #0]
 8009b9c:	0635      	lsls	r5, r6, #24
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	d501      	bpl.n	8009ba6 <_printf_i+0x1ce>
 8009ba2:	6019      	str	r1, [r3, #0]
 8009ba4:	e002      	b.n	8009bac <_printf_i+0x1d4>
 8009ba6:	0670      	lsls	r0, r6, #25
 8009ba8:	d5fb      	bpl.n	8009ba2 <_printf_i+0x1ca>
 8009baa:	8019      	strh	r1, [r3, #0]
 8009bac:	2300      	movs	r3, #0
 8009bae:	4615      	mov	r5, r2
 8009bb0:	6123      	str	r3, [r4, #16]
 8009bb2:	e7ba      	b.n	8009b2a <_printf_i+0x152>
 8009bb4:	682b      	ldr	r3, [r5, #0]
 8009bb6:	2100      	movs	r1, #0
 8009bb8:	1d1a      	adds	r2, r3, #4
 8009bba:	602a      	str	r2, [r5, #0]
 8009bbc:	681d      	ldr	r5, [r3, #0]
 8009bbe:	6862      	ldr	r2, [r4, #4]
 8009bc0:	4628      	mov	r0, r5
 8009bc2:	f002 ff2f 	bl	800ca24 <memchr>
 8009bc6:	b108      	cbz	r0, 8009bcc <_printf_i+0x1f4>
 8009bc8:	1b40      	subs	r0, r0, r5
 8009bca:	6060      	str	r0, [r4, #4]
 8009bcc:	6863      	ldr	r3, [r4, #4]
 8009bce:	6123      	str	r3, [r4, #16]
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009bd6:	e7a8      	b.n	8009b2a <_printf_i+0x152>
 8009bd8:	462a      	mov	r2, r5
 8009bda:	4649      	mov	r1, r9
 8009bdc:	4640      	mov	r0, r8
 8009bde:	6923      	ldr	r3, [r4, #16]
 8009be0:	47d0      	blx	sl
 8009be2:	3001      	adds	r0, #1
 8009be4:	d0ab      	beq.n	8009b3e <_printf_i+0x166>
 8009be6:	6823      	ldr	r3, [r4, #0]
 8009be8:	079b      	lsls	r3, r3, #30
 8009bea:	d413      	bmi.n	8009c14 <_printf_i+0x23c>
 8009bec:	68e0      	ldr	r0, [r4, #12]
 8009bee:	9b03      	ldr	r3, [sp, #12]
 8009bf0:	4298      	cmp	r0, r3
 8009bf2:	bfb8      	it	lt
 8009bf4:	4618      	movlt	r0, r3
 8009bf6:	e7a4      	b.n	8009b42 <_printf_i+0x16a>
 8009bf8:	2301      	movs	r3, #1
 8009bfa:	4632      	mov	r2, r6
 8009bfc:	4649      	mov	r1, r9
 8009bfe:	4640      	mov	r0, r8
 8009c00:	47d0      	blx	sl
 8009c02:	3001      	adds	r0, #1
 8009c04:	d09b      	beq.n	8009b3e <_printf_i+0x166>
 8009c06:	3501      	adds	r5, #1
 8009c08:	68e3      	ldr	r3, [r4, #12]
 8009c0a:	9903      	ldr	r1, [sp, #12]
 8009c0c:	1a5b      	subs	r3, r3, r1
 8009c0e:	42ab      	cmp	r3, r5
 8009c10:	dcf2      	bgt.n	8009bf8 <_printf_i+0x220>
 8009c12:	e7eb      	b.n	8009bec <_printf_i+0x214>
 8009c14:	2500      	movs	r5, #0
 8009c16:	f104 0619 	add.w	r6, r4, #25
 8009c1a:	e7f5      	b.n	8009c08 <_printf_i+0x230>
 8009c1c:	0800f888 	.word	0x0800f888
 8009c20:	0800f899 	.word	0x0800f899

08009c24 <_scanf_float>:
 8009c24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c28:	b087      	sub	sp, #28
 8009c2a:	9303      	str	r3, [sp, #12]
 8009c2c:	688b      	ldr	r3, [r1, #8]
 8009c2e:	4617      	mov	r7, r2
 8009c30:	1e5a      	subs	r2, r3, #1
 8009c32:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009c36:	bf85      	ittet	hi
 8009c38:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8009c3c:	195b      	addhi	r3, r3, r5
 8009c3e:	2300      	movls	r3, #0
 8009c40:	9302      	strhi	r3, [sp, #8]
 8009c42:	bf88      	it	hi
 8009c44:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009c48:	468b      	mov	fp, r1
 8009c4a:	f04f 0500 	mov.w	r5, #0
 8009c4e:	bf8c      	ite	hi
 8009c50:	608b      	strhi	r3, [r1, #8]
 8009c52:	9302      	strls	r3, [sp, #8]
 8009c54:	680b      	ldr	r3, [r1, #0]
 8009c56:	4680      	mov	r8, r0
 8009c58:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009c5c:	f84b 3b1c 	str.w	r3, [fp], #28
 8009c60:	460c      	mov	r4, r1
 8009c62:	465e      	mov	r6, fp
 8009c64:	46aa      	mov	sl, r5
 8009c66:	46a9      	mov	r9, r5
 8009c68:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8009c6c:	9501      	str	r5, [sp, #4]
 8009c6e:	68a2      	ldr	r2, [r4, #8]
 8009c70:	b152      	cbz	r2, 8009c88 <_scanf_float+0x64>
 8009c72:	683b      	ldr	r3, [r7, #0]
 8009c74:	781b      	ldrb	r3, [r3, #0]
 8009c76:	2b4e      	cmp	r3, #78	; 0x4e
 8009c78:	d864      	bhi.n	8009d44 <_scanf_float+0x120>
 8009c7a:	2b40      	cmp	r3, #64	; 0x40
 8009c7c:	d83c      	bhi.n	8009cf8 <_scanf_float+0xd4>
 8009c7e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8009c82:	b2c8      	uxtb	r0, r1
 8009c84:	280e      	cmp	r0, #14
 8009c86:	d93a      	bls.n	8009cfe <_scanf_float+0xda>
 8009c88:	f1b9 0f00 	cmp.w	r9, #0
 8009c8c:	d003      	beq.n	8009c96 <_scanf_float+0x72>
 8009c8e:	6823      	ldr	r3, [r4, #0]
 8009c90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009c94:	6023      	str	r3, [r4, #0]
 8009c96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009c9a:	f1ba 0f01 	cmp.w	sl, #1
 8009c9e:	f200 8113 	bhi.w	8009ec8 <_scanf_float+0x2a4>
 8009ca2:	455e      	cmp	r6, fp
 8009ca4:	f200 8105 	bhi.w	8009eb2 <_scanf_float+0x28e>
 8009ca8:	2501      	movs	r5, #1
 8009caa:	4628      	mov	r0, r5
 8009cac:	b007      	add	sp, #28
 8009cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009cb2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009cb6:	2a0d      	cmp	r2, #13
 8009cb8:	d8e6      	bhi.n	8009c88 <_scanf_float+0x64>
 8009cba:	a101      	add	r1, pc, #4	; (adr r1, 8009cc0 <_scanf_float+0x9c>)
 8009cbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009cc0:	08009dff 	.word	0x08009dff
 8009cc4:	08009c89 	.word	0x08009c89
 8009cc8:	08009c89 	.word	0x08009c89
 8009ccc:	08009c89 	.word	0x08009c89
 8009cd0:	08009e5f 	.word	0x08009e5f
 8009cd4:	08009e37 	.word	0x08009e37
 8009cd8:	08009c89 	.word	0x08009c89
 8009cdc:	08009c89 	.word	0x08009c89
 8009ce0:	08009e0d 	.word	0x08009e0d
 8009ce4:	08009c89 	.word	0x08009c89
 8009ce8:	08009c89 	.word	0x08009c89
 8009cec:	08009c89 	.word	0x08009c89
 8009cf0:	08009c89 	.word	0x08009c89
 8009cf4:	08009dc5 	.word	0x08009dc5
 8009cf8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009cfc:	e7db      	b.n	8009cb6 <_scanf_float+0x92>
 8009cfe:	290e      	cmp	r1, #14
 8009d00:	d8c2      	bhi.n	8009c88 <_scanf_float+0x64>
 8009d02:	a001      	add	r0, pc, #4	; (adr r0, 8009d08 <_scanf_float+0xe4>)
 8009d04:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009d08:	08009db7 	.word	0x08009db7
 8009d0c:	08009c89 	.word	0x08009c89
 8009d10:	08009db7 	.word	0x08009db7
 8009d14:	08009e4b 	.word	0x08009e4b
 8009d18:	08009c89 	.word	0x08009c89
 8009d1c:	08009d65 	.word	0x08009d65
 8009d20:	08009da1 	.word	0x08009da1
 8009d24:	08009da1 	.word	0x08009da1
 8009d28:	08009da1 	.word	0x08009da1
 8009d2c:	08009da1 	.word	0x08009da1
 8009d30:	08009da1 	.word	0x08009da1
 8009d34:	08009da1 	.word	0x08009da1
 8009d38:	08009da1 	.word	0x08009da1
 8009d3c:	08009da1 	.word	0x08009da1
 8009d40:	08009da1 	.word	0x08009da1
 8009d44:	2b6e      	cmp	r3, #110	; 0x6e
 8009d46:	d809      	bhi.n	8009d5c <_scanf_float+0x138>
 8009d48:	2b60      	cmp	r3, #96	; 0x60
 8009d4a:	d8b2      	bhi.n	8009cb2 <_scanf_float+0x8e>
 8009d4c:	2b54      	cmp	r3, #84	; 0x54
 8009d4e:	d077      	beq.n	8009e40 <_scanf_float+0x21c>
 8009d50:	2b59      	cmp	r3, #89	; 0x59
 8009d52:	d199      	bne.n	8009c88 <_scanf_float+0x64>
 8009d54:	2d07      	cmp	r5, #7
 8009d56:	d197      	bne.n	8009c88 <_scanf_float+0x64>
 8009d58:	2508      	movs	r5, #8
 8009d5a:	e029      	b.n	8009db0 <_scanf_float+0x18c>
 8009d5c:	2b74      	cmp	r3, #116	; 0x74
 8009d5e:	d06f      	beq.n	8009e40 <_scanf_float+0x21c>
 8009d60:	2b79      	cmp	r3, #121	; 0x79
 8009d62:	e7f6      	b.n	8009d52 <_scanf_float+0x12e>
 8009d64:	6821      	ldr	r1, [r4, #0]
 8009d66:	05c8      	lsls	r0, r1, #23
 8009d68:	d51a      	bpl.n	8009da0 <_scanf_float+0x17c>
 8009d6a:	9b02      	ldr	r3, [sp, #8]
 8009d6c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8009d70:	6021      	str	r1, [r4, #0]
 8009d72:	f109 0901 	add.w	r9, r9, #1
 8009d76:	b11b      	cbz	r3, 8009d80 <_scanf_float+0x15c>
 8009d78:	3b01      	subs	r3, #1
 8009d7a:	3201      	adds	r2, #1
 8009d7c:	9302      	str	r3, [sp, #8]
 8009d7e:	60a2      	str	r2, [r4, #8]
 8009d80:	68a3      	ldr	r3, [r4, #8]
 8009d82:	3b01      	subs	r3, #1
 8009d84:	60a3      	str	r3, [r4, #8]
 8009d86:	6923      	ldr	r3, [r4, #16]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	6123      	str	r3, [r4, #16]
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	3b01      	subs	r3, #1
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	607b      	str	r3, [r7, #4]
 8009d94:	f340 8084 	ble.w	8009ea0 <_scanf_float+0x27c>
 8009d98:	683b      	ldr	r3, [r7, #0]
 8009d9a:	3301      	adds	r3, #1
 8009d9c:	603b      	str	r3, [r7, #0]
 8009d9e:	e766      	b.n	8009c6e <_scanf_float+0x4a>
 8009da0:	eb1a 0f05 	cmn.w	sl, r5
 8009da4:	f47f af70 	bne.w	8009c88 <_scanf_float+0x64>
 8009da8:	6822      	ldr	r2, [r4, #0]
 8009daa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8009dae:	6022      	str	r2, [r4, #0]
 8009db0:	f806 3b01 	strb.w	r3, [r6], #1
 8009db4:	e7e4      	b.n	8009d80 <_scanf_float+0x15c>
 8009db6:	6822      	ldr	r2, [r4, #0]
 8009db8:	0610      	lsls	r0, r2, #24
 8009dba:	f57f af65 	bpl.w	8009c88 <_scanf_float+0x64>
 8009dbe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009dc2:	e7f4      	b.n	8009dae <_scanf_float+0x18a>
 8009dc4:	f1ba 0f00 	cmp.w	sl, #0
 8009dc8:	d10e      	bne.n	8009de8 <_scanf_float+0x1c4>
 8009dca:	f1b9 0f00 	cmp.w	r9, #0
 8009dce:	d10e      	bne.n	8009dee <_scanf_float+0x1ca>
 8009dd0:	6822      	ldr	r2, [r4, #0]
 8009dd2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009dd6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009dda:	d108      	bne.n	8009dee <_scanf_float+0x1ca>
 8009ddc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009de0:	f04f 0a01 	mov.w	sl, #1
 8009de4:	6022      	str	r2, [r4, #0]
 8009de6:	e7e3      	b.n	8009db0 <_scanf_float+0x18c>
 8009de8:	f1ba 0f02 	cmp.w	sl, #2
 8009dec:	d055      	beq.n	8009e9a <_scanf_float+0x276>
 8009dee:	2d01      	cmp	r5, #1
 8009df0:	d002      	beq.n	8009df8 <_scanf_float+0x1d4>
 8009df2:	2d04      	cmp	r5, #4
 8009df4:	f47f af48 	bne.w	8009c88 <_scanf_float+0x64>
 8009df8:	3501      	adds	r5, #1
 8009dfa:	b2ed      	uxtb	r5, r5
 8009dfc:	e7d8      	b.n	8009db0 <_scanf_float+0x18c>
 8009dfe:	f1ba 0f01 	cmp.w	sl, #1
 8009e02:	f47f af41 	bne.w	8009c88 <_scanf_float+0x64>
 8009e06:	f04f 0a02 	mov.w	sl, #2
 8009e0a:	e7d1      	b.n	8009db0 <_scanf_float+0x18c>
 8009e0c:	b97d      	cbnz	r5, 8009e2e <_scanf_float+0x20a>
 8009e0e:	f1b9 0f00 	cmp.w	r9, #0
 8009e12:	f47f af3c 	bne.w	8009c8e <_scanf_float+0x6a>
 8009e16:	6822      	ldr	r2, [r4, #0]
 8009e18:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009e1c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009e20:	f47f af39 	bne.w	8009c96 <_scanf_float+0x72>
 8009e24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009e28:	2501      	movs	r5, #1
 8009e2a:	6022      	str	r2, [r4, #0]
 8009e2c:	e7c0      	b.n	8009db0 <_scanf_float+0x18c>
 8009e2e:	2d03      	cmp	r5, #3
 8009e30:	d0e2      	beq.n	8009df8 <_scanf_float+0x1d4>
 8009e32:	2d05      	cmp	r5, #5
 8009e34:	e7de      	b.n	8009df4 <_scanf_float+0x1d0>
 8009e36:	2d02      	cmp	r5, #2
 8009e38:	f47f af26 	bne.w	8009c88 <_scanf_float+0x64>
 8009e3c:	2503      	movs	r5, #3
 8009e3e:	e7b7      	b.n	8009db0 <_scanf_float+0x18c>
 8009e40:	2d06      	cmp	r5, #6
 8009e42:	f47f af21 	bne.w	8009c88 <_scanf_float+0x64>
 8009e46:	2507      	movs	r5, #7
 8009e48:	e7b2      	b.n	8009db0 <_scanf_float+0x18c>
 8009e4a:	6822      	ldr	r2, [r4, #0]
 8009e4c:	0591      	lsls	r1, r2, #22
 8009e4e:	f57f af1b 	bpl.w	8009c88 <_scanf_float+0x64>
 8009e52:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009e56:	6022      	str	r2, [r4, #0]
 8009e58:	f8cd 9004 	str.w	r9, [sp, #4]
 8009e5c:	e7a8      	b.n	8009db0 <_scanf_float+0x18c>
 8009e5e:	6822      	ldr	r2, [r4, #0]
 8009e60:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009e64:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009e68:	d006      	beq.n	8009e78 <_scanf_float+0x254>
 8009e6a:	0550      	lsls	r0, r2, #21
 8009e6c:	f57f af0c 	bpl.w	8009c88 <_scanf_float+0x64>
 8009e70:	f1b9 0f00 	cmp.w	r9, #0
 8009e74:	f43f af0f 	beq.w	8009c96 <_scanf_float+0x72>
 8009e78:	0591      	lsls	r1, r2, #22
 8009e7a:	bf58      	it	pl
 8009e7c:	9901      	ldrpl	r1, [sp, #4]
 8009e7e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009e82:	bf58      	it	pl
 8009e84:	eba9 0101 	subpl.w	r1, r9, r1
 8009e88:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009e8c:	f04f 0900 	mov.w	r9, #0
 8009e90:	bf58      	it	pl
 8009e92:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009e96:	6022      	str	r2, [r4, #0]
 8009e98:	e78a      	b.n	8009db0 <_scanf_float+0x18c>
 8009e9a:	f04f 0a03 	mov.w	sl, #3
 8009e9e:	e787      	b.n	8009db0 <_scanf_float+0x18c>
 8009ea0:	4639      	mov	r1, r7
 8009ea2:	4640      	mov	r0, r8
 8009ea4:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009ea8:	4798      	blx	r3
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	f43f aedf 	beq.w	8009c6e <_scanf_float+0x4a>
 8009eb0:	e6ea      	b.n	8009c88 <_scanf_float+0x64>
 8009eb2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009eb6:	463a      	mov	r2, r7
 8009eb8:	4640      	mov	r0, r8
 8009eba:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ebe:	4798      	blx	r3
 8009ec0:	6923      	ldr	r3, [r4, #16]
 8009ec2:	3b01      	subs	r3, #1
 8009ec4:	6123      	str	r3, [r4, #16]
 8009ec6:	e6ec      	b.n	8009ca2 <_scanf_float+0x7e>
 8009ec8:	1e6b      	subs	r3, r5, #1
 8009eca:	2b06      	cmp	r3, #6
 8009ecc:	d825      	bhi.n	8009f1a <_scanf_float+0x2f6>
 8009ece:	2d02      	cmp	r5, #2
 8009ed0:	d836      	bhi.n	8009f40 <_scanf_float+0x31c>
 8009ed2:	455e      	cmp	r6, fp
 8009ed4:	f67f aee8 	bls.w	8009ca8 <_scanf_float+0x84>
 8009ed8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009edc:	463a      	mov	r2, r7
 8009ede:	4640      	mov	r0, r8
 8009ee0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009ee4:	4798      	blx	r3
 8009ee6:	6923      	ldr	r3, [r4, #16]
 8009ee8:	3b01      	subs	r3, #1
 8009eea:	6123      	str	r3, [r4, #16]
 8009eec:	e7f1      	b.n	8009ed2 <_scanf_float+0x2ae>
 8009eee:	9802      	ldr	r0, [sp, #8]
 8009ef0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ef4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009ef8:	463a      	mov	r2, r7
 8009efa:	9002      	str	r0, [sp, #8]
 8009efc:	4640      	mov	r0, r8
 8009efe:	4798      	blx	r3
 8009f00:	6923      	ldr	r3, [r4, #16]
 8009f02:	3b01      	subs	r3, #1
 8009f04:	6123      	str	r3, [r4, #16]
 8009f06:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009f0a:	fa5f fa8a 	uxtb.w	sl, sl
 8009f0e:	f1ba 0f02 	cmp.w	sl, #2
 8009f12:	d1ec      	bne.n	8009eee <_scanf_float+0x2ca>
 8009f14:	3d03      	subs	r5, #3
 8009f16:	b2ed      	uxtb	r5, r5
 8009f18:	1b76      	subs	r6, r6, r5
 8009f1a:	6823      	ldr	r3, [r4, #0]
 8009f1c:	05da      	lsls	r2, r3, #23
 8009f1e:	d52f      	bpl.n	8009f80 <_scanf_float+0x35c>
 8009f20:	055b      	lsls	r3, r3, #21
 8009f22:	d510      	bpl.n	8009f46 <_scanf_float+0x322>
 8009f24:	455e      	cmp	r6, fp
 8009f26:	f67f aebf 	bls.w	8009ca8 <_scanf_float+0x84>
 8009f2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f2e:	463a      	mov	r2, r7
 8009f30:	4640      	mov	r0, r8
 8009f32:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009f36:	4798      	blx	r3
 8009f38:	6923      	ldr	r3, [r4, #16]
 8009f3a:	3b01      	subs	r3, #1
 8009f3c:	6123      	str	r3, [r4, #16]
 8009f3e:	e7f1      	b.n	8009f24 <_scanf_float+0x300>
 8009f40:	46aa      	mov	sl, r5
 8009f42:	9602      	str	r6, [sp, #8]
 8009f44:	e7df      	b.n	8009f06 <_scanf_float+0x2e2>
 8009f46:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009f4a:	6923      	ldr	r3, [r4, #16]
 8009f4c:	2965      	cmp	r1, #101	; 0x65
 8009f4e:	f103 33ff 	add.w	r3, r3, #4294967295
 8009f52:	f106 35ff 	add.w	r5, r6, #4294967295
 8009f56:	6123      	str	r3, [r4, #16]
 8009f58:	d00c      	beq.n	8009f74 <_scanf_float+0x350>
 8009f5a:	2945      	cmp	r1, #69	; 0x45
 8009f5c:	d00a      	beq.n	8009f74 <_scanf_float+0x350>
 8009f5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f62:	463a      	mov	r2, r7
 8009f64:	4640      	mov	r0, r8
 8009f66:	4798      	blx	r3
 8009f68:	6923      	ldr	r3, [r4, #16]
 8009f6a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009f6e:	3b01      	subs	r3, #1
 8009f70:	1eb5      	subs	r5, r6, #2
 8009f72:	6123      	str	r3, [r4, #16]
 8009f74:	463a      	mov	r2, r7
 8009f76:	4640      	mov	r0, r8
 8009f78:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009f7c:	4798      	blx	r3
 8009f7e:	462e      	mov	r6, r5
 8009f80:	6825      	ldr	r5, [r4, #0]
 8009f82:	f015 0510 	ands.w	r5, r5, #16
 8009f86:	d155      	bne.n	800a034 <_scanf_float+0x410>
 8009f88:	7035      	strb	r5, [r6, #0]
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009f90:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009f94:	d11b      	bne.n	8009fce <_scanf_float+0x3aa>
 8009f96:	9b01      	ldr	r3, [sp, #4]
 8009f98:	454b      	cmp	r3, r9
 8009f9a:	eba3 0209 	sub.w	r2, r3, r9
 8009f9e:	d123      	bne.n	8009fe8 <_scanf_float+0x3c4>
 8009fa0:	2200      	movs	r2, #0
 8009fa2:	4659      	mov	r1, fp
 8009fa4:	4640      	mov	r0, r8
 8009fa6:	f000 ffa3 	bl	800aef0 <_strtod_r>
 8009faa:	6822      	ldr	r2, [r4, #0]
 8009fac:	9b03      	ldr	r3, [sp, #12]
 8009fae:	f012 0f02 	tst.w	r2, #2
 8009fb2:	4606      	mov	r6, r0
 8009fb4:	460f      	mov	r7, r1
 8009fb6:	681b      	ldr	r3, [r3, #0]
 8009fb8:	d021      	beq.n	8009ffe <_scanf_float+0x3da>
 8009fba:	1d1a      	adds	r2, r3, #4
 8009fbc:	9903      	ldr	r1, [sp, #12]
 8009fbe:	600a      	str	r2, [r1, #0]
 8009fc0:	681b      	ldr	r3, [r3, #0]
 8009fc2:	e9c3 6700 	strd	r6, r7, [r3]
 8009fc6:	68e3      	ldr	r3, [r4, #12]
 8009fc8:	3301      	adds	r3, #1
 8009fca:	60e3      	str	r3, [r4, #12]
 8009fcc:	e66d      	b.n	8009caa <_scanf_float+0x86>
 8009fce:	9b04      	ldr	r3, [sp, #16]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d0e5      	beq.n	8009fa0 <_scanf_float+0x37c>
 8009fd4:	9905      	ldr	r1, [sp, #20]
 8009fd6:	230a      	movs	r3, #10
 8009fd8:	462a      	mov	r2, r5
 8009fda:	4640      	mov	r0, r8
 8009fdc:	3101      	adds	r1, #1
 8009fde:	f001 f815 	bl	800b00c <_strtol_r>
 8009fe2:	9b04      	ldr	r3, [sp, #16]
 8009fe4:	9e05      	ldr	r6, [sp, #20]
 8009fe6:	1ac2      	subs	r2, r0, r3
 8009fe8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009fec:	429e      	cmp	r6, r3
 8009fee:	bf28      	it	cs
 8009ff0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009ff4:	4630      	mov	r0, r6
 8009ff6:	4910      	ldr	r1, [pc, #64]	; (800a038 <_scanf_float+0x414>)
 8009ff8:	f000 f8c4 	bl	800a184 <siprintf>
 8009ffc:	e7d0      	b.n	8009fa0 <_scanf_float+0x37c>
 8009ffe:	f012 0f04 	tst.w	r2, #4
 800a002:	f103 0204 	add.w	r2, r3, #4
 800a006:	d1d9      	bne.n	8009fbc <_scanf_float+0x398>
 800a008:	f8dd c00c 	ldr.w	ip, [sp, #12]
 800a00c:	f8cc 2000 	str.w	r2, [ip]
 800a010:	f8d3 8000 	ldr.w	r8, [r3]
 800a014:	4602      	mov	r2, r0
 800a016:	460b      	mov	r3, r1
 800a018:	f7f6 fcf8 	bl	8000a0c <__aeabi_dcmpun>
 800a01c:	b128      	cbz	r0, 800a02a <_scanf_float+0x406>
 800a01e:	4807      	ldr	r0, [pc, #28]	; (800a03c <_scanf_float+0x418>)
 800a020:	f000 f8ac 	bl	800a17c <nanf>
 800a024:	f8c8 0000 	str.w	r0, [r8]
 800a028:	e7cd      	b.n	8009fc6 <_scanf_float+0x3a2>
 800a02a:	4630      	mov	r0, r6
 800a02c:	4639      	mov	r1, r7
 800a02e:	f7f6 fd4b 	bl	8000ac8 <__aeabi_d2f>
 800a032:	e7f7      	b.n	800a024 <_scanf_float+0x400>
 800a034:	2500      	movs	r5, #0
 800a036:	e638      	b.n	8009caa <_scanf_float+0x86>
 800a038:	0800f8aa 	.word	0x0800f8aa
 800a03c:	0800fd33 	.word	0x0800fd33

0800a040 <iprintf>:
 800a040:	b40f      	push	{r0, r1, r2, r3}
 800a042:	4b0a      	ldr	r3, [pc, #40]	; (800a06c <iprintf+0x2c>)
 800a044:	b513      	push	{r0, r1, r4, lr}
 800a046:	681c      	ldr	r4, [r3, #0]
 800a048:	b124      	cbz	r4, 800a054 <iprintf+0x14>
 800a04a:	69a3      	ldr	r3, [r4, #24]
 800a04c:	b913      	cbnz	r3, 800a054 <iprintf+0x14>
 800a04e:	4620      	mov	r0, r4
 800a050:	f002 f852 	bl	800c0f8 <__sinit>
 800a054:	ab05      	add	r3, sp, #20
 800a056:	4620      	mov	r0, r4
 800a058:	9a04      	ldr	r2, [sp, #16]
 800a05a:	68a1      	ldr	r1, [r4, #8]
 800a05c:	9301      	str	r3, [sp, #4]
 800a05e:	f003 fd0b 	bl	800da78 <_vfiprintf_r>
 800a062:	b002      	add	sp, #8
 800a064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a068:	b004      	add	sp, #16
 800a06a:	4770      	bx	lr
 800a06c:	2000002c 	.word	0x2000002c

0800a070 <_puts_r>:
 800a070:	b570      	push	{r4, r5, r6, lr}
 800a072:	460e      	mov	r6, r1
 800a074:	4605      	mov	r5, r0
 800a076:	b118      	cbz	r0, 800a080 <_puts_r+0x10>
 800a078:	6983      	ldr	r3, [r0, #24]
 800a07a:	b90b      	cbnz	r3, 800a080 <_puts_r+0x10>
 800a07c:	f002 f83c 	bl	800c0f8 <__sinit>
 800a080:	69ab      	ldr	r3, [r5, #24]
 800a082:	68ac      	ldr	r4, [r5, #8]
 800a084:	b913      	cbnz	r3, 800a08c <_puts_r+0x1c>
 800a086:	4628      	mov	r0, r5
 800a088:	f002 f836 	bl	800c0f8 <__sinit>
 800a08c:	4b2c      	ldr	r3, [pc, #176]	; (800a140 <_puts_r+0xd0>)
 800a08e:	429c      	cmp	r4, r3
 800a090:	d120      	bne.n	800a0d4 <_puts_r+0x64>
 800a092:	686c      	ldr	r4, [r5, #4]
 800a094:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a096:	07db      	lsls	r3, r3, #31
 800a098:	d405      	bmi.n	800a0a6 <_puts_r+0x36>
 800a09a:	89a3      	ldrh	r3, [r4, #12]
 800a09c:	0598      	lsls	r0, r3, #22
 800a09e:	d402      	bmi.n	800a0a6 <_puts_r+0x36>
 800a0a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a0a2:	f002 fc32 	bl	800c90a <__retarget_lock_acquire_recursive>
 800a0a6:	89a3      	ldrh	r3, [r4, #12]
 800a0a8:	0719      	lsls	r1, r3, #28
 800a0aa:	d51d      	bpl.n	800a0e8 <_puts_r+0x78>
 800a0ac:	6923      	ldr	r3, [r4, #16]
 800a0ae:	b1db      	cbz	r3, 800a0e8 <_puts_r+0x78>
 800a0b0:	3e01      	subs	r6, #1
 800a0b2:	68a3      	ldr	r3, [r4, #8]
 800a0b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800a0b8:	3b01      	subs	r3, #1
 800a0ba:	60a3      	str	r3, [r4, #8]
 800a0bc:	bb39      	cbnz	r1, 800a10e <_puts_r+0x9e>
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	da38      	bge.n	800a134 <_puts_r+0xc4>
 800a0c2:	4622      	mov	r2, r4
 800a0c4:	210a      	movs	r1, #10
 800a0c6:	4628      	mov	r0, r5
 800a0c8:	f000 ffa2 	bl	800b010 <__swbuf_r>
 800a0cc:	3001      	adds	r0, #1
 800a0ce:	d011      	beq.n	800a0f4 <_puts_r+0x84>
 800a0d0:	250a      	movs	r5, #10
 800a0d2:	e011      	b.n	800a0f8 <_puts_r+0x88>
 800a0d4:	4b1b      	ldr	r3, [pc, #108]	; (800a144 <_puts_r+0xd4>)
 800a0d6:	429c      	cmp	r4, r3
 800a0d8:	d101      	bne.n	800a0de <_puts_r+0x6e>
 800a0da:	68ac      	ldr	r4, [r5, #8]
 800a0dc:	e7da      	b.n	800a094 <_puts_r+0x24>
 800a0de:	4b1a      	ldr	r3, [pc, #104]	; (800a148 <_puts_r+0xd8>)
 800a0e0:	429c      	cmp	r4, r3
 800a0e2:	bf08      	it	eq
 800a0e4:	68ec      	ldreq	r4, [r5, #12]
 800a0e6:	e7d5      	b.n	800a094 <_puts_r+0x24>
 800a0e8:	4621      	mov	r1, r4
 800a0ea:	4628      	mov	r0, r5
 800a0ec:	f000 fff4 	bl	800b0d8 <__swsetup_r>
 800a0f0:	2800      	cmp	r0, #0
 800a0f2:	d0dd      	beq.n	800a0b0 <_puts_r+0x40>
 800a0f4:	f04f 35ff 	mov.w	r5, #4294967295
 800a0f8:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800a0fa:	07da      	lsls	r2, r3, #31
 800a0fc:	d405      	bmi.n	800a10a <_puts_r+0x9a>
 800a0fe:	89a3      	ldrh	r3, [r4, #12]
 800a100:	059b      	lsls	r3, r3, #22
 800a102:	d402      	bmi.n	800a10a <_puts_r+0x9a>
 800a104:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800a106:	f002 fc01 	bl	800c90c <__retarget_lock_release_recursive>
 800a10a:	4628      	mov	r0, r5
 800a10c:	bd70      	pop	{r4, r5, r6, pc}
 800a10e:	2b00      	cmp	r3, #0
 800a110:	da04      	bge.n	800a11c <_puts_r+0xac>
 800a112:	69a2      	ldr	r2, [r4, #24]
 800a114:	429a      	cmp	r2, r3
 800a116:	dc06      	bgt.n	800a126 <_puts_r+0xb6>
 800a118:	290a      	cmp	r1, #10
 800a11a:	d004      	beq.n	800a126 <_puts_r+0xb6>
 800a11c:	6823      	ldr	r3, [r4, #0]
 800a11e:	1c5a      	adds	r2, r3, #1
 800a120:	6022      	str	r2, [r4, #0]
 800a122:	7019      	strb	r1, [r3, #0]
 800a124:	e7c5      	b.n	800a0b2 <_puts_r+0x42>
 800a126:	4622      	mov	r2, r4
 800a128:	4628      	mov	r0, r5
 800a12a:	f000 ff71 	bl	800b010 <__swbuf_r>
 800a12e:	3001      	adds	r0, #1
 800a130:	d1bf      	bne.n	800a0b2 <_puts_r+0x42>
 800a132:	e7df      	b.n	800a0f4 <_puts_r+0x84>
 800a134:	250a      	movs	r5, #10
 800a136:	6823      	ldr	r3, [r4, #0]
 800a138:	1c5a      	adds	r2, r3, #1
 800a13a:	6022      	str	r2, [r4, #0]
 800a13c:	701d      	strb	r5, [r3, #0]
 800a13e:	e7db      	b.n	800a0f8 <_puts_r+0x88>
 800a140:	0800fab4 	.word	0x0800fab4
 800a144:	0800fad4 	.word	0x0800fad4
 800a148:	0800fa94 	.word	0x0800fa94

0800a14c <puts>:
 800a14c:	4b02      	ldr	r3, [pc, #8]	; (800a158 <puts+0xc>)
 800a14e:	4601      	mov	r1, r0
 800a150:	6818      	ldr	r0, [r3, #0]
 800a152:	f7ff bf8d 	b.w	800a070 <_puts_r>
 800a156:	bf00      	nop
 800a158:	2000002c 	.word	0x2000002c

0800a15c <_sbrk_r>:
 800a15c:	b538      	push	{r3, r4, r5, lr}
 800a15e:	2300      	movs	r3, #0
 800a160:	4d05      	ldr	r5, [pc, #20]	; (800a178 <_sbrk_r+0x1c>)
 800a162:	4604      	mov	r4, r0
 800a164:	4608      	mov	r0, r1
 800a166:	602b      	str	r3, [r5, #0]
 800a168:	f7f8 fe42 	bl	8002df0 <_sbrk>
 800a16c:	1c43      	adds	r3, r0, #1
 800a16e:	d102      	bne.n	800a176 <_sbrk_r+0x1a>
 800a170:	682b      	ldr	r3, [r5, #0]
 800a172:	b103      	cbz	r3, 800a176 <_sbrk_r+0x1a>
 800a174:	6023      	str	r3, [r4, #0]
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	20002158 	.word	0x20002158

0800a17c <nanf>:
 800a17c:	4800      	ldr	r0, [pc, #0]	; (800a180 <nanf+0x4>)
 800a17e:	4770      	bx	lr
 800a180:	7fc00000 	.word	0x7fc00000

0800a184 <siprintf>:
 800a184:	b40e      	push	{r1, r2, r3}
 800a186:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a18a:	b500      	push	{lr}
 800a18c:	b09c      	sub	sp, #112	; 0x70
 800a18e:	ab1d      	add	r3, sp, #116	; 0x74
 800a190:	9002      	str	r0, [sp, #8]
 800a192:	9006      	str	r0, [sp, #24]
 800a194:	9107      	str	r1, [sp, #28]
 800a196:	9104      	str	r1, [sp, #16]
 800a198:	4808      	ldr	r0, [pc, #32]	; (800a1bc <siprintf+0x38>)
 800a19a:	4909      	ldr	r1, [pc, #36]	; (800a1c0 <siprintf+0x3c>)
 800a19c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1a0:	9105      	str	r1, [sp, #20]
 800a1a2:	6800      	ldr	r0, [r0, #0]
 800a1a4:	a902      	add	r1, sp, #8
 800a1a6:	9301      	str	r3, [sp, #4]
 800a1a8:	f003 f96a 	bl	800d480 <_svfiprintf_r>
 800a1ac:	2200      	movs	r2, #0
 800a1ae:	9b02      	ldr	r3, [sp, #8]
 800a1b0:	701a      	strb	r2, [r3, #0]
 800a1b2:	b01c      	add	sp, #112	; 0x70
 800a1b4:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1b8:	b003      	add	sp, #12
 800a1ba:	4770      	bx	lr
 800a1bc:	2000002c 	.word	0x2000002c
 800a1c0:	ffff0208 	.word	0xffff0208

0800a1c4 <siscanf>:
 800a1c4:	b40e      	push	{r1, r2, r3}
 800a1c6:	f44f 7201 	mov.w	r2, #516	; 0x204
 800a1ca:	b530      	push	{r4, r5, lr}
 800a1cc:	b09c      	sub	sp, #112	; 0x70
 800a1ce:	ac1f      	add	r4, sp, #124	; 0x7c
 800a1d0:	f854 5b04 	ldr.w	r5, [r4], #4
 800a1d4:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a1d8:	9002      	str	r0, [sp, #8]
 800a1da:	9006      	str	r0, [sp, #24]
 800a1dc:	f7f5 ffb8 	bl	8000150 <strlen>
 800a1e0:	4b0b      	ldr	r3, [pc, #44]	; (800a210 <siscanf+0x4c>)
 800a1e2:	9003      	str	r0, [sp, #12]
 800a1e4:	930b      	str	r3, [sp, #44]	; 0x2c
 800a1e6:	2300      	movs	r3, #0
 800a1e8:	930f      	str	r3, [sp, #60]	; 0x3c
 800a1ea:	9314      	str	r3, [sp, #80]	; 0x50
 800a1ec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a1f0:	9007      	str	r0, [sp, #28]
 800a1f2:	4808      	ldr	r0, [pc, #32]	; (800a214 <siscanf+0x50>)
 800a1f4:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a1f8:	462a      	mov	r2, r5
 800a1fa:	4623      	mov	r3, r4
 800a1fc:	a902      	add	r1, sp, #8
 800a1fe:	6800      	ldr	r0, [r0, #0]
 800a200:	9401      	str	r4, [sp, #4]
 800a202:	f003 fa97 	bl	800d734 <__ssvfiscanf_r>
 800a206:	b01c      	add	sp, #112	; 0x70
 800a208:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a20c:	b003      	add	sp, #12
 800a20e:	4770      	bx	lr
 800a210:	0800a23b 	.word	0x0800a23b
 800a214:	2000002c 	.word	0x2000002c

0800a218 <__sread>:
 800a218:	b510      	push	{r4, lr}
 800a21a:	460c      	mov	r4, r1
 800a21c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a220:	f003 feac 	bl	800df7c <_read_r>
 800a224:	2800      	cmp	r0, #0
 800a226:	bfab      	itete	ge
 800a228:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a22a:	89a3      	ldrhlt	r3, [r4, #12]
 800a22c:	181b      	addge	r3, r3, r0
 800a22e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a232:	bfac      	ite	ge
 800a234:	6563      	strge	r3, [r4, #84]	; 0x54
 800a236:	81a3      	strhlt	r3, [r4, #12]
 800a238:	bd10      	pop	{r4, pc}

0800a23a <__seofread>:
 800a23a:	2000      	movs	r0, #0
 800a23c:	4770      	bx	lr

0800a23e <__swrite>:
 800a23e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a242:	461f      	mov	r7, r3
 800a244:	898b      	ldrh	r3, [r1, #12]
 800a246:	4605      	mov	r5, r0
 800a248:	05db      	lsls	r3, r3, #23
 800a24a:	460c      	mov	r4, r1
 800a24c:	4616      	mov	r6, r2
 800a24e:	d505      	bpl.n	800a25c <__swrite+0x1e>
 800a250:	2302      	movs	r3, #2
 800a252:	2200      	movs	r2, #0
 800a254:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a258:	f002 fb5a 	bl	800c910 <_lseek_r>
 800a25c:	89a3      	ldrh	r3, [r4, #12]
 800a25e:	4632      	mov	r2, r6
 800a260:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a264:	81a3      	strh	r3, [r4, #12]
 800a266:	4628      	mov	r0, r5
 800a268:	463b      	mov	r3, r7
 800a26a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a26e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a272:	f000 bf1f 	b.w	800b0b4 <_write_r>

0800a276 <__sseek>:
 800a276:	b510      	push	{r4, lr}
 800a278:	460c      	mov	r4, r1
 800a27a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a27e:	f002 fb47 	bl	800c910 <_lseek_r>
 800a282:	1c43      	adds	r3, r0, #1
 800a284:	89a3      	ldrh	r3, [r4, #12]
 800a286:	bf15      	itete	ne
 800a288:	6560      	strne	r0, [r4, #84]	; 0x54
 800a28a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a28e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a292:	81a3      	strheq	r3, [r4, #12]
 800a294:	bf18      	it	ne
 800a296:	81a3      	strhne	r3, [r4, #12]
 800a298:	bd10      	pop	{r4, pc}

0800a29a <__sclose>:
 800a29a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a29e:	f000 bf89 	b.w	800b1b4 <_close_r>

0800a2a2 <strcpy>:
 800a2a2:	4603      	mov	r3, r0
 800a2a4:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2a8:	f803 2b01 	strb.w	r2, [r3], #1
 800a2ac:	2a00      	cmp	r2, #0
 800a2ae:	d1f9      	bne.n	800a2a4 <strcpy+0x2>
 800a2b0:	4770      	bx	lr

0800a2b2 <strstr>:
 800a2b2:	780a      	ldrb	r2, [r1, #0]
 800a2b4:	b570      	push	{r4, r5, r6, lr}
 800a2b6:	b96a      	cbnz	r2, 800a2d4 <strstr+0x22>
 800a2b8:	bd70      	pop	{r4, r5, r6, pc}
 800a2ba:	429a      	cmp	r2, r3
 800a2bc:	d109      	bne.n	800a2d2 <strstr+0x20>
 800a2be:	460c      	mov	r4, r1
 800a2c0:	4605      	mov	r5, r0
 800a2c2:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800a2c6:	2b00      	cmp	r3, #0
 800a2c8:	d0f6      	beq.n	800a2b8 <strstr+0x6>
 800a2ca:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 800a2ce:	429e      	cmp	r6, r3
 800a2d0:	d0f7      	beq.n	800a2c2 <strstr+0x10>
 800a2d2:	3001      	adds	r0, #1
 800a2d4:	7803      	ldrb	r3, [r0, #0]
 800a2d6:	2b00      	cmp	r3, #0
 800a2d8:	d1ef      	bne.n	800a2ba <strstr+0x8>
 800a2da:	4618      	mov	r0, r3
 800a2dc:	e7ec      	b.n	800a2b8 <strstr+0x6>

0800a2de <sulp>:
 800a2de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a2e2:	460f      	mov	r7, r1
 800a2e4:	4690      	mov	r8, r2
 800a2e6:	f002 ff27 	bl	800d138 <__ulp>
 800a2ea:	4604      	mov	r4, r0
 800a2ec:	460d      	mov	r5, r1
 800a2ee:	f1b8 0f00 	cmp.w	r8, #0
 800a2f2:	d011      	beq.n	800a318 <sulp+0x3a>
 800a2f4:	f3c7 530a 	ubfx	r3, r7, #20, #11
 800a2f8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a2fc:	2b00      	cmp	r3, #0
 800a2fe:	dd0b      	ble.n	800a318 <sulp+0x3a>
 800a300:	2400      	movs	r4, #0
 800a302:	051b      	lsls	r3, r3, #20
 800a304:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a308:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a30c:	4622      	mov	r2, r4
 800a30e:	462b      	mov	r3, r5
 800a310:	f7f6 f8e2 	bl	80004d8 <__aeabi_dmul>
 800a314:	4604      	mov	r4, r0
 800a316:	460d      	mov	r5, r1
 800a318:	4620      	mov	r0, r4
 800a31a:	4629      	mov	r1, r5
 800a31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a320 <_strtod_l>:
 800a320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a324:	469b      	mov	fp, r3
 800a326:	2300      	movs	r3, #0
 800a328:	b09f      	sub	sp, #124	; 0x7c
 800a32a:	931a      	str	r3, [sp, #104]	; 0x68
 800a32c:	4b9e      	ldr	r3, [pc, #632]	; (800a5a8 <_strtod_l+0x288>)
 800a32e:	4682      	mov	sl, r0
 800a330:	681f      	ldr	r7, [r3, #0]
 800a332:	460e      	mov	r6, r1
 800a334:	4638      	mov	r0, r7
 800a336:	9215      	str	r2, [sp, #84]	; 0x54
 800a338:	f7f5 ff0a 	bl	8000150 <strlen>
 800a33c:	f04f 0800 	mov.w	r8, #0
 800a340:	4604      	mov	r4, r0
 800a342:	f04f 0900 	mov.w	r9, #0
 800a346:	9619      	str	r6, [sp, #100]	; 0x64
 800a348:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a34a:	781a      	ldrb	r2, [r3, #0]
 800a34c:	2a2b      	cmp	r2, #43	; 0x2b
 800a34e:	d04c      	beq.n	800a3ea <_strtod_l+0xca>
 800a350:	d83a      	bhi.n	800a3c8 <_strtod_l+0xa8>
 800a352:	2a0d      	cmp	r2, #13
 800a354:	d833      	bhi.n	800a3be <_strtod_l+0x9e>
 800a356:	2a08      	cmp	r2, #8
 800a358:	d833      	bhi.n	800a3c2 <_strtod_l+0xa2>
 800a35a:	2a00      	cmp	r2, #0
 800a35c:	d03d      	beq.n	800a3da <_strtod_l+0xba>
 800a35e:	2300      	movs	r3, #0
 800a360:	930a      	str	r3, [sp, #40]	; 0x28
 800a362:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800a364:	782b      	ldrb	r3, [r5, #0]
 800a366:	2b30      	cmp	r3, #48	; 0x30
 800a368:	f040 80aa 	bne.w	800a4c0 <_strtod_l+0x1a0>
 800a36c:	786b      	ldrb	r3, [r5, #1]
 800a36e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a372:	2b58      	cmp	r3, #88	; 0x58
 800a374:	d166      	bne.n	800a444 <_strtod_l+0x124>
 800a376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a378:	4650      	mov	r0, sl
 800a37a:	9301      	str	r3, [sp, #4]
 800a37c:	ab1a      	add	r3, sp, #104	; 0x68
 800a37e:	9300      	str	r3, [sp, #0]
 800a380:	4a8a      	ldr	r2, [pc, #552]	; (800a5ac <_strtod_l+0x28c>)
 800a382:	f8cd b008 	str.w	fp, [sp, #8]
 800a386:	ab1b      	add	r3, sp, #108	; 0x6c
 800a388:	a919      	add	r1, sp, #100	; 0x64
 800a38a:	f001 ffbb 	bl	800c304 <__gethex>
 800a38e:	f010 0607 	ands.w	r6, r0, #7
 800a392:	4604      	mov	r4, r0
 800a394:	d005      	beq.n	800a3a2 <_strtod_l+0x82>
 800a396:	2e06      	cmp	r6, #6
 800a398:	d129      	bne.n	800a3ee <_strtod_l+0xce>
 800a39a:	2300      	movs	r3, #0
 800a39c:	3501      	adds	r5, #1
 800a39e:	9519      	str	r5, [sp, #100]	; 0x64
 800a3a0:	930a      	str	r3, [sp, #40]	; 0x28
 800a3a2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	f040 858a 	bne.w	800aebe <_strtod_l+0xb9e>
 800a3aa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3ac:	b1d3      	cbz	r3, 800a3e4 <_strtod_l+0xc4>
 800a3ae:	4642      	mov	r2, r8
 800a3b0:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800a3b4:	4610      	mov	r0, r2
 800a3b6:	4619      	mov	r1, r3
 800a3b8:	b01f      	add	sp, #124	; 0x7c
 800a3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a3be:	2a20      	cmp	r2, #32
 800a3c0:	d1cd      	bne.n	800a35e <_strtod_l+0x3e>
 800a3c2:	3301      	adds	r3, #1
 800a3c4:	9319      	str	r3, [sp, #100]	; 0x64
 800a3c6:	e7bf      	b.n	800a348 <_strtod_l+0x28>
 800a3c8:	2a2d      	cmp	r2, #45	; 0x2d
 800a3ca:	d1c8      	bne.n	800a35e <_strtod_l+0x3e>
 800a3cc:	2201      	movs	r2, #1
 800a3ce:	920a      	str	r2, [sp, #40]	; 0x28
 800a3d0:	1c5a      	adds	r2, r3, #1
 800a3d2:	9219      	str	r2, [sp, #100]	; 0x64
 800a3d4:	785b      	ldrb	r3, [r3, #1]
 800a3d6:	2b00      	cmp	r3, #0
 800a3d8:	d1c3      	bne.n	800a362 <_strtod_l+0x42>
 800a3da:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a3dc:	9619      	str	r6, [sp, #100]	; 0x64
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	f040 856b 	bne.w	800aeba <_strtod_l+0xb9a>
 800a3e4:	4642      	mov	r2, r8
 800a3e6:	464b      	mov	r3, r9
 800a3e8:	e7e4      	b.n	800a3b4 <_strtod_l+0x94>
 800a3ea:	2200      	movs	r2, #0
 800a3ec:	e7ef      	b.n	800a3ce <_strtod_l+0xae>
 800a3ee:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a3f0:	b13a      	cbz	r2, 800a402 <_strtod_l+0xe2>
 800a3f2:	2135      	movs	r1, #53	; 0x35
 800a3f4:	a81c      	add	r0, sp, #112	; 0x70
 800a3f6:	f002 ffa3 	bl	800d340 <__copybits>
 800a3fa:	4650      	mov	r0, sl
 800a3fc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a3fe:	f002 fb6b 	bl	800cad8 <_Bfree>
 800a402:	3e01      	subs	r6, #1
 800a404:	2e04      	cmp	r6, #4
 800a406:	d806      	bhi.n	800a416 <_strtod_l+0xf6>
 800a408:	e8df f006 	tbb	[pc, r6]
 800a40c:	1714030a 	.word	0x1714030a
 800a410:	0a          	.byte	0x0a
 800a411:	00          	.byte	0x00
 800a412:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800a416:	0721      	lsls	r1, r4, #28
 800a418:	d5c3      	bpl.n	800a3a2 <_strtod_l+0x82>
 800a41a:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 800a41e:	e7c0      	b.n	800a3a2 <_strtod_l+0x82>
 800a420:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800a422:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800a426:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a42a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a42e:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800a432:	e7f0      	b.n	800a416 <_strtod_l+0xf6>
 800a434:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800a5b0 <_strtod_l+0x290>
 800a438:	e7ed      	b.n	800a416 <_strtod_l+0xf6>
 800a43a:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800a43e:	f04f 38ff 	mov.w	r8, #4294967295
 800a442:	e7e8      	b.n	800a416 <_strtod_l+0xf6>
 800a444:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a446:	1c5a      	adds	r2, r3, #1
 800a448:	9219      	str	r2, [sp, #100]	; 0x64
 800a44a:	785b      	ldrb	r3, [r3, #1]
 800a44c:	2b30      	cmp	r3, #48	; 0x30
 800a44e:	d0f9      	beq.n	800a444 <_strtod_l+0x124>
 800a450:	2b00      	cmp	r3, #0
 800a452:	d0a6      	beq.n	800a3a2 <_strtod_l+0x82>
 800a454:	2301      	movs	r3, #1
 800a456:	9307      	str	r3, [sp, #28]
 800a458:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a45a:	220a      	movs	r2, #10
 800a45c:	9308      	str	r3, [sp, #32]
 800a45e:	2300      	movs	r3, #0
 800a460:	469b      	mov	fp, r3
 800a462:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800a466:	9819      	ldr	r0, [sp, #100]	; 0x64
 800a468:	7805      	ldrb	r5, [r0, #0]
 800a46a:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 800a46e:	b2d9      	uxtb	r1, r3
 800a470:	2909      	cmp	r1, #9
 800a472:	d927      	bls.n	800a4c4 <_strtod_l+0x1a4>
 800a474:	4622      	mov	r2, r4
 800a476:	4639      	mov	r1, r7
 800a478:	f003 fdd0 	bl	800e01c <strncmp>
 800a47c:	2800      	cmp	r0, #0
 800a47e:	d033      	beq.n	800a4e8 <_strtod_l+0x1c8>
 800a480:	2000      	movs	r0, #0
 800a482:	462a      	mov	r2, r5
 800a484:	465c      	mov	r4, fp
 800a486:	4603      	mov	r3, r0
 800a488:	9004      	str	r0, [sp, #16]
 800a48a:	2a65      	cmp	r2, #101	; 0x65
 800a48c:	d001      	beq.n	800a492 <_strtod_l+0x172>
 800a48e:	2a45      	cmp	r2, #69	; 0x45
 800a490:	d114      	bne.n	800a4bc <_strtod_l+0x19c>
 800a492:	b91c      	cbnz	r4, 800a49c <_strtod_l+0x17c>
 800a494:	9a07      	ldr	r2, [sp, #28]
 800a496:	4302      	orrs	r2, r0
 800a498:	d09f      	beq.n	800a3da <_strtod_l+0xba>
 800a49a:	2400      	movs	r4, #0
 800a49c:	9e19      	ldr	r6, [sp, #100]	; 0x64
 800a49e:	1c72      	adds	r2, r6, #1
 800a4a0:	9219      	str	r2, [sp, #100]	; 0x64
 800a4a2:	7872      	ldrb	r2, [r6, #1]
 800a4a4:	2a2b      	cmp	r2, #43	; 0x2b
 800a4a6:	d079      	beq.n	800a59c <_strtod_l+0x27c>
 800a4a8:	2a2d      	cmp	r2, #45	; 0x2d
 800a4aa:	f000 8083 	beq.w	800a5b4 <_strtod_l+0x294>
 800a4ae:	2700      	movs	r7, #0
 800a4b0:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a4b4:	2909      	cmp	r1, #9
 800a4b6:	f240 8083 	bls.w	800a5c0 <_strtod_l+0x2a0>
 800a4ba:	9619      	str	r6, [sp, #100]	; 0x64
 800a4bc:	2500      	movs	r5, #0
 800a4be:	e09f      	b.n	800a600 <_strtod_l+0x2e0>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	e7c8      	b.n	800a456 <_strtod_l+0x136>
 800a4c4:	f1bb 0f08 	cmp.w	fp, #8
 800a4c8:	bfd5      	itete	le
 800a4ca:	9906      	ldrle	r1, [sp, #24]
 800a4cc:	9905      	ldrgt	r1, [sp, #20]
 800a4ce:	fb02 3301 	mlale	r3, r2, r1, r3
 800a4d2:	fb02 3301 	mlagt	r3, r2, r1, r3
 800a4d6:	f100 0001 	add.w	r0, r0, #1
 800a4da:	bfd4      	ite	le
 800a4dc:	9306      	strle	r3, [sp, #24]
 800a4de:	9305      	strgt	r3, [sp, #20]
 800a4e0:	f10b 0b01 	add.w	fp, fp, #1
 800a4e4:	9019      	str	r0, [sp, #100]	; 0x64
 800a4e6:	e7be      	b.n	800a466 <_strtod_l+0x146>
 800a4e8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a4ea:	191a      	adds	r2, r3, r4
 800a4ec:	9219      	str	r2, [sp, #100]	; 0x64
 800a4ee:	5d1a      	ldrb	r2, [r3, r4]
 800a4f0:	f1bb 0f00 	cmp.w	fp, #0
 800a4f4:	d036      	beq.n	800a564 <_strtod_l+0x244>
 800a4f6:	465c      	mov	r4, fp
 800a4f8:	9004      	str	r0, [sp, #16]
 800a4fa:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a4fe:	2b09      	cmp	r3, #9
 800a500:	d912      	bls.n	800a528 <_strtod_l+0x208>
 800a502:	2301      	movs	r3, #1
 800a504:	e7c1      	b.n	800a48a <_strtod_l+0x16a>
 800a506:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a508:	3001      	adds	r0, #1
 800a50a:	1c5a      	adds	r2, r3, #1
 800a50c:	9219      	str	r2, [sp, #100]	; 0x64
 800a50e:	785a      	ldrb	r2, [r3, #1]
 800a510:	2a30      	cmp	r2, #48	; 0x30
 800a512:	d0f8      	beq.n	800a506 <_strtod_l+0x1e6>
 800a514:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a518:	2b08      	cmp	r3, #8
 800a51a:	f200 84d5 	bhi.w	800aec8 <_strtod_l+0xba8>
 800a51e:	9004      	str	r0, [sp, #16]
 800a520:	2000      	movs	r0, #0
 800a522:	4604      	mov	r4, r0
 800a524:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a526:	9308      	str	r3, [sp, #32]
 800a528:	3a30      	subs	r2, #48	; 0x30
 800a52a:	f100 0301 	add.w	r3, r0, #1
 800a52e:	d013      	beq.n	800a558 <_strtod_l+0x238>
 800a530:	9904      	ldr	r1, [sp, #16]
 800a532:	1905      	adds	r5, r0, r4
 800a534:	4419      	add	r1, r3
 800a536:	9104      	str	r1, [sp, #16]
 800a538:	4623      	mov	r3, r4
 800a53a:	210a      	movs	r1, #10
 800a53c:	42ab      	cmp	r3, r5
 800a53e:	d113      	bne.n	800a568 <_strtod_l+0x248>
 800a540:	1823      	adds	r3, r4, r0
 800a542:	2b08      	cmp	r3, #8
 800a544:	f104 0401 	add.w	r4, r4, #1
 800a548:	4404      	add	r4, r0
 800a54a:	dc1b      	bgt.n	800a584 <_strtod_l+0x264>
 800a54c:	230a      	movs	r3, #10
 800a54e:	9906      	ldr	r1, [sp, #24]
 800a550:	fb03 2301 	mla	r3, r3, r1, r2
 800a554:	9306      	str	r3, [sp, #24]
 800a556:	2300      	movs	r3, #0
 800a558:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a55a:	4618      	mov	r0, r3
 800a55c:	1c51      	adds	r1, r2, #1
 800a55e:	9119      	str	r1, [sp, #100]	; 0x64
 800a560:	7852      	ldrb	r2, [r2, #1]
 800a562:	e7ca      	b.n	800a4fa <_strtod_l+0x1da>
 800a564:	4658      	mov	r0, fp
 800a566:	e7d3      	b.n	800a510 <_strtod_l+0x1f0>
 800a568:	2b08      	cmp	r3, #8
 800a56a:	dc04      	bgt.n	800a576 <_strtod_l+0x256>
 800a56c:	9f06      	ldr	r7, [sp, #24]
 800a56e:	434f      	muls	r7, r1
 800a570:	9706      	str	r7, [sp, #24]
 800a572:	3301      	adds	r3, #1
 800a574:	e7e2      	b.n	800a53c <_strtod_l+0x21c>
 800a576:	1c5f      	adds	r7, r3, #1
 800a578:	2f10      	cmp	r7, #16
 800a57a:	bfde      	ittt	le
 800a57c:	9f05      	ldrle	r7, [sp, #20]
 800a57e:	434f      	mulle	r7, r1
 800a580:	9705      	strle	r7, [sp, #20]
 800a582:	e7f6      	b.n	800a572 <_strtod_l+0x252>
 800a584:	2c10      	cmp	r4, #16
 800a586:	bfdf      	itttt	le
 800a588:	230a      	movle	r3, #10
 800a58a:	9905      	ldrle	r1, [sp, #20]
 800a58c:	fb03 2301 	mlale	r3, r3, r1, r2
 800a590:	9305      	strle	r3, [sp, #20]
 800a592:	e7e0      	b.n	800a556 <_strtod_l+0x236>
 800a594:	2300      	movs	r3, #0
 800a596:	9304      	str	r3, [sp, #16]
 800a598:	2301      	movs	r3, #1
 800a59a:	e77b      	b.n	800a494 <_strtod_l+0x174>
 800a59c:	2700      	movs	r7, #0
 800a59e:	1cb2      	adds	r2, r6, #2
 800a5a0:	9219      	str	r2, [sp, #100]	; 0x64
 800a5a2:	78b2      	ldrb	r2, [r6, #2]
 800a5a4:	e784      	b.n	800a4b0 <_strtod_l+0x190>
 800a5a6:	bf00      	nop
 800a5a8:	0800fb5c 	.word	0x0800fb5c
 800a5ac:	0800f8b0 	.word	0x0800f8b0
 800a5b0:	7ff00000 	.word	0x7ff00000
 800a5b4:	2701      	movs	r7, #1
 800a5b6:	e7f2      	b.n	800a59e <_strtod_l+0x27e>
 800a5b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a5ba:	1c51      	adds	r1, r2, #1
 800a5bc:	9119      	str	r1, [sp, #100]	; 0x64
 800a5be:	7852      	ldrb	r2, [r2, #1]
 800a5c0:	2a30      	cmp	r2, #48	; 0x30
 800a5c2:	d0f9      	beq.n	800a5b8 <_strtod_l+0x298>
 800a5c4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a5c8:	2908      	cmp	r1, #8
 800a5ca:	f63f af77 	bhi.w	800a4bc <_strtod_l+0x19c>
 800a5ce:	f04f 0e0a 	mov.w	lr, #10
 800a5d2:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 800a5d6:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a5d8:	9209      	str	r2, [sp, #36]	; 0x24
 800a5da:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a5dc:	1c51      	adds	r1, r2, #1
 800a5de:	9119      	str	r1, [sp, #100]	; 0x64
 800a5e0:	7852      	ldrb	r2, [r2, #1]
 800a5e2:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 800a5e6:	2d09      	cmp	r5, #9
 800a5e8:	d935      	bls.n	800a656 <_strtod_l+0x336>
 800a5ea:	9d09      	ldr	r5, [sp, #36]	; 0x24
 800a5ec:	1b49      	subs	r1, r1, r5
 800a5ee:	2908      	cmp	r1, #8
 800a5f0:	f644 651f 	movw	r5, #19999	; 0x4e1f
 800a5f4:	dc02      	bgt.n	800a5fc <_strtod_l+0x2dc>
 800a5f6:	4565      	cmp	r5, ip
 800a5f8:	bfa8      	it	ge
 800a5fa:	4665      	movge	r5, ip
 800a5fc:	b107      	cbz	r7, 800a600 <_strtod_l+0x2e0>
 800a5fe:	426d      	negs	r5, r5
 800a600:	2c00      	cmp	r4, #0
 800a602:	d14c      	bne.n	800a69e <_strtod_l+0x37e>
 800a604:	9907      	ldr	r1, [sp, #28]
 800a606:	4301      	orrs	r1, r0
 800a608:	f47f aecb 	bne.w	800a3a2 <_strtod_l+0x82>
 800a60c:	2b00      	cmp	r3, #0
 800a60e:	f47f aee4 	bne.w	800a3da <_strtod_l+0xba>
 800a612:	2a69      	cmp	r2, #105	; 0x69
 800a614:	d026      	beq.n	800a664 <_strtod_l+0x344>
 800a616:	dc23      	bgt.n	800a660 <_strtod_l+0x340>
 800a618:	2a49      	cmp	r2, #73	; 0x49
 800a61a:	d023      	beq.n	800a664 <_strtod_l+0x344>
 800a61c:	2a4e      	cmp	r2, #78	; 0x4e
 800a61e:	f47f aedc 	bne.w	800a3da <_strtod_l+0xba>
 800a622:	499d      	ldr	r1, [pc, #628]	; (800a898 <_strtod_l+0x578>)
 800a624:	a819      	add	r0, sp, #100	; 0x64
 800a626:	f002 f8bb 	bl	800c7a0 <__match>
 800a62a:	2800      	cmp	r0, #0
 800a62c:	f43f aed5 	beq.w	800a3da <_strtod_l+0xba>
 800a630:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a632:	781b      	ldrb	r3, [r3, #0]
 800a634:	2b28      	cmp	r3, #40	; 0x28
 800a636:	d12c      	bne.n	800a692 <_strtod_l+0x372>
 800a638:	4998      	ldr	r1, [pc, #608]	; (800a89c <_strtod_l+0x57c>)
 800a63a:	aa1c      	add	r2, sp, #112	; 0x70
 800a63c:	a819      	add	r0, sp, #100	; 0x64
 800a63e:	f002 f8c3 	bl	800c7c8 <__hexnan>
 800a642:	2805      	cmp	r0, #5
 800a644:	d125      	bne.n	800a692 <_strtod_l+0x372>
 800a646:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 800a648:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 800a64c:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800a650:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800a654:	e6a5      	b.n	800a3a2 <_strtod_l+0x82>
 800a656:	fb0e 2c0c 	mla	ip, lr, ip, r2
 800a65a:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 800a65e:	e7bc      	b.n	800a5da <_strtod_l+0x2ba>
 800a660:	2a6e      	cmp	r2, #110	; 0x6e
 800a662:	e7dc      	b.n	800a61e <_strtod_l+0x2fe>
 800a664:	498e      	ldr	r1, [pc, #568]	; (800a8a0 <_strtod_l+0x580>)
 800a666:	a819      	add	r0, sp, #100	; 0x64
 800a668:	f002 f89a 	bl	800c7a0 <__match>
 800a66c:	2800      	cmp	r0, #0
 800a66e:	f43f aeb4 	beq.w	800a3da <_strtod_l+0xba>
 800a672:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a674:	498b      	ldr	r1, [pc, #556]	; (800a8a4 <_strtod_l+0x584>)
 800a676:	3b01      	subs	r3, #1
 800a678:	a819      	add	r0, sp, #100	; 0x64
 800a67a:	9319      	str	r3, [sp, #100]	; 0x64
 800a67c:	f002 f890 	bl	800c7a0 <__match>
 800a680:	b910      	cbnz	r0, 800a688 <_strtod_l+0x368>
 800a682:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a684:	3301      	adds	r3, #1
 800a686:	9319      	str	r3, [sp, #100]	; 0x64
 800a688:	f04f 0800 	mov.w	r8, #0
 800a68c:	f8df 9218 	ldr.w	r9, [pc, #536]	; 800a8a8 <_strtod_l+0x588>
 800a690:	e687      	b.n	800a3a2 <_strtod_l+0x82>
 800a692:	4886      	ldr	r0, [pc, #536]	; (800a8ac <_strtod_l+0x58c>)
 800a694:	f003 fc84 	bl	800dfa0 <nan>
 800a698:	4680      	mov	r8, r0
 800a69a:	4689      	mov	r9, r1
 800a69c:	e681      	b.n	800a3a2 <_strtod_l+0x82>
 800a69e:	9b04      	ldr	r3, [sp, #16]
 800a6a0:	f1bb 0f00 	cmp.w	fp, #0
 800a6a4:	bf08      	it	eq
 800a6a6:	46a3      	moveq	fp, r4
 800a6a8:	1aeb      	subs	r3, r5, r3
 800a6aa:	2c10      	cmp	r4, #16
 800a6ac:	9806      	ldr	r0, [sp, #24]
 800a6ae:	4626      	mov	r6, r4
 800a6b0:	9307      	str	r3, [sp, #28]
 800a6b2:	bfa8      	it	ge
 800a6b4:	2610      	movge	r6, #16
 800a6b6:	f7f5 fe95 	bl	80003e4 <__aeabi_ui2d>
 800a6ba:	2c09      	cmp	r4, #9
 800a6bc:	4680      	mov	r8, r0
 800a6be:	4689      	mov	r9, r1
 800a6c0:	dd13      	ble.n	800a6ea <_strtod_l+0x3ca>
 800a6c2:	4b7b      	ldr	r3, [pc, #492]	; (800a8b0 <_strtod_l+0x590>)
 800a6c4:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a6c8:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a6cc:	f7f5 ff04 	bl	80004d8 <__aeabi_dmul>
 800a6d0:	4680      	mov	r8, r0
 800a6d2:	9805      	ldr	r0, [sp, #20]
 800a6d4:	4689      	mov	r9, r1
 800a6d6:	f7f5 fe85 	bl	80003e4 <__aeabi_ui2d>
 800a6da:	4602      	mov	r2, r0
 800a6dc:	460b      	mov	r3, r1
 800a6de:	4640      	mov	r0, r8
 800a6e0:	4649      	mov	r1, r9
 800a6e2:	f7f5 fd43 	bl	800016c <__adddf3>
 800a6e6:	4680      	mov	r8, r0
 800a6e8:	4689      	mov	r9, r1
 800a6ea:	2c0f      	cmp	r4, #15
 800a6ec:	dc36      	bgt.n	800a75c <_strtod_l+0x43c>
 800a6ee:	9b07      	ldr	r3, [sp, #28]
 800a6f0:	2b00      	cmp	r3, #0
 800a6f2:	f43f ae56 	beq.w	800a3a2 <_strtod_l+0x82>
 800a6f6:	dd22      	ble.n	800a73e <_strtod_l+0x41e>
 800a6f8:	2b16      	cmp	r3, #22
 800a6fa:	dc09      	bgt.n	800a710 <_strtod_l+0x3f0>
 800a6fc:	496c      	ldr	r1, [pc, #432]	; (800a8b0 <_strtod_l+0x590>)
 800a6fe:	4642      	mov	r2, r8
 800a700:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a704:	464b      	mov	r3, r9
 800a706:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a70a:	f7f5 fee5 	bl	80004d8 <__aeabi_dmul>
 800a70e:	e7c3      	b.n	800a698 <_strtod_l+0x378>
 800a710:	9a07      	ldr	r2, [sp, #28]
 800a712:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800a716:	4293      	cmp	r3, r2
 800a718:	db20      	blt.n	800a75c <_strtod_l+0x43c>
 800a71a:	4d65      	ldr	r5, [pc, #404]	; (800a8b0 <_strtod_l+0x590>)
 800a71c:	f1c4 040f 	rsb	r4, r4, #15
 800a720:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800a724:	4642      	mov	r2, r8
 800a726:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a72a:	464b      	mov	r3, r9
 800a72c:	f7f5 fed4 	bl	80004d8 <__aeabi_dmul>
 800a730:	9b07      	ldr	r3, [sp, #28]
 800a732:	1b1c      	subs	r4, r3, r4
 800a734:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800a738:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a73c:	e7e5      	b.n	800a70a <_strtod_l+0x3ea>
 800a73e:	9b07      	ldr	r3, [sp, #28]
 800a740:	3316      	adds	r3, #22
 800a742:	db0b      	blt.n	800a75c <_strtod_l+0x43c>
 800a744:	9b04      	ldr	r3, [sp, #16]
 800a746:	4640      	mov	r0, r8
 800a748:	1b5d      	subs	r5, r3, r5
 800a74a:	4b59      	ldr	r3, [pc, #356]	; (800a8b0 <_strtod_l+0x590>)
 800a74c:	4649      	mov	r1, r9
 800a74e:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a752:	e9d5 2300 	ldrd	r2, r3, [r5]
 800a756:	f7f5 ffe9 	bl	800072c <__aeabi_ddiv>
 800a75a:	e79d      	b.n	800a698 <_strtod_l+0x378>
 800a75c:	9b07      	ldr	r3, [sp, #28]
 800a75e:	1ba6      	subs	r6, r4, r6
 800a760:	441e      	add	r6, r3
 800a762:	2e00      	cmp	r6, #0
 800a764:	dd74      	ble.n	800a850 <_strtod_l+0x530>
 800a766:	f016 030f 	ands.w	r3, r6, #15
 800a76a:	d00a      	beq.n	800a782 <_strtod_l+0x462>
 800a76c:	4950      	ldr	r1, [pc, #320]	; (800a8b0 <_strtod_l+0x590>)
 800a76e:	4642      	mov	r2, r8
 800a770:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a774:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a778:	464b      	mov	r3, r9
 800a77a:	f7f5 fead 	bl	80004d8 <__aeabi_dmul>
 800a77e:	4680      	mov	r8, r0
 800a780:	4689      	mov	r9, r1
 800a782:	f036 060f 	bics.w	r6, r6, #15
 800a786:	d052      	beq.n	800a82e <_strtod_l+0x50e>
 800a788:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 800a78c:	dd27      	ble.n	800a7de <_strtod_l+0x4be>
 800a78e:	f04f 0b00 	mov.w	fp, #0
 800a792:	f8cd b010 	str.w	fp, [sp, #16]
 800a796:	f8cd b020 	str.w	fp, [sp, #32]
 800a79a:	f8cd b018 	str.w	fp, [sp, #24]
 800a79e:	2322      	movs	r3, #34	; 0x22
 800a7a0:	f04f 0800 	mov.w	r8, #0
 800a7a4:	f8df 9100 	ldr.w	r9, [pc, #256]	; 800a8a8 <_strtod_l+0x588>
 800a7a8:	f8ca 3000 	str.w	r3, [sl]
 800a7ac:	9b08      	ldr	r3, [sp, #32]
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	f43f adf7 	beq.w	800a3a2 <_strtod_l+0x82>
 800a7b4:	4650      	mov	r0, sl
 800a7b6:	991a      	ldr	r1, [sp, #104]	; 0x68
 800a7b8:	f002 f98e 	bl	800cad8 <_Bfree>
 800a7bc:	4650      	mov	r0, sl
 800a7be:	9906      	ldr	r1, [sp, #24]
 800a7c0:	f002 f98a 	bl	800cad8 <_Bfree>
 800a7c4:	4650      	mov	r0, sl
 800a7c6:	9904      	ldr	r1, [sp, #16]
 800a7c8:	f002 f986 	bl	800cad8 <_Bfree>
 800a7cc:	4650      	mov	r0, sl
 800a7ce:	9908      	ldr	r1, [sp, #32]
 800a7d0:	f002 f982 	bl	800cad8 <_Bfree>
 800a7d4:	4659      	mov	r1, fp
 800a7d6:	4650      	mov	r0, sl
 800a7d8:	f002 f97e 	bl	800cad8 <_Bfree>
 800a7dc:	e5e1      	b.n	800a3a2 <_strtod_l+0x82>
 800a7de:	4b35      	ldr	r3, [pc, #212]	; (800a8b4 <_strtod_l+0x594>)
 800a7e0:	4640      	mov	r0, r8
 800a7e2:	9305      	str	r3, [sp, #20]
 800a7e4:	2300      	movs	r3, #0
 800a7e6:	4649      	mov	r1, r9
 800a7e8:	461f      	mov	r7, r3
 800a7ea:	1136      	asrs	r6, r6, #4
 800a7ec:	2e01      	cmp	r6, #1
 800a7ee:	dc21      	bgt.n	800a834 <_strtod_l+0x514>
 800a7f0:	b10b      	cbz	r3, 800a7f6 <_strtod_l+0x4d6>
 800a7f2:	4680      	mov	r8, r0
 800a7f4:	4689      	mov	r9, r1
 800a7f6:	4b2f      	ldr	r3, [pc, #188]	; (800a8b4 <_strtod_l+0x594>)
 800a7f8:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800a7fc:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800a800:	4642      	mov	r2, r8
 800a802:	e9d7 0100 	ldrd	r0, r1, [r7]
 800a806:	464b      	mov	r3, r9
 800a808:	f7f5 fe66 	bl	80004d8 <__aeabi_dmul>
 800a80c:	4b26      	ldr	r3, [pc, #152]	; (800a8a8 <_strtod_l+0x588>)
 800a80e:	460a      	mov	r2, r1
 800a810:	400b      	ands	r3, r1
 800a812:	4929      	ldr	r1, [pc, #164]	; (800a8b8 <_strtod_l+0x598>)
 800a814:	4680      	mov	r8, r0
 800a816:	428b      	cmp	r3, r1
 800a818:	d8b9      	bhi.n	800a78e <_strtod_l+0x46e>
 800a81a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a81e:	428b      	cmp	r3, r1
 800a820:	bf86      	itte	hi
 800a822:	f04f 38ff 	movhi.w	r8, #4294967295
 800a826:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 800a8bc <_strtod_l+0x59c>
 800a82a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800a82e:	2300      	movs	r3, #0
 800a830:	9305      	str	r3, [sp, #20]
 800a832:	e07f      	b.n	800a934 <_strtod_l+0x614>
 800a834:	07f2      	lsls	r2, r6, #31
 800a836:	d505      	bpl.n	800a844 <_strtod_l+0x524>
 800a838:	9b05      	ldr	r3, [sp, #20]
 800a83a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a83e:	f7f5 fe4b 	bl	80004d8 <__aeabi_dmul>
 800a842:	2301      	movs	r3, #1
 800a844:	9a05      	ldr	r2, [sp, #20]
 800a846:	3701      	adds	r7, #1
 800a848:	3208      	adds	r2, #8
 800a84a:	1076      	asrs	r6, r6, #1
 800a84c:	9205      	str	r2, [sp, #20]
 800a84e:	e7cd      	b.n	800a7ec <_strtod_l+0x4cc>
 800a850:	d0ed      	beq.n	800a82e <_strtod_l+0x50e>
 800a852:	4276      	negs	r6, r6
 800a854:	f016 020f 	ands.w	r2, r6, #15
 800a858:	d00a      	beq.n	800a870 <_strtod_l+0x550>
 800a85a:	4b15      	ldr	r3, [pc, #84]	; (800a8b0 <_strtod_l+0x590>)
 800a85c:	4640      	mov	r0, r8
 800a85e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a862:	4649      	mov	r1, r9
 800a864:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a868:	f7f5 ff60 	bl	800072c <__aeabi_ddiv>
 800a86c:	4680      	mov	r8, r0
 800a86e:	4689      	mov	r9, r1
 800a870:	1136      	asrs	r6, r6, #4
 800a872:	d0dc      	beq.n	800a82e <_strtod_l+0x50e>
 800a874:	2e1f      	cmp	r6, #31
 800a876:	dd23      	ble.n	800a8c0 <_strtod_l+0x5a0>
 800a878:	f04f 0b00 	mov.w	fp, #0
 800a87c:	f8cd b010 	str.w	fp, [sp, #16]
 800a880:	f8cd b020 	str.w	fp, [sp, #32]
 800a884:	f8cd b018 	str.w	fp, [sp, #24]
 800a888:	2322      	movs	r3, #34	; 0x22
 800a88a:	f04f 0800 	mov.w	r8, #0
 800a88e:	f04f 0900 	mov.w	r9, #0
 800a892:	f8ca 3000 	str.w	r3, [sl]
 800a896:	e789      	b.n	800a7ac <_strtod_l+0x48c>
 800a898:	0800f885 	.word	0x0800f885
 800a89c:	0800f8c4 	.word	0x0800f8c4
 800a8a0:	0800f87d 	.word	0x0800f87d
 800a8a4:	0800fa04 	.word	0x0800fa04
 800a8a8:	7ff00000 	.word	0x7ff00000
 800a8ac:	0800fd33 	.word	0x0800fd33
 800a8b0:	0800fbf8 	.word	0x0800fbf8
 800a8b4:	0800fbd0 	.word	0x0800fbd0
 800a8b8:	7ca00000 	.word	0x7ca00000
 800a8bc:	7fefffff 	.word	0x7fefffff
 800a8c0:	f016 0310 	ands.w	r3, r6, #16
 800a8c4:	bf18      	it	ne
 800a8c6:	236a      	movne	r3, #106	; 0x6a
 800a8c8:	4640      	mov	r0, r8
 800a8ca:	9305      	str	r3, [sp, #20]
 800a8cc:	4649      	mov	r1, r9
 800a8ce:	2300      	movs	r3, #0
 800a8d0:	4fb0      	ldr	r7, [pc, #704]	; (800ab94 <_strtod_l+0x874>)
 800a8d2:	07f2      	lsls	r2, r6, #31
 800a8d4:	d504      	bpl.n	800a8e0 <_strtod_l+0x5c0>
 800a8d6:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a8da:	f7f5 fdfd 	bl	80004d8 <__aeabi_dmul>
 800a8de:	2301      	movs	r3, #1
 800a8e0:	1076      	asrs	r6, r6, #1
 800a8e2:	f107 0708 	add.w	r7, r7, #8
 800a8e6:	d1f4      	bne.n	800a8d2 <_strtod_l+0x5b2>
 800a8e8:	b10b      	cbz	r3, 800a8ee <_strtod_l+0x5ce>
 800a8ea:	4680      	mov	r8, r0
 800a8ec:	4689      	mov	r9, r1
 800a8ee:	9b05      	ldr	r3, [sp, #20]
 800a8f0:	b1c3      	cbz	r3, 800a924 <_strtod_l+0x604>
 800a8f2:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800a8f6:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	4649      	mov	r1, r9
 800a8fe:	dd11      	ble.n	800a924 <_strtod_l+0x604>
 800a900:	2b1f      	cmp	r3, #31
 800a902:	f340 8127 	ble.w	800ab54 <_strtod_l+0x834>
 800a906:	2b34      	cmp	r3, #52	; 0x34
 800a908:	bfd8      	it	le
 800a90a:	f04f 33ff 	movle.w	r3, #4294967295
 800a90e:	f04f 0800 	mov.w	r8, #0
 800a912:	bfcf      	iteee	gt
 800a914:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800a918:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a91c:	fa03 f202 	lslle.w	r2, r3, r2
 800a920:	ea02 0901 	andle.w	r9, r2, r1
 800a924:	2200      	movs	r2, #0
 800a926:	2300      	movs	r3, #0
 800a928:	4640      	mov	r0, r8
 800a92a:	4649      	mov	r1, r9
 800a92c:	f7f6 f83c 	bl	80009a8 <__aeabi_dcmpeq>
 800a930:	2800      	cmp	r0, #0
 800a932:	d1a1      	bne.n	800a878 <_strtod_l+0x558>
 800a934:	9b06      	ldr	r3, [sp, #24]
 800a936:	465a      	mov	r2, fp
 800a938:	9300      	str	r3, [sp, #0]
 800a93a:	4650      	mov	r0, sl
 800a93c:	4623      	mov	r3, r4
 800a93e:	9908      	ldr	r1, [sp, #32]
 800a940:	f002 f932 	bl	800cba8 <__s2b>
 800a944:	9008      	str	r0, [sp, #32]
 800a946:	2800      	cmp	r0, #0
 800a948:	f43f af21 	beq.w	800a78e <_strtod_l+0x46e>
 800a94c:	9b04      	ldr	r3, [sp, #16]
 800a94e:	f04f 0b00 	mov.w	fp, #0
 800a952:	1b5d      	subs	r5, r3, r5
 800a954:	9b07      	ldr	r3, [sp, #28]
 800a956:	f8cd b010 	str.w	fp, [sp, #16]
 800a95a:	2b00      	cmp	r3, #0
 800a95c:	bfb4      	ite	lt
 800a95e:	462b      	movlt	r3, r5
 800a960:	2300      	movge	r3, #0
 800a962:	930e      	str	r3, [sp, #56]	; 0x38
 800a964:	9b07      	ldr	r3, [sp, #28]
 800a966:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a96a:	9314      	str	r3, [sp, #80]	; 0x50
 800a96c:	9b08      	ldr	r3, [sp, #32]
 800a96e:	4650      	mov	r0, sl
 800a970:	6859      	ldr	r1, [r3, #4]
 800a972:	f002 f871 	bl	800ca58 <_Balloc>
 800a976:	9006      	str	r0, [sp, #24]
 800a978:	2800      	cmp	r0, #0
 800a97a:	f43f af10 	beq.w	800a79e <_strtod_l+0x47e>
 800a97e:	9b08      	ldr	r3, [sp, #32]
 800a980:	300c      	adds	r0, #12
 800a982:	691a      	ldr	r2, [r3, #16]
 800a984:	f103 010c 	add.w	r1, r3, #12
 800a988:	3202      	adds	r2, #2
 800a98a:	0092      	lsls	r2, r2, #2
 800a98c:	f7fe fbe4 	bl	8009158 <memcpy>
 800a990:	ab1c      	add	r3, sp, #112	; 0x70
 800a992:	9301      	str	r3, [sp, #4]
 800a994:	ab1b      	add	r3, sp, #108	; 0x6c
 800a996:	9300      	str	r3, [sp, #0]
 800a998:	4642      	mov	r2, r8
 800a99a:	464b      	mov	r3, r9
 800a99c:	4650      	mov	r0, sl
 800a99e:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800a9a2:	f002 fc43 	bl	800d22c <__d2b>
 800a9a6:	901a      	str	r0, [sp, #104]	; 0x68
 800a9a8:	2800      	cmp	r0, #0
 800a9aa:	f43f aef8 	beq.w	800a79e <_strtod_l+0x47e>
 800a9ae:	2101      	movs	r1, #1
 800a9b0:	4650      	mov	r0, sl
 800a9b2:	f002 f991 	bl	800ccd8 <__i2b>
 800a9b6:	4603      	mov	r3, r0
 800a9b8:	9004      	str	r0, [sp, #16]
 800a9ba:	2800      	cmp	r0, #0
 800a9bc:	f43f aeef 	beq.w	800a79e <_strtod_l+0x47e>
 800a9c0:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800a9c2:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800a9c4:	2d00      	cmp	r5, #0
 800a9c6:	bfab      	itete	ge
 800a9c8:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800a9ca:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 800a9cc:	18ee      	addge	r6, r5, r3
 800a9ce:	1b5c      	sublt	r4, r3, r5
 800a9d0:	9b05      	ldr	r3, [sp, #20]
 800a9d2:	bfa8      	it	ge
 800a9d4:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 800a9d6:	eba5 0503 	sub.w	r5, r5, r3
 800a9da:	4415      	add	r5, r2
 800a9dc:	4b6e      	ldr	r3, [pc, #440]	; (800ab98 <_strtod_l+0x878>)
 800a9de:	f105 35ff 	add.w	r5, r5, #4294967295
 800a9e2:	bfb8      	it	lt
 800a9e4:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 800a9e6:	429d      	cmp	r5, r3
 800a9e8:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a9ec:	f280 80c4 	bge.w	800ab78 <_strtod_l+0x858>
 800a9f0:	1b5b      	subs	r3, r3, r5
 800a9f2:	2b1f      	cmp	r3, #31
 800a9f4:	f04f 0701 	mov.w	r7, #1
 800a9f8:	eba2 0203 	sub.w	r2, r2, r3
 800a9fc:	f300 80b1 	bgt.w	800ab62 <_strtod_l+0x842>
 800aa00:	2500      	movs	r5, #0
 800aa02:	fa07 f303 	lsl.w	r3, r7, r3
 800aa06:	930f      	str	r3, [sp, #60]	; 0x3c
 800aa08:	18b7      	adds	r7, r6, r2
 800aa0a:	9b05      	ldr	r3, [sp, #20]
 800aa0c:	42be      	cmp	r6, r7
 800aa0e:	4414      	add	r4, r2
 800aa10:	441c      	add	r4, r3
 800aa12:	4633      	mov	r3, r6
 800aa14:	bfa8      	it	ge
 800aa16:	463b      	movge	r3, r7
 800aa18:	42a3      	cmp	r3, r4
 800aa1a:	bfa8      	it	ge
 800aa1c:	4623      	movge	r3, r4
 800aa1e:	2b00      	cmp	r3, #0
 800aa20:	bfc2      	ittt	gt
 800aa22:	1aff      	subgt	r7, r7, r3
 800aa24:	1ae4      	subgt	r4, r4, r3
 800aa26:	1af6      	subgt	r6, r6, r3
 800aa28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800aa2a:	2b00      	cmp	r3, #0
 800aa2c:	dd17      	ble.n	800aa5e <_strtod_l+0x73e>
 800aa2e:	461a      	mov	r2, r3
 800aa30:	4650      	mov	r0, sl
 800aa32:	9904      	ldr	r1, [sp, #16]
 800aa34:	f002 fa0e 	bl	800ce54 <__pow5mult>
 800aa38:	9004      	str	r0, [sp, #16]
 800aa3a:	2800      	cmp	r0, #0
 800aa3c:	f43f aeaf 	beq.w	800a79e <_strtod_l+0x47e>
 800aa40:	4601      	mov	r1, r0
 800aa42:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800aa44:	4650      	mov	r0, sl
 800aa46:	f002 f95d 	bl	800cd04 <__multiply>
 800aa4a:	9009      	str	r0, [sp, #36]	; 0x24
 800aa4c:	2800      	cmp	r0, #0
 800aa4e:	f43f aea6 	beq.w	800a79e <_strtod_l+0x47e>
 800aa52:	4650      	mov	r0, sl
 800aa54:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aa56:	f002 f83f 	bl	800cad8 <_Bfree>
 800aa5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa5c:	931a      	str	r3, [sp, #104]	; 0x68
 800aa5e:	2f00      	cmp	r7, #0
 800aa60:	f300 808e 	bgt.w	800ab80 <_strtod_l+0x860>
 800aa64:	9b07      	ldr	r3, [sp, #28]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	dd08      	ble.n	800aa7c <_strtod_l+0x75c>
 800aa6a:	4650      	mov	r0, sl
 800aa6c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800aa6e:	9906      	ldr	r1, [sp, #24]
 800aa70:	f002 f9f0 	bl	800ce54 <__pow5mult>
 800aa74:	9006      	str	r0, [sp, #24]
 800aa76:	2800      	cmp	r0, #0
 800aa78:	f43f ae91 	beq.w	800a79e <_strtod_l+0x47e>
 800aa7c:	2c00      	cmp	r4, #0
 800aa7e:	dd08      	ble.n	800aa92 <_strtod_l+0x772>
 800aa80:	4622      	mov	r2, r4
 800aa82:	4650      	mov	r0, sl
 800aa84:	9906      	ldr	r1, [sp, #24]
 800aa86:	f002 fa3f 	bl	800cf08 <__lshift>
 800aa8a:	9006      	str	r0, [sp, #24]
 800aa8c:	2800      	cmp	r0, #0
 800aa8e:	f43f ae86 	beq.w	800a79e <_strtod_l+0x47e>
 800aa92:	2e00      	cmp	r6, #0
 800aa94:	dd08      	ble.n	800aaa8 <_strtod_l+0x788>
 800aa96:	4632      	mov	r2, r6
 800aa98:	4650      	mov	r0, sl
 800aa9a:	9904      	ldr	r1, [sp, #16]
 800aa9c:	f002 fa34 	bl	800cf08 <__lshift>
 800aaa0:	9004      	str	r0, [sp, #16]
 800aaa2:	2800      	cmp	r0, #0
 800aaa4:	f43f ae7b 	beq.w	800a79e <_strtod_l+0x47e>
 800aaa8:	4650      	mov	r0, sl
 800aaaa:	9a06      	ldr	r2, [sp, #24]
 800aaac:	991a      	ldr	r1, [sp, #104]	; 0x68
 800aaae:	f002 fab7 	bl	800d020 <__mdiff>
 800aab2:	4683      	mov	fp, r0
 800aab4:	2800      	cmp	r0, #0
 800aab6:	f43f ae72 	beq.w	800a79e <_strtod_l+0x47e>
 800aaba:	2400      	movs	r4, #0
 800aabc:	68c3      	ldr	r3, [r0, #12]
 800aabe:	9904      	ldr	r1, [sp, #16]
 800aac0:	60c4      	str	r4, [r0, #12]
 800aac2:	930b      	str	r3, [sp, #44]	; 0x2c
 800aac4:	f002 fa90 	bl	800cfe8 <__mcmp>
 800aac8:	42a0      	cmp	r0, r4
 800aaca:	da6b      	bge.n	800aba4 <_strtod_l+0x884>
 800aacc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aace:	ea53 0308 	orrs.w	r3, r3, r8
 800aad2:	f040 8091 	bne.w	800abf8 <_strtod_l+0x8d8>
 800aad6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aada:	2b00      	cmp	r3, #0
 800aadc:	f040 808c 	bne.w	800abf8 <_strtod_l+0x8d8>
 800aae0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800aae4:	0d1b      	lsrs	r3, r3, #20
 800aae6:	051b      	lsls	r3, r3, #20
 800aae8:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800aaec:	f240 8084 	bls.w	800abf8 <_strtod_l+0x8d8>
 800aaf0:	f8db 3014 	ldr.w	r3, [fp, #20]
 800aaf4:	b91b      	cbnz	r3, 800aafe <_strtod_l+0x7de>
 800aaf6:	f8db 3010 	ldr.w	r3, [fp, #16]
 800aafa:	2b01      	cmp	r3, #1
 800aafc:	dd7c      	ble.n	800abf8 <_strtod_l+0x8d8>
 800aafe:	4659      	mov	r1, fp
 800ab00:	2201      	movs	r2, #1
 800ab02:	4650      	mov	r0, sl
 800ab04:	f002 fa00 	bl	800cf08 <__lshift>
 800ab08:	9904      	ldr	r1, [sp, #16]
 800ab0a:	4683      	mov	fp, r0
 800ab0c:	f002 fa6c 	bl	800cfe8 <__mcmp>
 800ab10:	2800      	cmp	r0, #0
 800ab12:	dd71      	ble.n	800abf8 <_strtod_l+0x8d8>
 800ab14:	9905      	ldr	r1, [sp, #20]
 800ab16:	464b      	mov	r3, r9
 800ab18:	4a20      	ldr	r2, [pc, #128]	; (800ab9c <_strtod_l+0x87c>)
 800ab1a:	2900      	cmp	r1, #0
 800ab1c:	f000 808c 	beq.w	800ac38 <_strtod_l+0x918>
 800ab20:	ea02 0109 	and.w	r1, r2, r9
 800ab24:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ab28:	f300 8086 	bgt.w	800ac38 <_strtod_l+0x918>
 800ab2c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ab30:	f77f aeaa 	ble.w	800a888 <_strtod_l+0x568>
 800ab34:	4640      	mov	r0, r8
 800ab36:	4649      	mov	r1, r9
 800ab38:	4b19      	ldr	r3, [pc, #100]	; (800aba0 <_strtod_l+0x880>)
 800ab3a:	2200      	movs	r2, #0
 800ab3c:	f7f5 fccc 	bl	80004d8 <__aeabi_dmul>
 800ab40:	460b      	mov	r3, r1
 800ab42:	4303      	orrs	r3, r0
 800ab44:	bf08      	it	eq
 800ab46:	2322      	moveq	r3, #34	; 0x22
 800ab48:	4680      	mov	r8, r0
 800ab4a:	4689      	mov	r9, r1
 800ab4c:	bf08      	it	eq
 800ab4e:	f8ca 3000 	streq.w	r3, [sl]
 800ab52:	e62f      	b.n	800a7b4 <_strtod_l+0x494>
 800ab54:	f04f 32ff 	mov.w	r2, #4294967295
 800ab58:	fa02 f303 	lsl.w	r3, r2, r3
 800ab5c:	ea03 0808 	and.w	r8, r3, r8
 800ab60:	e6e0      	b.n	800a924 <_strtod_l+0x604>
 800ab62:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 800ab66:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 800ab6a:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 800ab6e:	35e2      	adds	r5, #226	; 0xe2
 800ab70:	fa07 f505 	lsl.w	r5, r7, r5
 800ab74:	970f      	str	r7, [sp, #60]	; 0x3c
 800ab76:	e747      	b.n	800aa08 <_strtod_l+0x6e8>
 800ab78:	2301      	movs	r3, #1
 800ab7a:	2500      	movs	r5, #0
 800ab7c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab7e:	e743      	b.n	800aa08 <_strtod_l+0x6e8>
 800ab80:	463a      	mov	r2, r7
 800ab82:	4650      	mov	r0, sl
 800ab84:	991a      	ldr	r1, [sp, #104]	; 0x68
 800ab86:	f002 f9bf 	bl	800cf08 <__lshift>
 800ab8a:	901a      	str	r0, [sp, #104]	; 0x68
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	f47f af69 	bne.w	800aa64 <_strtod_l+0x744>
 800ab92:	e604      	b.n	800a79e <_strtod_l+0x47e>
 800ab94:	0800f8d8 	.word	0x0800f8d8
 800ab98:	fffffc02 	.word	0xfffffc02
 800ab9c:	7ff00000 	.word	0x7ff00000
 800aba0:	39500000 	.word	0x39500000
 800aba4:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 800aba8:	d165      	bne.n	800ac76 <_strtod_l+0x956>
 800abaa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800abac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800abb0:	b35a      	cbz	r2, 800ac0a <_strtod_l+0x8ea>
 800abb2:	4a99      	ldr	r2, [pc, #612]	; (800ae18 <_strtod_l+0xaf8>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d12b      	bne.n	800ac10 <_strtod_l+0x8f0>
 800abb8:	9b05      	ldr	r3, [sp, #20]
 800abba:	4641      	mov	r1, r8
 800abbc:	b303      	cbz	r3, 800ac00 <_strtod_l+0x8e0>
 800abbe:	464a      	mov	r2, r9
 800abc0:	4b96      	ldr	r3, [pc, #600]	; (800ae1c <_strtod_l+0xafc>)
 800abc2:	4013      	ands	r3, r2
 800abc4:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800abc8:	f04f 32ff 	mov.w	r2, #4294967295
 800abcc:	d81b      	bhi.n	800ac06 <_strtod_l+0x8e6>
 800abce:	0d1b      	lsrs	r3, r3, #20
 800abd0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800abd4:	fa02 f303 	lsl.w	r3, r2, r3
 800abd8:	4299      	cmp	r1, r3
 800abda:	d119      	bne.n	800ac10 <_strtod_l+0x8f0>
 800abdc:	4b90      	ldr	r3, [pc, #576]	; (800ae20 <_strtod_l+0xb00>)
 800abde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abe0:	429a      	cmp	r2, r3
 800abe2:	d102      	bne.n	800abea <_strtod_l+0x8ca>
 800abe4:	3101      	adds	r1, #1
 800abe6:	f43f adda 	beq.w	800a79e <_strtod_l+0x47e>
 800abea:	f04f 0800 	mov.w	r8, #0
 800abee:	4b8b      	ldr	r3, [pc, #556]	; (800ae1c <_strtod_l+0xafc>)
 800abf0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800abf2:	401a      	ands	r2, r3
 800abf4:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 800abf8:	9b05      	ldr	r3, [sp, #20]
 800abfa:	2b00      	cmp	r3, #0
 800abfc:	d19a      	bne.n	800ab34 <_strtod_l+0x814>
 800abfe:	e5d9      	b.n	800a7b4 <_strtod_l+0x494>
 800ac00:	f04f 33ff 	mov.w	r3, #4294967295
 800ac04:	e7e8      	b.n	800abd8 <_strtod_l+0x8b8>
 800ac06:	4613      	mov	r3, r2
 800ac08:	e7e6      	b.n	800abd8 <_strtod_l+0x8b8>
 800ac0a:	ea53 0308 	orrs.w	r3, r3, r8
 800ac0e:	d081      	beq.n	800ab14 <_strtod_l+0x7f4>
 800ac10:	b1e5      	cbz	r5, 800ac4c <_strtod_l+0x92c>
 800ac12:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac14:	421d      	tst	r5, r3
 800ac16:	d0ef      	beq.n	800abf8 <_strtod_l+0x8d8>
 800ac18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac1a:	4640      	mov	r0, r8
 800ac1c:	4649      	mov	r1, r9
 800ac1e:	9a05      	ldr	r2, [sp, #20]
 800ac20:	b1c3      	cbz	r3, 800ac54 <_strtod_l+0x934>
 800ac22:	f7ff fb5c 	bl	800a2de <sulp>
 800ac26:	4602      	mov	r2, r0
 800ac28:	460b      	mov	r3, r1
 800ac2a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac2e:	f7f5 fa9d 	bl	800016c <__adddf3>
 800ac32:	4680      	mov	r8, r0
 800ac34:	4689      	mov	r9, r1
 800ac36:	e7df      	b.n	800abf8 <_strtod_l+0x8d8>
 800ac38:	4013      	ands	r3, r2
 800ac3a:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ac3e:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800ac42:	f04f 38ff 	mov.w	r8, #4294967295
 800ac46:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800ac4a:	e7d5      	b.n	800abf8 <_strtod_l+0x8d8>
 800ac4c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ac4e:	ea13 0f08 	tst.w	r3, r8
 800ac52:	e7e0      	b.n	800ac16 <_strtod_l+0x8f6>
 800ac54:	f7ff fb43 	bl	800a2de <sulp>
 800ac58:	4602      	mov	r2, r0
 800ac5a:	460b      	mov	r3, r1
 800ac5c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ac60:	f7f5 fa82 	bl	8000168 <__aeabi_dsub>
 800ac64:	2200      	movs	r2, #0
 800ac66:	2300      	movs	r3, #0
 800ac68:	4680      	mov	r8, r0
 800ac6a:	4689      	mov	r9, r1
 800ac6c:	f7f5 fe9c 	bl	80009a8 <__aeabi_dcmpeq>
 800ac70:	2800      	cmp	r0, #0
 800ac72:	d0c1      	beq.n	800abf8 <_strtod_l+0x8d8>
 800ac74:	e608      	b.n	800a888 <_strtod_l+0x568>
 800ac76:	4658      	mov	r0, fp
 800ac78:	9904      	ldr	r1, [sp, #16]
 800ac7a:	f002 fb33 	bl	800d2e4 <__ratio>
 800ac7e:	2200      	movs	r2, #0
 800ac80:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ac84:	4606      	mov	r6, r0
 800ac86:	460f      	mov	r7, r1
 800ac88:	f7f5 fea2 	bl	80009d0 <__aeabi_dcmple>
 800ac8c:	2800      	cmp	r0, #0
 800ac8e:	d070      	beq.n	800ad72 <_strtod_l+0xa52>
 800ac90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac92:	2b00      	cmp	r3, #0
 800ac94:	d042      	beq.n	800ad1c <_strtod_l+0x9fc>
 800ac96:	2600      	movs	r6, #0
 800ac98:	4f62      	ldr	r7, [pc, #392]	; (800ae24 <_strtod_l+0xb04>)
 800ac9a:	4d62      	ldr	r5, [pc, #392]	; (800ae24 <_strtod_l+0xb04>)
 800ac9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac9e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aca2:	0d1b      	lsrs	r3, r3, #20
 800aca4:	051b      	lsls	r3, r3, #20
 800aca6:	930f      	str	r3, [sp, #60]	; 0x3c
 800aca8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800acaa:	4b5f      	ldr	r3, [pc, #380]	; (800ae28 <_strtod_l+0xb08>)
 800acac:	429a      	cmp	r2, r3
 800acae:	f040 80c3 	bne.w	800ae38 <_strtod_l+0xb18>
 800acb2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acb4:	4640      	mov	r0, r8
 800acb6:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 800acba:	4649      	mov	r1, r9
 800acbc:	f002 fa3c 	bl	800d138 <__ulp>
 800acc0:	4602      	mov	r2, r0
 800acc2:	460b      	mov	r3, r1
 800acc4:	4630      	mov	r0, r6
 800acc6:	4639      	mov	r1, r7
 800acc8:	f7f5 fc06 	bl	80004d8 <__aeabi_dmul>
 800accc:	4642      	mov	r2, r8
 800acce:	464b      	mov	r3, r9
 800acd0:	f7f5 fa4c 	bl	800016c <__adddf3>
 800acd4:	460b      	mov	r3, r1
 800acd6:	4951      	ldr	r1, [pc, #324]	; (800ae1c <_strtod_l+0xafc>)
 800acd8:	4a54      	ldr	r2, [pc, #336]	; (800ae2c <_strtod_l+0xb0c>)
 800acda:	4019      	ands	r1, r3
 800acdc:	4291      	cmp	r1, r2
 800acde:	4680      	mov	r8, r0
 800ace0:	d95d      	bls.n	800ad9e <_strtod_l+0xa7e>
 800ace2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ace4:	4b4e      	ldr	r3, [pc, #312]	; (800ae20 <_strtod_l+0xb00>)
 800ace6:	429a      	cmp	r2, r3
 800ace8:	d103      	bne.n	800acf2 <_strtod_l+0x9d2>
 800acea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800acec:	3301      	adds	r3, #1
 800acee:	f43f ad56 	beq.w	800a79e <_strtod_l+0x47e>
 800acf2:	f04f 38ff 	mov.w	r8, #4294967295
 800acf6:	f8df 9128 	ldr.w	r9, [pc, #296]	; 800ae20 <_strtod_l+0xb00>
 800acfa:	4650      	mov	r0, sl
 800acfc:	991a      	ldr	r1, [sp, #104]	; 0x68
 800acfe:	f001 feeb 	bl	800cad8 <_Bfree>
 800ad02:	4650      	mov	r0, sl
 800ad04:	9906      	ldr	r1, [sp, #24]
 800ad06:	f001 fee7 	bl	800cad8 <_Bfree>
 800ad0a:	4650      	mov	r0, sl
 800ad0c:	9904      	ldr	r1, [sp, #16]
 800ad0e:	f001 fee3 	bl	800cad8 <_Bfree>
 800ad12:	4659      	mov	r1, fp
 800ad14:	4650      	mov	r0, sl
 800ad16:	f001 fedf 	bl	800cad8 <_Bfree>
 800ad1a:	e627      	b.n	800a96c <_strtod_l+0x64c>
 800ad1c:	f1b8 0f00 	cmp.w	r8, #0
 800ad20:	d119      	bne.n	800ad56 <_strtod_l+0xa36>
 800ad22:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad24:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad28:	b9e3      	cbnz	r3, 800ad64 <_strtod_l+0xa44>
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	4639      	mov	r1, r7
 800ad30:	4b3c      	ldr	r3, [pc, #240]	; (800ae24 <_strtod_l+0xb04>)
 800ad32:	f7f5 fe43 	bl	80009bc <__aeabi_dcmplt>
 800ad36:	b9c8      	cbnz	r0, 800ad6c <_strtod_l+0xa4c>
 800ad38:	2200      	movs	r2, #0
 800ad3a:	4630      	mov	r0, r6
 800ad3c:	4639      	mov	r1, r7
 800ad3e:	4b3c      	ldr	r3, [pc, #240]	; (800ae30 <_strtod_l+0xb10>)
 800ad40:	f7f5 fbca 	bl	80004d8 <__aeabi_dmul>
 800ad44:	4604      	mov	r4, r0
 800ad46:	460d      	mov	r5, r1
 800ad48:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800ad4c:	9416      	str	r4, [sp, #88]	; 0x58
 800ad4e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ad50:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 800ad54:	e7a2      	b.n	800ac9c <_strtod_l+0x97c>
 800ad56:	f1b8 0f01 	cmp.w	r8, #1
 800ad5a:	d103      	bne.n	800ad64 <_strtod_l+0xa44>
 800ad5c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	f43f ad92 	beq.w	800a888 <_strtod_l+0x568>
 800ad64:	2600      	movs	r6, #0
 800ad66:	2400      	movs	r4, #0
 800ad68:	4f32      	ldr	r7, [pc, #200]	; (800ae34 <_strtod_l+0xb14>)
 800ad6a:	e796      	b.n	800ac9a <_strtod_l+0x97a>
 800ad6c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800ad6e:	4d30      	ldr	r5, [pc, #192]	; (800ae30 <_strtod_l+0xb10>)
 800ad70:	e7ea      	b.n	800ad48 <_strtod_l+0xa28>
 800ad72:	4b2f      	ldr	r3, [pc, #188]	; (800ae30 <_strtod_l+0xb10>)
 800ad74:	2200      	movs	r2, #0
 800ad76:	4630      	mov	r0, r6
 800ad78:	4639      	mov	r1, r7
 800ad7a:	f7f5 fbad 	bl	80004d8 <__aeabi_dmul>
 800ad7e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ad80:	4604      	mov	r4, r0
 800ad82:	460d      	mov	r5, r1
 800ad84:	b933      	cbnz	r3, 800ad94 <_strtod_l+0xa74>
 800ad86:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ad8a:	9010      	str	r0, [sp, #64]	; 0x40
 800ad8c:	9311      	str	r3, [sp, #68]	; 0x44
 800ad8e:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800ad92:	e783      	b.n	800ac9c <_strtod_l+0x97c>
 800ad94:	4602      	mov	r2, r0
 800ad96:	460b      	mov	r3, r1
 800ad98:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 800ad9c:	e7f7      	b.n	800ad8e <_strtod_l+0xa6e>
 800ad9e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800ada2:	9b05      	ldr	r3, [sp, #20]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d1a8      	bne.n	800acfa <_strtod_l+0x9da>
 800ada8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800adac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800adae:	0d1b      	lsrs	r3, r3, #20
 800adb0:	051b      	lsls	r3, r3, #20
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d1a1      	bne.n	800acfa <_strtod_l+0x9da>
 800adb6:	4620      	mov	r0, r4
 800adb8:	4629      	mov	r1, r5
 800adba:	f7f6 f9a9 	bl	8001110 <__aeabi_d2lz>
 800adbe:	f7f5 fb5d 	bl	800047c <__aeabi_l2d>
 800adc2:	4602      	mov	r2, r0
 800adc4:	460b      	mov	r3, r1
 800adc6:	4620      	mov	r0, r4
 800adc8:	4629      	mov	r1, r5
 800adca:	f7f5 f9cd 	bl	8000168 <__aeabi_dsub>
 800adce:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800add0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800add4:	ea43 0308 	orr.w	r3, r3, r8
 800add8:	4313      	orrs	r3, r2
 800adda:	4604      	mov	r4, r0
 800addc:	460d      	mov	r5, r1
 800adde:	d066      	beq.n	800aeae <_strtod_l+0xb8e>
 800ade0:	a309      	add	r3, pc, #36	; (adr r3, 800ae08 <_strtod_l+0xae8>)
 800ade2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ade6:	f7f5 fde9 	bl	80009bc <__aeabi_dcmplt>
 800adea:	2800      	cmp	r0, #0
 800adec:	f47f ace2 	bne.w	800a7b4 <_strtod_l+0x494>
 800adf0:	a307      	add	r3, pc, #28	; (adr r3, 800ae10 <_strtod_l+0xaf0>)
 800adf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf6:	4620      	mov	r0, r4
 800adf8:	4629      	mov	r1, r5
 800adfa:	f7f5 fdfd 	bl	80009f8 <__aeabi_dcmpgt>
 800adfe:	2800      	cmp	r0, #0
 800ae00:	f43f af7b 	beq.w	800acfa <_strtod_l+0x9da>
 800ae04:	e4d6      	b.n	800a7b4 <_strtod_l+0x494>
 800ae06:	bf00      	nop
 800ae08:	94a03595 	.word	0x94a03595
 800ae0c:	3fdfffff 	.word	0x3fdfffff
 800ae10:	35afe535 	.word	0x35afe535
 800ae14:	3fe00000 	.word	0x3fe00000
 800ae18:	000fffff 	.word	0x000fffff
 800ae1c:	7ff00000 	.word	0x7ff00000
 800ae20:	7fefffff 	.word	0x7fefffff
 800ae24:	3ff00000 	.word	0x3ff00000
 800ae28:	7fe00000 	.word	0x7fe00000
 800ae2c:	7c9fffff 	.word	0x7c9fffff
 800ae30:	3fe00000 	.word	0x3fe00000
 800ae34:	bff00000 	.word	0xbff00000
 800ae38:	9b05      	ldr	r3, [sp, #20]
 800ae3a:	b313      	cbz	r3, 800ae82 <_strtod_l+0xb62>
 800ae3c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ae3e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800ae42:	d81e      	bhi.n	800ae82 <_strtod_l+0xb62>
 800ae44:	a326      	add	r3, pc, #152	; (adr r3, 800aee0 <_strtod_l+0xbc0>)
 800ae46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4a:	4620      	mov	r0, r4
 800ae4c:	4629      	mov	r1, r5
 800ae4e:	f7f5 fdbf 	bl	80009d0 <__aeabi_dcmple>
 800ae52:	b190      	cbz	r0, 800ae7a <_strtod_l+0xb5a>
 800ae54:	4629      	mov	r1, r5
 800ae56:	4620      	mov	r0, r4
 800ae58:	f7f5 fe16 	bl	8000a88 <__aeabi_d2uiz>
 800ae5c:	2801      	cmp	r0, #1
 800ae5e:	bf38      	it	cc
 800ae60:	2001      	movcc	r0, #1
 800ae62:	f7f5 fabf 	bl	80003e4 <__aeabi_ui2d>
 800ae66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ae68:	4604      	mov	r4, r0
 800ae6a:	460d      	mov	r5, r1
 800ae6c:	b9d3      	cbnz	r3, 800aea4 <_strtod_l+0xb84>
 800ae6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ae72:	9012      	str	r0, [sp, #72]	; 0x48
 800ae74:	9313      	str	r3, [sp, #76]	; 0x4c
 800ae76:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 800ae7a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ae7c:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 800ae80:	1a9f      	subs	r7, r3, r2
 800ae82:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800ae86:	f002 f957 	bl	800d138 <__ulp>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	4630      	mov	r0, r6
 800ae90:	4639      	mov	r1, r7
 800ae92:	f7f5 fb21 	bl	80004d8 <__aeabi_dmul>
 800ae96:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800ae9a:	f7f5 f967 	bl	800016c <__adddf3>
 800ae9e:	4680      	mov	r8, r0
 800aea0:	4689      	mov	r9, r1
 800aea2:	e77e      	b.n	800ada2 <_strtod_l+0xa82>
 800aea4:	4602      	mov	r2, r0
 800aea6:	460b      	mov	r3, r1
 800aea8:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 800aeac:	e7e3      	b.n	800ae76 <_strtod_l+0xb56>
 800aeae:	a30e      	add	r3, pc, #56	; (adr r3, 800aee8 <_strtod_l+0xbc8>)
 800aeb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeb4:	f7f5 fd82 	bl	80009bc <__aeabi_dcmplt>
 800aeb8:	e7a1      	b.n	800adfe <_strtod_l+0xade>
 800aeba:	2300      	movs	r3, #0
 800aebc:	930a      	str	r3, [sp, #40]	; 0x28
 800aebe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800aec0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aec2:	6013      	str	r3, [r2, #0]
 800aec4:	f7ff ba71 	b.w	800a3aa <_strtod_l+0x8a>
 800aec8:	2a65      	cmp	r2, #101	; 0x65
 800aeca:	f43f ab63 	beq.w	800a594 <_strtod_l+0x274>
 800aece:	2a45      	cmp	r2, #69	; 0x45
 800aed0:	f43f ab60 	beq.w	800a594 <_strtod_l+0x274>
 800aed4:	2301      	movs	r3, #1
 800aed6:	f7ff bb95 	b.w	800a604 <_strtod_l+0x2e4>
 800aeda:	bf00      	nop
 800aedc:	f3af 8000 	nop.w
 800aee0:	ffc00000 	.word	0xffc00000
 800aee4:	41dfffff 	.word	0x41dfffff
 800aee8:	94a03595 	.word	0x94a03595
 800aeec:	3fcfffff 	.word	0x3fcfffff

0800aef0 <_strtod_r>:
 800aef0:	4b01      	ldr	r3, [pc, #4]	; (800aef8 <_strtod_r+0x8>)
 800aef2:	f7ff ba15 	b.w	800a320 <_strtod_l>
 800aef6:	bf00      	nop
 800aef8:	20000094 	.word	0x20000094

0800aefc <strtod>:
 800aefc:	460a      	mov	r2, r1
 800aefe:	4601      	mov	r1, r0
 800af00:	4802      	ldr	r0, [pc, #8]	; (800af0c <strtod+0x10>)
 800af02:	4b03      	ldr	r3, [pc, #12]	; (800af10 <strtod+0x14>)
 800af04:	6800      	ldr	r0, [r0, #0]
 800af06:	f7ff ba0b 	b.w	800a320 <_strtod_l>
 800af0a:	bf00      	nop
 800af0c:	2000002c 	.word	0x2000002c
 800af10:	20000094 	.word	0x20000094

0800af14 <_strtol_l.constprop.0>:
 800af14:	2b01      	cmp	r3, #1
 800af16:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800af1a:	4680      	mov	r8, r0
 800af1c:	d001      	beq.n	800af22 <_strtol_l.constprop.0+0xe>
 800af1e:	2b24      	cmp	r3, #36	; 0x24
 800af20:	d906      	bls.n	800af30 <_strtol_l.constprop.0+0x1c>
 800af22:	f7fe f8e7 	bl	80090f4 <__errno>
 800af26:	2316      	movs	r3, #22
 800af28:	6003      	str	r3, [r0, #0]
 800af2a:	2000      	movs	r0, #0
 800af2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af30:	460d      	mov	r5, r1
 800af32:	4f35      	ldr	r7, [pc, #212]	; (800b008 <_strtol_l.constprop.0+0xf4>)
 800af34:	4628      	mov	r0, r5
 800af36:	f815 4b01 	ldrb.w	r4, [r5], #1
 800af3a:	5de6      	ldrb	r6, [r4, r7]
 800af3c:	f016 0608 	ands.w	r6, r6, #8
 800af40:	d1f8      	bne.n	800af34 <_strtol_l.constprop.0+0x20>
 800af42:	2c2d      	cmp	r4, #45	; 0x2d
 800af44:	d12f      	bne.n	800afa6 <_strtol_l.constprop.0+0x92>
 800af46:	2601      	movs	r6, #1
 800af48:	782c      	ldrb	r4, [r5, #0]
 800af4a:	1c85      	adds	r5, r0, #2
 800af4c:	2b00      	cmp	r3, #0
 800af4e:	d057      	beq.n	800b000 <_strtol_l.constprop.0+0xec>
 800af50:	2b10      	cmp	r3, #16
 800af52:	d109      	bne.n	800af68 <_strtol_l.constprop.0+0x54>
 800af54:	2c30      	cmp	r4, #48	; 0x30
 800af56:	d107      	bne.n	800af68 <_strtol_l.constprop.0+0x54>
 800af58:	7828      	ldrb	r0, [r5, #0]
 800af5a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800af5e:	2858      	cmp	r0, #88	; 0x58
 800af60:	d149      	bne.n	800aff6 <_strtol_l.constprop.0+0xe2>
 800af62:	2310      	movs	r3, #16
 800af64:	786c      	ldrb	r4, [r5, #1]
 800af66:	3502      	adds	r5, #2
 800af68:	2700      	movs	r7, #0
 800af6a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 800af6e:	f10e 3eff 	add.w	lr, lr, #4294967295
 800af72:	fbbe f9f3 	udiv	r9, lr, r3
 800af76:	4638      	mov	r0, r7
 800af78:	fb03 ea19 	mls	sl, r3, r9, lr
 800af7c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800af80:	f1bc 0f09 	cmp.w	ip, #9
 800af84:	d814      	bhi.n	800afb0 <_strtol_l.constprop.0+0x9c>
 800af86:	4664      	mov	r4, ip
 800af88:	42a3      	cmp	r3, r4
 800af8a:	dd22      	ble.n	800afd2 <_strtol_l.constprop.0+0xbe>
 800af8c:	2f00      	cmp	r7, #0
 800af8e:	db1d      	blt.n	800afcc <_strtol_l.constprop.0+0xb8>
 800af90:	4581      	cmp	r9, r0
 800af92:	d31b      	bcc.n	800afcc <_strtol_l.constprop.0+0xb8>
 800af94:	d101      	bne.n	800af9a <_strtol_l.constprop.0+0x86>
 800af96:	45a2      	cmp	sl, r4
 800af98:	db18      	blt.n	800afcc <_strtol_l.constprop.0+0xb8>
 800af9a:	2701      	movs	r7, #1
 800af9c:	fb00 4003 	mla	r0, r0, r3, r4
 800afa0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800afa4:	e7ea      	b.n	800af7c <_strtol_l.constprop.0+0x68>
 800afa6:	2c2b      	cmp	r4, #43	; 0x2b
 800afa8:	bf04      	itt	eq
 800afaa:	782c      	ldrbeq	r4, [r5, #0]
 800afac:	1c85      	addeq	r5, r0, #2
 800afae:	e7cd      	b.n	800af4c <_strtol_l.constprop.0+0x38>
 800afb0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800afb4:	f1bc 0f19 	cmp.w	ip, #25
 800afb8:	d801      	bhi.n	800afbe <_strtol_l.constprop.0+0xaa>
 800afba:	3c37      	subs	r4, #55	; 0x37
 800afbc:	e7e4      	b.n	800af88 <_strtol_l.constprop.0+0x74>
 800afbe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800afc2:	f1bc 0f19 	cmp.w	ip, #25
 800afc6:	d804      	bhi.n	800afd2 <_strtol_l.constprop.0+0xbe>
 800afc8:	3c57      	subs	r4, #87	; 0x57
 800afca:	e7dd      	b.n	800af88 <_strtol_l.constprop.0+0x74>
 800afcc:	f04f 37ff 	mov.w	r7, #4294967295
 800afd0:	e7e6      	b.n	800afa0 <_strtol_l.constprop.0+0x8c>
 800afd2:	2f00      	cmp	r7, #0
 800afd4:	da07      	bge.n	800afe6 <_strtol_l.constprop.0+0xd2>
 800afd6:	2322      	movs	r3, #34	; 0x22
 800afd8:	4670      	mov	r0, lr
 800afda:	f8c8 3000 	str.w	r3, [r8]
 800afde:	2a00      	cmp	r2, #0
 800afe0:	d0a4      	beq.n	800af2c <_strtol_l.constprop.0+0x18>
 800afe2:	1e69      	subs	r1, r5, #1
 800afe4:	e005      	b.n	800aff2 <_strtol_l.constprop.0+0xde>
 800afe6:	b106      	cbz	r6, 800afea <_strtol_l.constprop.0+0xd6>
 800afe8:	4240      	negs	r0, r0
 800afea:	2a00      	cmp	r2, #0
 800afec:	d09e      	beq.n	800af2c <_strtol_l.constprop.0+0x18>
 800afee:	2f00      	cmp	r7, #0
 800aff0:	d1f7      	bne.n	800afe2 <_strtol_l.constprop.0+0xce>
 800aff2:	6011      	str	r1, [r2, #0]
 800aff4:	e79a      	b.n	800af2c <_strtol_l.constprop.0+0x18>
 800aff6:	2430      	movs	r4, #48	; 0x30
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d1b5      	bne.n	800af68 <_strtol_l.constprop.0+0x54>
 800affc:	2308      	movs	r3, #8
 800affe:	e7b3      	b.n	800af68 <_strtol_l.constprop.0+0x54>
 800b000:	2c30      	cmp	r4, #48	; 0x30
 800b002:	d0a9      	beq.n	800af58 <_strtol_l.constprop.0+0x44>
 800b004:	230a      	movs	r3, #10
 800b006:	e7af      	b.n	800af68 <_strtol_l.constprop.0+0x54>
 800b008:	0800f901 	.word	0x0800f901

0800b00c <_strtol_r>:
 800b00c:	f7ff bf82 	b.w	800af14 <_strtol_l.constprop.0>

0800b010 <__swbuf_r>:
 800b010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b012:	460e      	mov	r6, r1
 800b014:	4614      	mov	r4, r2
 800b016:	4605      	mov	r5, r0
 800b018:	b118      	cbz	r0, 800b022 <__swbuf_r+0x12>
 800b01a:	6983      	ldr	r3, [r0, #24]
 800b01c:	b90b      	cbnz	r3, 800b022 <__swbuf_r+0x12>
 800b01e:	f001 f86b 	bl	800c0f8 <__sinit>
 800b022:	4b21      	ldr	r3, [pc, #132]	; (800b0a8 <__swbuf_r+0x98>)
 800b024:	429c      	cmp	r4, r3
 800b026:	d12b      	bne.n	800b080 <__swbuf_r+0x70>
 800b028:	686c      	ldr	r4, [r5, #4]
 800b02a:	69a3      	ldr	r3, [r4, #24]
 800b02c:	60a3      	str	r3, [r4, #8]
 800b02e:	89a3      	ldrh	r3, [r4, #12]
 800b030:	071a      	lsls	r2, r3, #28
 800b032:	d52f      	bpl.n	800b094 <__swbuf_r+0x84>
 800b034:	6923      	ldr	r3, [r4, #16]
 800b036:	b36b      	cbz	r3, 800b094 <__swbuf_r+0x84>
 800b038:	6923      	ldr	r3, [r4, #16]
 800b03a:	6820      	ldr	r0, [r4, #0]
 800b03c:	b2f6      	uxtb	r6, r6
 800b03e:	1ac0      	subs	r0, r0, r3
 800b040:	6963      	ldr	r3, [r4, #20]
 800b042:	4637      	mov	r7, r6
 800b044:	4283      	cmp	r3, r0
 800b046:	dc04      	bgt.n	800b052 <__swbuf_r+0x42>
 800b048:	4621      	mov	r1, r4
 800b04a:	4628      	mov	r0, r5
 800b04c:	f000 ffc0 	bl	800bfd0 <_fflush_r>
 800b050:	bb30      	cbnz	r0, 800b0a0 <__swbuf_r+0x90>
 800b052:	68a3      	ldr	r3, [r4, #8]
 800b054:	3001      	adds	r0, #1
 800b056:	3b01      	subs	r3, #1
 800b058:	60a3      	str	r3, [r4, #8]
 800b05a:	6823      	ldr	r3, [r4, #0]
 800b05c:	1c5a      	adds	r2, r3, #1
 800b05e:	6022      	str	r2, [r4, #0]
 800b060:	701e      	strb	r6, [r3, #0]
 800b062:	6963      	ldr	r3, [r4, #20]
 800b064:	4283      	cmp	r3, r0
 800b066:	d004      	beq.n	800b072 <__swbuf_r+0x62>
 800b068:	89a3      	ldrh	r3, [r4, #12]
 800b06a:	07db      	lsls	r3, r3, #31
 800b06c:	d506      	bpl.n	800b07c <__swbuf_r+0x6c>
 800b06e:	2e0a      	cmp	r6, #10
 800b070:	d104      	bne.n	800b07c <__swbuf_r+0x6c>
 800b072:	4621      	mov	r1, r4
 800b074:	4628      	mov	r0, r5
 800b076:	f000 ffab 	bl	800bfd0 <_fflush_r>
 800b07a:	b988      	cbnz	r0, 800b0a0 <__swbuf_r+0x90>
 800b07c:	4638      	mov	r0, r7
 800b07e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b080:	4b0a      	ldr	r3, [pc, #40]	; (800b0ac <__swbuf_r+0x9c>)
 800b082:	429c      	cmp	r4, r3
 800b084:	d101      	bne.n	800b08a <__swbuf_r+0x7a>
 800b086:	68ac      	ldr	r4, [r5, #8]
 800b088:	e7cf      	b.n	800b02a <__swbuf_r+0x1a>
 800b08a:	4b09      	ldr	r3, [pc, #36]	; (800b0b0 <__swbuf_r+0xa0>)
 800b08c:	429c      	cmp	r4, r3
 800b08e:	bf08      	it	eq
 800b090:	68ec      	ldreq	r4, [r5, #12]
 800b092:	e7ca      	b.n	800b02a <__swbuf_r+0x1a>
 800b094:	4621      	mov	r1, r4
 800b096:	4628      	mov	r0, r5
 800b098:	f000 f81e 	bl	800b0d8 <__swsetup_r>
 800b09c:	2800      	cmp	r0, #0
 800b09e:	d0cb      	beq.n	800b038 <__swbuf_r+0x28>
 800b0a0:	f04f 37ff 	mov.w	r7, #4294967295
 800b0a4:	e7ea      	b.n	800b07c <__swbuf_r+0x6c>
 800b0a6:	bf00      	nop
 800b0a8:	0800fab4 	.word	0x0800fab4
 800b0ac:	0800fad4 	.word	0x0800fad4
 800b0b0:	0800fa94 	.word	0x0800fa94

0800b0b4 <_write_r>:
 800b0b4:	b538      	push	{r3, r4, r5, lr}
 800b0b6:	4604      	mov	r4, r0
 800b0b8:	4608      	mov	r0, r1
 800b0ba:	4611      	mov	r1, r2
 800b0bc:	2200      	movs	r2, #0
 800b0be:	4d05      	ldr	r5, [pc, #20]	; (800b0d4 <_write_r+0x20>)
 800b0c0:	602a      	str	r2, [r5, #0]
 800b0c2:	461a      	mov	r2, r3
 800b0c4:	f7f7 fe48 	bl	8002d58 <_write>
 800b0c8:	1c43      	adds	r3, r0, #1
 800b0ca:	d102      	bne.n	800b0d2 <_write_r+0x1e>
 800b0cc:	682b      	ldr	r3, [r5, #0]
 800b0ce:	b103      	cbz	r3, 800b0d2 <_write_r+0x1e>
 800b0d0:	6023      	str	r3, [r4, #0]
 800b0d2:	bd38      	pop	{r3, r4, r5, pc}
 800b0d4:	20002158 	.word	0x20002158

0800b0d8 <__swsetup_r>:
 800b0d8:	4b32      	ldr	r3, [pc, #200]	; (800b1a4 <__swsetup_r+0xcc>)
 800b0da:	b570      	push	{r4, r5, r6, lr}
 800b0dc:	681d      	ldr	r5, [r3, #0]
 800b0de:	4606      	mov	r6, r0
 800b0e0:	460c      	mov	r4, r1
 800b0e2:	b125      	cbz	r5, 800b0ee <__swsetup_r+0x16>
 800b0e4:	69ab      	ldr	r3, [r5, #24]
 800b0e6:	b913      	cbnz	r3, 800b0ee <__swsetup_r+0x16>
 800b0e8:	4628      	mov	r0, r5
 800b0ea:	f001 f805 	bl	800c0f8 <__sinit>
 800b0ee:	4b2e      	ldr	r3, [pc, #184]	; (800b1a8 <__swsetup_r+0xd0>)
 800b0f0:	429c      	cmp	r4, r3
 800b0f2:	d10f      	bne.n	800b114 <__swsetup_r+0x3c>
 800b0f4:	686c      	ldr	r4, [r5, #4]
 800b0f6:	89a3      	ldrh	r3, [r4, #12]
 800b0f8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b0fc:	0719      	lsls	r1, r3, #28
 800b0fe:	d42c      	bmi.n	800b15a <__swsetup_r+0x82>
 800b100:	06dd      	lsls	r5, r3, #27
 800b102:	d411      	bmi.n	800b128 <__swsetup_r+0x50>
 800b104:	2309      	movs	r3, #9
 800b106:	6033      	str	r3, [r6, #0]
 800b108:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b10c:	f04f 30ff 	mov.w	r0, #4294967295
 800b110:	81a3      	strh	r3, [r4, #12]
 800b112:	e03e      	b.n	800b192 <__swsetup_r+0xba>
 800b114:	4b25      	ldr	r3, [pc, #148]	; (800b1ac <__swsetup_r+0xd4>)
 800b116:	429c      	cmp	r4, r3
 800b118:	d101      	bne.n	800b11e <__swsetup_r+0x46>
 800b11a:	68ac      	ldr	r4, [r5, #8]
 800b11c:	e7eb      	b.n	800b0f6 <__swsetup_r+0x1e>
 800b11e:	4b24      	ldr	r3, [pc, #144]	; (800b1b0 <__swsetup_r+0xd8>)
 800b120:	429c      	cmp	r4, r3
 800b122:	bf08      	it	eq
 800b124:	68ec      	ldreq	r4, [r5, #12]
 800b126:	e7e6      	b.n	800b0f6 <__swsetup_r+0x1e>
 800b128:	0758      	lsls	r0, r3, #29
 800b12a:	d512      	bpl.n	800b152 <__swsetup_r+0x7a>
 800b12c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b12e:	b141      	cbz	r1, 800b142 <__swsetup_r+0x6a>
 800b130:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b134:	4299      	cmp	r1, r3
 800b136:	d002      	beq.n	800b13e <__swsetup_r+0x66>
 800b138:	4630      	mov	r0, r6
 800b13a:	f7fe f837 	bl	80091ac <_free_r>
 800b13e:	2300      	movs	r3, #0
 800b140:	6363      	str	r3, [r4, #52]	; 0x34
 800b142:	89a3      	ldrh	r3, [r4, #12]
 800b144:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b148:	81a3      	strh	r3, [r4, #12]
 800b14a:	2300      	movs	r3, #0
 800b14c:	6063      	str	r3, [r4, #4]
 800b14e:	6923      	ldr	r3, [r4, #16]
 800b150:	6023      	str	r3, [r4, #0]
 800b152:	89a3      	ldrh	r3, [r4, #12]
 800b154:	f043 0308 	orr.w	r3, r3, #8
 800b158:	81a3      	strh	r3, [r4, #12]
 800b15a:	6923      	ldr	r3, [r4, #16]
 800b15c:	b94b      	cbnz	r3, 800b172 <__swsetup_r+0x9a>
 800b15e:	89a3      	ldrh	r3, [r4, #12]
 800b160:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b164:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b168:	d003      	beq.n	800b172 <__swsetup_r+0x9a>
 800b16a:	4621      	mov	r1, r4
 800b16c:	4630      	mov	r0, r6
 800b16e:	f001 fc07 	bl	800c980 <__smakebuf_r>
 800b172:	89a0      	ldrh	r0, [r4, #12]
 800b174:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b178:	f010 0301 	ands.w	r3, r0, #1
 800b17c:	d00a      	beq.n	800b194 <__swsetup_r+0xbc>
 800b17e:	2300      	movs	r3, #0
 800b180:	60a3      	str	r3, [r4, #8]
 800b182:	6963      	ldr	r3, [r4, #20]
 800b184:	425b      	negs	r3, r3
 800b186:	61a3      	str	r3, [r4, #24]
 800b188:	6923      	ldr	r3, [r4, #16]
 800b18a:	b943      	cbnz	r3, 800b19e <__swsetup_r+0xc6>
 800b18c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b190:	d1ba      	bne.n	800b108 <__swsetup_r+0x30>
 800b192:	bd70      	pop	{r4, r5, r6, pc}
 800b194:	0781      	lsls	r1, r0, #30
 800b196:	bf58      	it	pl
 800b198:	6963      	ldrpl	r3, [r4, #20]
 800b19a:	60a3      	str	r3, [r4, #8]
 800b19c:	e7f4      	b.n	800b188 <__swsetup_r+0xb0>
 800b19e:	2000      	movs	r0, #0
 800b1a0:	e7f7      	b.n	800b192 <__swsetup_r+0xba>
 800b1a2:	bf00      	nop
 800b1a4:	2000002c 	.word	0x2000002c
 800b1a8:	0800fab4 	.word	0x0800fab4
 800b1ac:	0800fad4 	.word	0x0800fad4
 800b1b0:	0800fa94 	.word	0x0800fa94

0800b1b4 <_close_r>:
 800b1b4:	b538      	push	{r3, r4, r5, lr}
 800b1b6:	2300      	movs	r3, #0
 800b1b8:	4d05      	ldr	r5, [pc, #20]	; (800b1d0 <_close_r+0x1c>)
 800b1ba:	4604      	mov	r4, r0
 800b1bc:	4608      	mov	r0, r1
 800b1be:	602b      	str	r3, [r5, #0]
 800b1c0:	f7f7 fde6 	bl	8002d90 <_close>
 800b1c4:	1c43      	adds	r3, r0, #1
 800b1c6:	d102      	bne.n	800b1ce <_close_r+0x1a>
 800b1c8:	682b      	ldr	r3, [r5, #0]
 800b1ca:	b103      	cbz	r3, 800b1ce <_close_r+0x1a>
 800b1cc:	6023      	str	r3, [r4, #0]
 800b1ce:	bd38      	pop	{r3, r4, r5, pc}
 800b1d0:	20002158 	.word	0x20002158

0800b1d4 <quorem>:
 800b1d4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1d8:	6903      	ldr	r3, [r0, #16]
 800b1da:	690c      	ldr	r4, [r1, #16]
 800b1dc:	4607      	mov	r7, r0
 800b1de:	42a3      	cmp	r3, r4
 800b1e0:	f2c0 8082 	blt.w	800b2e8 <quorem+0x114>
 800b1e4:	3c01      	subs	r4, #1
 800b1e6:	f100 0514 	add.w	r5, r0, #20
 800b1ea:	f101 0814 	add.w	r8, r1, #20
 800b1ee:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b1f2:	9301      	str	r3, [sp, #4]
 800b1f4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800b1f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b1fc:	3301      	adds	r3, #1
 800b1fe:	429a      	cmp	r2, r3
 800b200:	fbb2 f6f3 	udiv	r6, r2, r3
 800b204:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800b208:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800b20c:	d331      	bcc.n	800b272 <quorem+0x9e>
 800b20e:	f04f 0e00 	mov.w	lr, #0
 800b212:	4640      	mov	r0, r8
 800b214:	46ac      	mov	ip, r5
 800b216:	46f2      	mov	sl, lr
 800b218:	f850 2b04 	ldr.w	r2, [r0], #4
 800b21c:	b293      	uxth	r3, r2
 800b21e:	fb06 e303 	mla	r3, r6, r3, lr
 800b222:	0c12      	lsrs	r2, r2, #16
 800b224:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800b228:	b29b      	uxth	r3, r3
 800b22a:	fb06 e202 	mla	r2, r6, r2, lr
 800b22e:	ebaa 0303 	sub.w	r3, sl, r3
 800b232:	f8dc a000 	ldr.w	sl, [ip]
 800b236:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800b23a:	fa1f fa8a 	uxth.w	sl, sl
 800b23e:	4453      	add	r3, sl
 800b240:	f8dc a000 	ldr.w	sl, [ip]
 800b244:	b292      	uxth	r2, r2
 800b246:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800b24a:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b24e:	b29b      	uxth	r3, r3
 800b250:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b254:	4581      	cmp	r9, r0
 800b256:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800b25a:	f84c 3b04 	str.w	r3, [ip], #4
 800b25e:	d2db      	bcs.n	800b218 <quorem+0x44>
 800b260:	f855 300b 	ldr.w	r3, [r5, fp]
 800b264:	b92b      	cbnz	r3, 800b272 <quorem+0x9e>
 800b266:	9b01      	ldr	r3, [sp, #4]
 800b268:	3b04      	subs	r3, #4
 800b26a:	429d      	cmp	r5, r3
 800b26c:	461a      	mov	r2, r3
 800b26e:	d32f      	bcc.n	800b2d0 <quorem+0xfc>
 800b270:	613c      	str	r4, [r7, #16]
 800b272:	4638      	mov	r0, r7
 800b274:	f001 feb8 	bl	800cfe8 <__mcmp>
 800b278:	2800      	cmp	r0, #0
 800b27a:	db25      	blt.n	800b2c8 <quorem+0xf4>
 800b27c:	4628      	mov	r0, r5
 800b27e:	f04f 0c00 	mov.w	ip, #0
 800b282:	3601      	adds	r6, #1
 800b284:	f858 1b04 	ldr.w	r1, [r8], #4
 800b288:	f8d0 e000 	ldr.w	lr, [r0]
 800b28c:	b28b      	uxth	r3, r1
 800b28e:	ebac 0303 	sub.w	r3, ip, r3
 800b292:	fa1f f28e 	uxth.w	r2, lr
 800b296:	4413      	add	r3, r2
 800b298:	0c0a      	lsrs	r2, r1, #16
 800b29a:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800b29e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800b2a2:	b29b      	uxth	r3, r3
 800b2a4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800b2a8:	45c1      	cmp	r9, r8
 800b2aa:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800b2ae:	f840 3b04 	str.w	r3, [r0], #4
 800b2b2:	d2e7      	bcs.n	800b284 <quorem+0xb0>
 800b2b4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800b2b8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800b2bc:	b922      	cbnz	r2, 800b2c8 <quorem+0xf4>
 800b2be:	3b04      	subs	r3, #4
 800b2c0:	429d      	cmp	r5, r3
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	d30a      	bcc.n	800b2dc <quorem+0x108>
 800b2c6:	613c      	str	r4, [r7, #16]
 800b2c8:	4630      	mov	r0, r6
 800b2ca:	b003      	add	sp, #12
 800b2cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2d0:	6812      	ldr	r2, [r2, #0]
 800b2d2:	3b04      	subs	r3, #4
 800b2d4:	2a00      	cmp	r2, #0
 800b2d6:	d1cb      	bne.n	800b270 <quorem+0x9c>
 800b2d8:	3c01      	subs	r4, #1
 800b2da:	e7c6      	b.n	800b26a <quorem+0x96>
 800b2dc:	6812      	ldr	r2, [r2, #0]
 800b2de:	3b04      	subs	r3, #4
 800b2e0:	2a00      	cmp	r2, #0
 800b2e2:	d1f0      	bne.n	800b2c6 <quorem+0xf2>
 800b2e4:	3c01      	subs	r4, #1
 800b2e6:	e7eb      	b.n	800b2c0 <quorem+0xec>
 800b2e8:	2000      	movs	r0, #0
 800b2ea:	e7ee      	b.n	800b2ca <quorem+0xf6>
 800b2ec:	0000      	movs	r0, r0
	...

0800b2f0 <_dtoa_r>:
 800b2f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2f4:	4616      	mov	r6, r2
 800b2f6:	461f      	mov	r7, r3
 800b2f8:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800b2fa:	b099      	sub	sp, #100	; 0x64
 800b2fc:	4605      	mov	r5, r0
 800b2fe:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800b302:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800b306:	b974      	cbnz	r4, 800b326 <_dtoa_r+0x36>
 800b308:	2010      	movs	r0, #16
 800b30a:	f7fd ff1d 	bl	8009148 <malloc>
 800b30e:	4602      	mov	r2, r0
 800b310:	6268      	str	r0, [r5, #36]	; 0x24
 800b312:	b920      	cbnz	r0, 800b31e <_dtoa_r+0x2e>
 800b314:	21ea      	movs	r1, #234	; 0xea
 800b316:	4ba8      	ldr	r3, [pc, #672]	; (800b5b8 <_dtoa_r+0x2c8>)
 800b318:	48a8      	ldr	r0, [pc, #672]	; (800b5bc <_dtoa_r+0x2cc>)
 800b31a:	f002 ff4d 	bl	800e1b8 <__assert_func>
 800b31e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b322:	6004      	str	r4, [r0, #0]
 800b324:	60c4      	str	r4, [r0, #12]
 800b326:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b328:	6819      	ldr	r1, [r3, #0]
 800b32a:	b151      	cbz	r1, 800b342 <_dtoa_r+0x52>
 800b32c:	685a      	ldr	r2, [r3, #4]
 800b32e:	2301      	movs	r3, #1
 800b330:	4093      	lsls	r3, r2
 800b332:	604a      	str	r2, [r1, #4]
 800b334:	608b      	str	r3, [r1, #8]
 800b336:	4628      	mov	r0, r5
 800b338:	f001 fbce 	bl	800cad8 <_Bfree>
 800b33c:	2200      	movs	r2, #0
 800b33e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b340:	601a      	str	r2, [r3, #0]
 800b342:	1e3b      	subs	r3, r7, #0
 800b344:	bfaf      	iteee	ge
 800b346:	2300      	movge	r3, #0
 800b348:	2201      	movlt	r2, #1
 800b34a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800b34e:	9305      	strlt	r3, [sp, #20]
 800b350:	bfa8      	it	ge
 800b352:	f8c8 3000 	strge.w	r3, [r8]
 800b356:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800b35a:	4b99      	ldr	r3, [pc, #612]	; (800b5c0 <_dtoa_r+0x2d0>)
 800b35c:	bfb8      	it	lt
 800b35e:	f8c8 2000 	strlt.w	r2, [r8]
 800b362:	ea33 0309 	bics.w	r3, r3, r9
 800b366:	d119      	bne.n	800b39c <_dtoa_r+0xac>
 800b368:	f242 730f 	movw	r3, #9999	; 0x270f
 800b36c:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b36e:	6013      	str	r3, [r2, #0]
 800b370:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b374:	4333      	orrs	r3, r6
 800b376:	f000 857f 	beq.w	800be78 <_dtoa_r+0xb88>
 800b37a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b37c:	b953      	cbnz	r3, 800b394 <_dtoa_r+0xa4>
 800b37e:	4b91      	ldr	r3, [pc, #580]	; (800b5c4 <_dtoa_r+0x2d4>)
 800b380:	e022      	b.n	800b3c8 <_dtoa_r+0xd8>
 800b382:	4b91      	ldr	r3, [pc, #580]	; (800b5c8 <_dtoa_r+0x2d8>)
 800b384:	9303      	str	r3, [sp, #12]
 800b386:	3308      	adds	r3, #8
 800b388:	9a26      	ldr	r2, [sp, #152]	; 0x98
 800b38a:	6013      	str	r3, [r2, #0]
 800b38c:	9803      	ldr	r0, [sp, #12]
 800b38e:	b019      	add	sp, #100	; 0x64
 800b390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b394:	4b8b      	ldr	r3, [pc, #556]	; (800b5c4 <_dtoa_r+0x2d4>)
 800b396:	9303      	str	r3, [sp, #12]
 800b398:	3303      	adds	r3, #3
 800b39a:	e7f5      	b.n	800b388 <_dtoa_r+0x98>
 800b39c:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b3a0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 800b3a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3a8:	2200      	movs	r2, #0
 800b3aa:	2300      	movs	r3, #0
 800b3ac:	f7f5 fafc 	bl	80009a8 <__aeabi_dcmpeq>
 800b3b0:	4680      	mov	r8, r0
 800b3b2:	b158      	cbz	r0, 800b3cc <_dtoa_r+0xdc>
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	9a24      	ldr	r2, [sp, #144]	; 0x90
 800b3b8:	6013      	str	r3, [r2, #0]
 800b3ba:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f000 8558 	beq.w	800be72 <_dtoa_r+0xb82>
 800b3c2:	4882      	ldr	r0, [pc, #520]	; (800b5cc <_dtoa_r+0x2dc>)
 800b3c4:	6018      	str	r0, [r3, #0]
 800b3c6:	1e43      	subs	r3, r0, #1
 800b3c8:	9303      	str	r3, [sp, #12]
 800b3ca:	e7df      	b.n	800b38c <_dtoa_r+0x9c>
 800b3cc:	ab16      	add	r3, sp, #88	; 0x58
 800b3ce:	9301      	str	r3, [sp, #4]
 800b3d0:	ab17      	add	r3, sp, #92	; 0x5c
 800b3d2:	9300      	str	r3, [sp, #0]
 800b3d4:	4628      	mov	r0, r5
 800b3d6:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800b3da:	f001 ff27 	bl	800d22c <__d2b>
 800b3de:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800b3e2:	4683      	mov	fp, r0
 800b3e4:	2c00      	cmp	r4, #0
 800b3e6:	d07f      	beq.n	800b4e8 <_dtoa_r+0x1f8>
 800b3e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b3ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b3ee:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800b3f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b3f6:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 800b3fa:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 800b3fe:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800b402:	2200      	movs	r2, #0
 800b404:	4b72      	ldr	r3, [pc, #456]	; (800b5d0 <_dtoa_r+0x2e0>)
 800b406:	f7f4 feaf 	bl	8000168 <__aeabi_dsub>
 800b40a:	a365      	add	r3, pc, #404	; (adr r3, 800b5a0 <_dtoa_r+0x2b0>)
 800b40c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b410:	f7f5 f862 	bl	80004d8 <__aeabi_dmul>
 800b414:	a364      	add	r3, pc, #400	; (adr r3, 800b5a8 <_dtoa_r+0x2b8>)
 800b416:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b41a:	f7f4 fea7 	bl	800016c <__adddf3>
 800b41e:	4606      	mov	r6, r0
 800b420:	4620      	mov	r0, r4
 800b422:	460f      	mov	r7, r1
 800b424:	f7f4 ffee 	bl	8000404 <__aeabi_i2d>
 800b428:	a361      	add	r3, pc, #388	; (adr r3, 800b5b0 <_dtoa_r+0x2c0>)
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	f7f5 f853 	bl	80004d8 <__aeabi_dmul>
 800b432:	4602      	mov	r2, r0
 800b434:	460b      	mov	r3, r1
 800b436:	4630      	mov	r0, r6
 800b438:	4639      	mov	r1, r7
 800b43a:	f7f4 fe97 	bl	800016c <__adddf3>
 800b43e:	4606      	mov	r6, r0
 800b440:	460f      	mov	r7, r1
 800b442:	f7f5 faf9 	bl	8000a38 <__aeabi_d2iz>
 800b446:	2200      	movs	r2, #0
 800b448:	4682      	mov	sl, r0
 800b44a:	2300      	movs	r3, #0
 800b44c:	4630      	mov	r0, r6
 800b44e:	4639      	mov	r1, r7
 800b450:	f7f5 fab4 	bl	80009bc <__aeabi_dcmplt>
 800b454:	b148      	cbz	r0, 800b46a <_dtoa_r+0x17a>
 800b456:	4650      	mov	r0, sl
 800b458:	f7f4 ffd4 	bl	8000404 <__aeabi_i2d>
 800b45c:	4632      	mov	r2, r6
 800b45e:	463b      	mov	r3, r7
 800b460:	f7f5 faa2 	bl	80009a8 <__aeabi_dcmpeq>
 800b464:	b908      	cbnz	r0, 800b46a <_dtoa_r+0x17a>
 800b466:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b46a:	f1ba 0f16 	cmp.w	sl, #22
 800b46e:	d858      	bhi.n	800b522 <_dtoa_r+0x232>
 800b470:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b474:	4b57      	ldr	r3, [pc, #348]	; (800b5d4 <_dtoa_r+0x2e4>)
 800b476:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b47a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b47e:	f7f5 fa9d 	bl	80009bc <__aeabi_dcmplt>
 800b482:	2800      	cmp	r0, #0
 800b484:	d04f      	beq.n	800b526 <_dtoa_r+0x236>
 800b486:	2300      	movs	r3, #0
 800b488:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b48c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b48e:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800b490:	1b1c      	subs	r4, r3, r4
 800b492:	1e63      	subs	r3, r4, #1
 800b494:	9309      	str	r3, [sp, #36]	; 0x24
 800b496:	bf49      	itett	mi
 800b498:	f1c4 0301 	rsbmi	r3, r4, #1
 800b49c:	2300      	movpl	r3, #0
 800b49e:	9306      	strmi	r3, [sp, #24]
 800b4a0:	2300      	movmi	r3, #0
 800b4a2:	bf54      	ite	pl
 800b4a4:	9306      	strpl	r3, [sp, #24]
 800b4a6:	9309      	strmi	r3, [sp, #36]	; 0x24
 800b4a8:	f1ba 0f00 	cmp.w	sl, #0
 800b4ac:	db3d      	blt.n	800b52a <_dtoa_r+0x23a>
 800b4ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b4b0:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 800b4b4:	4453      	add	r3, sl
 800b4b6:	9309      	str	r3, [sp, #36]	; 0x24
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	930a      	str	r3, [sp, #40]	; 0x28
 800b4bc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4be:	2b09      	cmp	r3, #9
 800b4c0:	f200 808c 	bhi.w	800b5dc <_dtoa_r+0x2ec>
 800b4c4:	2b05      	cmp	r3, #5
 800b4c6:	bfc4      	itt	gt
 800b4c8:	3b04      	subgt	r3, #4
 800b4ca:	9322      	strgt	r3, [sp, #136]	; 0x88
 800b4cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800b4ce:	bfc8      	it	gt
 800b4d0:	2400      	movgt	r4, #0
 800b4d2:	f1a3 0302 	sub.w	r3, r3, #2
 800b4d6:	bfd8      	it	le
 800b4d8:	2401      	movle	r4, #1
 800b4da:	2b03      	cmp	r3, #3
 800b4dc:	f200 808a 	bhi.w	800b5f4 <_dtoa_r+0x304>
 800b4e0:	e8df f003 	tbb	[pc, r3]
 800b4e4:	5b4d4f2d 	.word	0x5b4d4f2d
 800b4e8:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800b4ec:	441c      	add	r4, r3
 800b4ee:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800b4f2:	2b20      	cmp	r3, #32
 800b4f4:	bfc3      	ittte	gt
 800b4f6:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b4fa:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 800b4fe:	fa09 f303 	lslgt.w	r3, r9, r3
 800b502:	f1c3 0320 	rsble	r3, r3, #32
 800b506:	bfc6      	itte	gt
 800b508:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b50c:	4318      	orrgt	r0, r3
 800b50e:	fa06 f003 	lslle.w	r0, r6, r3
 800b512:	f7f4 ff67 	bl	80003e4 <__aeabi_ui2d>
 800b516:	2301      	movs	r3, #1
 800b518:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 800b51c:	3c01      	subs	r4, #1
 800b51e:	9313      	str	r3, [sp, #76]	; 0x4c
 800b520:	e76f      	b.n	800b402 <_dtoa_r+0x112>
 800b522:	2301      	movs	r3, #1
 800b524:	e7b2      	b.n	800b48c <_dtoa_r+0x19c>
 800b526:	900f      	str	r0, [sp, #60]	; 0x3c
 800b528:	e7b1      	b.n	800b48e <_dtoa_r+0x19e>
 800b52a:	9b06      	ldr	r3, [sp, #24]
 800b52c:	eba3 030a 	sub.w	r3, r3, sl
 800b530:	9306      	str	r3, [sp, #24]
 800b532:	f1ca 0300 	rsb	r3, sl, #0
 800b536:	930a      	str	r3, [sp, #40]	; 0x28
 800b538:	2300      	movs	r3, #0
 800b53a:	930e      	str	r3, [sp, #56]	; 0x38
 800b53c:	e7be      	b.n	800b4bc <_dtoa_r+0x1cc>
 800b53e:	2300      	movs	r3, #0
 800b540:	930b      	str	r3, [sp, #44]	; 0x2c
 800b542:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b544:	2b00      	cmp	r3, #0
 800b546:	dc58      	bgt.n	800b5fa <_dtoa_r+0x30a>
 800b548:	f04f 0901 	mov.w	r9, #1
 800b54c:	464b      	mov	r3, r9
 800b54e:	f8cd 9020 	str.w	r9, [sp, #32]
 800b552:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800b556:	2200      	movs	r2, #0
 800b558:	6a68      	ldr	r0, [r5, #36]	; 0x24
 800b55a:	6042      	str	r2, [r0, #4]
 800b55c:	2204      	movs	r2, #4
 800b55e:	f102 0614 	add.w	r6, r2, #20
 800b562:	429e      	cmp	r6, r3
 800b564:	6841      	ldr	r1, [r0, #4]
 800b566:	d94e      	bls.n	800b606 <_dtoa_r+0x316>
 800b568:	4628      	mov	r0, r5
 800b56a:	f001 fa75 	bl	800ca58 <_Balloc>
 800b56e:	9003      	str	r0, [sp, #12]
 800b570:	2800      	cmp	r0, #0
 800b572:	d14c      	bne.n	800b60e <_dtoa_r+0x31e>
 800b574:	4602      	mov	r2, r0
 800b576:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b57a:	4b17      	ldr	r3, [pc, #92]	; (800b5d8 <_dtoa_r+0x2e8>)
 800b57c:	e6cc      	b.n	800b318 <_dtoa_r+0x28>
 800b57e:	2301      	movs	r3, #1
 800b580:	e7de      	b.n	800b540 <_dtoa_r+0x250>
 800b582:	2300      	movs	r3, #0
 800b584:	930b      	str	r3, [sp, #44]	; 0x2c
 800b586:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b588:	eb0a 0903 	add.w	r9, sl, r3
 800b58c:	f109 0301 	add.w	r3, r9, #1
 800b590:	2b01      	cmp	r3, #1
 800b592:	9308      	str	r3, [sp, #32]
 800b594:	bfb8      	it	lt
 800b596:	2301      	movlt	r3, #1
 800b598:	e7dd      	b.n	800b556 <_dtoa_r+0x266>
 800b59a:	2301      	movs	r3, #1
 800b59c:	e7f2      	b.n	800b584 <_dtoa_r+0x294>
 800b59e:	bf00      	nop
 800b5a0:	636f4361 	.word	0x636f4361
 800b5a4:	3fd287a7 	.word	0x3fd287a7
 800b5a8:	8b60c8b3 	.word	0x8b60c8b3
 800b5ac:	3fc68a28 	.word	0x3fc68a28
 800b5b0:	509f79fb 	.word	0x509f79fb
 800b5b4:	3fd34413 	.word	0x3fd34413
 800b5b8:	0800fa0e 	.word	0x0800fa0e
 800b5bc:	0800fa25 	.word	0x0800fa25
 800b5c0:	7ff00000 	.word	0x7ff00000
 800b5c4:	0800fa0a 	.word	0x0800fa0a
 800b5c8:	0800fa01 	.word	0x0800fa01
 800b5cc:	0800fce2 	.word	0x0800fce2
 800b5d0:	3ff80000 	.word	0x3ff80000
 800b5d4:	0800fbf8 	.word	0x0800fbf8
 800b5d8:	0800fa80 	.word	0x0800fa80
 800b5dc:	2401      	movs	r4, #1
 800b5de:	2300      	movs	r3, #0
 800b5e0:	940b      	str	r4, [sp, #44]	; 0x2c
 800b5e2:	9322      	str	r3, [sp, #136]	; 0x88
 800b5e4:	f04f 39ff 	mov.w	r9, #4294967295
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	2312      	movs	r3, #18
 800b5ec:	f8cd 9020 	str.w	r9, [sp, #32]
 800b5f0:	9223      	str	r2, [sp, #140]	; 0x8c
 800b5f2:	e7b0      	b.n	800b556 <_dtoa_r+0x266>
 800b5f4:	2301      	movs	r3, #1
 800b5f6:	930b      	str	r3, [sp, #44]	; 0x2c
 800b5f8:	e7f4      	b.n	800b5e4 <_dtoa_r+0x2f4>
 800b5fa:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 800b5fe:	464b      	mov	r3, r9
 800b600:	f8cd 9020 	str.w	r9, [sp, #32]
 800b604:	e7a7      	b.n	800b556 <_dtoa_r+0x266>
 800b606:	3101      	adds	r1, #1
 800b608:	6041      	str	r1, [r0, #4]
 800b60a:	0052      	lsls	r2, r2, #1
 800b60c:	e7a7      	b.n	800b55e <_dtoa_r+0x26e>
 800b60e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800b610:	9a03      	ldr	r2, [sp, #12]
 800b612:	601a      	str	r2, [r3, #0]
 800b614:	9b08      	ldr	r3, [sp, #32]
 800b616:	2b0e      	cmp	r3, #14
 800b618:	f200 80a8 	bhi.w	800b76c <_dtoa_r+0x47c>
 800b61c:	2c00      	cmp	r4, #0
 800b61e:	f000 80a5 	beq.w	800b76c <_dtoa_r+0x47c>
 800b622:	f1ba 0f00 	cmp.w	sl, #0
 800b626:	dd34      	ble.n	800b692 <_dtoa_r+0x3a2>
 800b628:	4a9a      	ldr	r2, [pc, #616]	; (800b894 <_dtoa_r+0x5a4>)
 800b62a:	f00a 030f 	and.w	r3, sl, #15
 800b62e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b632:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800b636:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b63a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b63e:	ea4f 142a 	mov.w	r4, sl, asr #4
 800b642:	d016      	beq.n	800b672 <_dtoa_r+0x382>
 800b644:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b648:	4b93      	ldr	r3, [pc, #588]	; (800b898 <_dtoa_r+0x5a8>)
 800b64a:	2703      	movs	r7, #3
 800b64c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b650:	f7f5 f86c 	bl	800072c <__aeabi_ddiv>
 800b654:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b658:	f004 040f 	and.w	r4, r4, #15
 800b65c:	4e8e      	ldr	r6, [pc, #568]	; (800b898 <_dtoa_r+0x5a8>)
 800b65e:	b954      	cbnz	r4, 800b676 <_dtoa_r+0x386>
 800b660:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b664:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b668:	f7f5 f860 	bl	800072c <__aeabi_ddiv>
 800b66c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b670:	e029      	b.n	800b6c6 <_dtoa_r+0x3d6>
 800b672:	2702      	movs	r7, #2
 800b674:	e7f2      	b.n	800b65c <_dtoa_r+0x36c>
 800b676:	07e1      	lsls	r1, r4, #31
 800b678:	d508      	bpl.n	800b68c <_dtoa_r+0x39c>
 800b67a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b67e:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b682:	f7f4 ff29 	bl	80004d8 <__aeabi_dmul>
 800b686:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b68a:	3701      	adds	r7, #1
 800b68c:	1064      	asrs	r4, r4, #1
 800b68e:	3608      	adds	r6, #8
 800b690:	e7e5      	b.n	800b65e <_dtoa_r+0x36e>
 800b692:	f000 80a5 	beq.w	800b7e0 <_dtoa_r+0x4f0>
 800b696:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800b69a:	f1ca 0400 	rsb	r4, sl, #0
 800b69e:	4b7d      	ldr	r3, [pc, #500]	; (800b894 <_dtoa_r+0x5a4>)
 800b6a0:	f004 020f 	and.w	r2, r4, #15
 800b6a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b6a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6ac:	f7f4 ff14 	bl	80004d8 <__aeabi_dmul>
 800b6b0:	2702      	movs	r7, #2
 800b6b2:	2300      	movs	r3, #0
 800b6b4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6b8:	4e77      	ldr	r6, [pc, #476]	; (800b898 <_dtoa_r+0x5a8>)
 800b6ba:	1124      	asrs	r4, r4, #4
 800b6bc:	2c00      	cmp	r4, #0
 800b6be:	f040 8084 	bne.w	800b7ca <_dtoa_r+0x4da>
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d1d2      	bne.n	800b66c <_dtoa_r+0x37c>
 800b6c6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b6c8:	2b00      	cmp	r3, #0
 800b6ca:	f000 808b 	beq.w	800b7e4 <_dtoa_r+0x4f4>
 800b6ce:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800b6d2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800b6d6:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b6da:	2200      	movs	r2, #0
 800b6dc:	4b6f      	ldr	r3, [pc, #444]	; (800b89c <_dtoa_r+0x5ac>)
 800b6de:	f7f5 f96d 	bl	80009bc <__aeabi_dcmplt>
 800b6e2:	2800      	cmp	r0, #0
 800b6e4:	d07e      	beq.n	800b7e4 <_dtoa_r+0x4f4>
 800b6e6:	9b08      	ldr	r3, [sp, #32]
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	d07b      	beq.n	800b7e4 <_dtoa_r+0x4f4>
 800b6ec:	f1b9 0f00 	cmp.w	r9, #0
 800b6f0:	dd38      	ble.n	800b764 <_dtoa_r+0x474>
 800b6f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	4b69      	ldr	r3, [pc, #420]	; (800b8a0 <_dtoa_r+0x5b0>)
 800b6fa:	f7f4 feed 	bl	80004d8 <__aeabi_dmul>
 800b6fe:	464c      	mov	r4, r9
 800b700:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b704:	f10a 38ff 	add.w	r8, sl, #4294967295
 800b708:	3701      	adds	r7, #1
 800b70a:	4638      	mov	r0, r7
 800b70c:	f7f4 fe7a 	bl	8000404 <__aeabi_i2d>
 800b710:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b714:	f7f4 fee0 	bl	80004d8 <__aeabi_dmul>
 800b718:	2200      	movs	r2, #0
 800b71a:	4b62      	ldr	r3, [pc, #392]	; (800b8a4 <_dtoa_r+0x5b4>)
 800b71c:	f7f4 fd26 	bl	800016c <__adddf3>
 800b720:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800b724:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b728:	9611      	str	r6, [sp, #68]	; 0x44
 800b72a:	2c00      	cmp	r4, #0
 800b72c:	d15d      	bne.n	800b7ea <_dtoa_r+0x4fa>
 800b72e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b732:	2200      	movs	r2, #0
 800b734:	4b5c      	ldr	r3, [pc, #368]	; (800b8a8 <_dtoa_r+0x5b8>)
 800b736:	f7f4 fd17 	bl	8000168 <__aeabi_dsub>
 800b73a:	4602      	mov	r2, r0
 800b73c:	460b      	mov	r3, r1
 800b73e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b742:	4633      	mov	r3, r6
 800b744:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b746:	f7f5 f957 	bl	80009f8 <__aeabi_dcmpgt>
 800b74a:	2800      	cmp	r0, #0
 800b74c:	f040 829c 	bne.w	800bc88 <_dtoa_r+0x998>
 800b750:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b754:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800b756:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800b75a:	f7f5 f92f 	bl	80009bc <__aeabi_dcmplt>
 800b75e:	2800      	cmp	r0, #0
 800b760:	f040 8290 	bne.w	800bc84 <_dtoa_r+0x994>
 800b764:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 800b768:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800b76c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b76e:	2b00      	cmp	r3, #0
 800b770:	f2c0 8152 	blt.w	800ba18 <_dtoa_r+0x728>
 800b774:	f1ba 0f0e 	cmp.w	sl, #14
 800b778:	f300 814e 	bgt.w	800ba18 <_dtoa_r+0x728>
 800b77c:	4b45      	ldr	r3, [pc, #276]	; (800b894 <_dtoa_r+0x5a4>)
 800b77e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b782:	e9d3 3400 	ldrd	r3, r4, [r3]
 800b786:	e9cd 3406 	strd	r3, r4, [sp, #24]
 800b78a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800b78c:	2b00      	cmp	r3, #0
 800b78e:	f280 80db 	bge.w	800b948 <_dtoa_r+0x658>
 800b792:	9b08      	ldr	r3, [sp, #32]
 800b794:	2b00      	cmp	r3, #0
 800b796:	f300 80d7 	bgt.w	800b948 <_dtoa_r+0x658>
 800b79a:	f040 8272 	bne.w	800bc82 <_dtoa_r+0x992>
 800b79e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7a2:	2200      	movs	r2, #0
 800b7a4:	4b40      	ldr	r3, [pc, #256]	; (800b8a8 <_dtoa_r+0x5b8>)
 800b7a6:	f7f4 fe97 	bl	80004d8 <__aeabi_dmul>
 800b7aa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b7ae:	f7f5 f919 	bl	80009e4 <__aeabi_dcmpge>
 800b7b2:	9c08      	ldr	r4, [sp, #32]
 800b7b4:	4626      	mov	r6, r4
 800b7b6:	2800      	cmp	r0, #0
 800b7b8:	f040 8248 	bne.w	800bc4c <_dtoa_r+0x95c>
 800b7bc:	2331      	movs	r3, #49	; 0x31
 800b7be:	9f03      	ldr	r7, [sp, #12]
 800b7c0:	f10a 0a01 	add.w	sl, sl, #1
 800b7c4:	f807 3b01 	strb.w	r3, [r7], #1
 800b7c8:	e244      	b.n	800bc54 <_dtoa_r+0x964>
 800b7ca:	07e2      	lsls	r2, r4, #31
 800b7cc:	d505      	bpl.n	800b7da <_dtoa_r+0x4ea>
 800b7ce:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b7d2:	f7f4 fe81 	bl	80004d8 <__aeabi_dmul>
 800b7d6:	2301      	movs	r3, #1
 800b7d8:	3701      	adds	r7, #1
 800b7da:	1064      	asrs	r4, r4, #1
 800b7dc:	3608      	adds	r6, #8
 800b7de:	e76d      	b.n	800b6bc <_dtoa_r+0x3cc>
 800b7e0:	2702      	movs	r7, #2
 800b7e2:	e770      	b.n	800b6c6 <_dtoa_r+0x3d6>
 800b7e4:	46d0      	mov	r8, sl
 800b7e6:	9c08      	ldr	r4, [sp, #32]
 800b7e8:	e78f      	b.n	800b70a <_dtoa_r+0x41a>
 800b7ea:	9903      	ldr	r1, [sp, #12]
 800b7ec:	4b29      	ldr	r3, [pc, #164]	; (800b894 <_dtoa_r+0x5a4>)
 800b7ee:	4421      	add	r1, r4
 800b7f0:	9112      	str	r1, [sp, #72]	; 0x48
 800b7f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b7f4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800b7f8:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800b7fc:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b800:	2900      	cmp	r1, #0
 800b802:	d055      	beq.n	800b8b0 <_dtoa_r+0x5c0>
 800b804:	2000      	movs	r0, #0
 800b806:	4929      	ldr	r1, [pc, #164]	; (800b8ac <_dtoa_r+0x5bc>)
 800b808:	f7f4 ff90 	bl	800072c <__aeabi_ddiv>
 800b80c:	463b      	mov	r3, r7
 800b80e:	4632      	mov	r2, r6
 800b810:	f7f4 fcaa 	bl	8000168 <__aeabi_dsub>
 800b814:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b818:	9f03      	ldr	r7, [sp, #12]
 800b81a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b81e:	f7f5 f90b 	bl	8000a38 <__aeabi_d2iz>
 800b822:	4604      	mov	r4, r0
 800b824:	f7f4 fdee 	bl	8000404 <__aeabi_i2d>
 800b828:	4602      	mov	r2, r0
 800b82a:	460b      	mov	r3, r1
 800b82c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b830:	f7f4 fc9a 	bl	8000168 <__aeabi_dsub>
 800b834:	4602      	mov	r2, r0
 800b836:	460b      	mov	r3, r1
 800b838:	3430      	adds	r4, #48	; 0x30
 800b83a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b83e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b842:	f807 4b01 	strb.w	r4, [r7], #1
 800b846:	f7f5 f8b9 	bl	80009bc <__aeabi_dcmplt>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	d174      	bne.n	800b938 <_dtoa_r+0x648>
 800b84e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b852:	2000      	movs	r0, #0
 800b854:	4911      	ldr	r1, [pc, #68]	; (800b89c <_dtoa_r+0x5ac>)
 800b856:	f7f4 fc87 	bl	8000168 <__aeabi_dsub>
 800b85a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b85e:	f7f5 f8ad 	bl	80009bc <__aeabi_dcmplt>
 800b862:	2800      	cmp	r0, #0
 800b864:	f040 80b7 	bne.w	800b9d6 <_dtoa_r+0x6e6>
 800b868:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b86a:	429f      	cmp	r7, r3
 800b86c:	f43f af7a 	beq.w	800b764 <_dtoa_r+0x474>
 800b870:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b874:	2200      	movs	r2, #0
 800b876:	4b0a      	ldr	r3, [pc, #40]	; (800b8a0 <_dtoa_r+0x5b0>)
 800b878:	f7f4 fe2e 	bl	80004d8 <__aeabi_dmul>
 800b87c:	2200      	movs	r2, #0
 800b87e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b882:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b886:	4b06      	ldr	r3, [pc, #24]	; (800b8a0 <_dtoa_r+0x5b0>)
 800b888:	f7f4 fe26 	bl	80004d8 <__aeabi_dmul>
 800b88c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b890:	e7c3      	b.n	800b81a <_dtoa_r+0x52a>
 800b892:	bf00      	nop
 800b894:	0800fbf8 	.word	0x0800fbf8
 800b898:	0800fbd0 	.word	0x0800fbd0
 800b89c:	3ff00000 	.word	0x3ff00000
 800b8a0:	40240000 	.word	0x40240000
 800b8a4:	401c0000 	.word	0x401c0000
 800b8a8:	40140000 	.word	0x40140000
 800b8ac:	3fe00000 	.word	0x3fe00000
 800b8b0:	4630      	mov	r0, r6
 800b8b2:	4639      	mov	r1, r7
 800b8b4:	f7f4 fe10 	bl	80004d8 <__aeabi_dmul>
 800b8b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8ba:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800b8be:	9c03      	ldr	r4, [sp, #12]
 800b8c0:	9314      	str	r3, [sp, #80]	; 0x50
 800b8c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8c6:	f7f5 f8b7 	bl	8000a38 <__aeabi_d2iz>
 800b8ca:	9015      	str	r0, [sp, #84]	; 0x54
 800b8cc:	f7f4 fd9a 	bl	8000404 <__aeabi_i2d>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8d8:	f7f4 fc46 	bl	8000168 <__aeabi_dsub>
 800b8dc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b8de:	4606      	mov	r6, r0
 800b8e0:	3330      	adds	r3, #48	; 0x30
 800b8e2:	f804 3b01 	strb.w	r3, [r4], #1
 800b8e6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800b8e8:	460f      	mov	r7, r1
 800b8ea:	429c      	cmp	r4, r3
 800b8ec:	f04f 0200 	mov.w	r2, #0
 800b8f0:	d124      	bne.n	800b93c <_dtoa_r+0x64c>
 800b8f2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800b8f6:	4bb0      	ldr	r3, [pc, #704]	; (800bbb8 <_dtoa_r+0x8c8>)
 800b8f8:	f7f4 fc38 	bl	800016c <__adddf3>
 800b8fc:	4602      	mov	r2, r0
 800b8fe:	460b      	mov	r3, r1
 800b900:	4630      	mov	r0, r6
 800b902:	4639      	mov	r1, r7
 800b904:	f7f5 f878 	bl	80009f8 <__aeabi_dcmpgt>
 800b908:	2800      	cmp	r0, #0
 800b90a:	d163      	bne.n	800b9d4 <_dtoa_r+0x6e4>
 800b90c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b910:	2000      	movs	r0, #0
 800b912:	49a9      	ldr	r1, [pc, #676]	; (800bbb8 <_dtoa_r+0x8c8>)
 800b914:	f7f4 fc28 	bl	8000168 <__aeabi_dsub>
 800b918:	4602      	mov	r2, r0
 800b91a:	460b      	mov	r3, r1
 800b91c:	4630      	mov	r0, r6
 800b91e:	4639      	mov	r1, r7
 800b920:	f7f5 f84c 	bl	80009bc <__aeabi_dcmplt>
 800b924:	2800      	cmp	r0, #0
 800b926:	f43f af1d 	beq.w	800b764 <_dtoa_r+0x474>
 800b92a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800b92c:	1e7b      	subs	r3, r7, #1
 800b92e:	9314      	str	r3, [sp, #80]	; 0x50
 800b930:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800b934:	2b30      	cmp	r3, #48	; 0x30
 800b936:	d0f8      	beq.n	800b92a <_dtoa_r+0x63a>
 800b938:	46c2      	mov	sl, r8
 800b93a:	e03b      	b.n	800b9b4 <_dtoa_r+0x6c4>
 800b93c:	4b9f      	ldr	r3, [pc, #636]	; (800bbbc <_dtoa_r+0x8cc>)
 800b93e:	f7f4 fdcb 	bl	80004d8 <__aeabi_dmul>
 800b942:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b946:	e7bc      	b.n	800b8c2 <_dtoa_r+0x5d2>
 800b948:	9f03      	ldr	r7, [sp, #12]
 800b94a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800b94e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b952:	4640      	mov	r0, r8
 800b954:	4649      	mov	r1, r9
 800b956:	f7f4 fee9 	bl	800072c <__aeabi_ddiv>
 800b95a:	f7f5 f86d 	bl	8000a38 <__aeabi_d2iz>
 800b95e:	4604      	mov	r4, r0
 800b960:	f7f4 fd50 	bl	8000404 <__aeabi_i2d>
 800b964:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b968:	f7f4 fdb6 	bl	80004d8 <__aeabi_dmul>
 800b96c:	4602      	mov	r2, r0
 800b96e:	460b      	mov	r3, r1
 800b970:	4640      	mov	r0, r8
 800b972:	4649      	mov	r1, r9
 800b974:	f7f4 fbf8 	bl	8000168 <__aeabi_dsub>
 800b978:	f104 0630 	add.w	r6, r4, #48	; 0x30
 800b97c:	f807 6b01 	strb.w	r6, [r7], #1
 800b980:	9e03      	ldr	r6, [sp, #12]
 800b982:	f8dd c020 	ldr.w	ip, [sp, #32]
 800b986:	1bbe      	subs	r6, r7, r6
 800b988:	45b4      	cmp	ip, r6
 800b98a:	4602      	mov	r2, r0
 800b98c:	460b      	mov	r3, r1
 800b98e:	d136      	bne.n	800b9fe <_dtoa_r+0x70e>
 800b990:	f7f4 fbec 	bl	800016c <__adddf3>
 800b994:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b998:	4680      	mov	r8, r0
 800b99a:	4689      	mov	r9, r1
 800b99c:	f7f5 f82c 	bl	80009f8 <__aeabi_dcmpgt>
 800b9a0:	bb58      	cbnz	r0, 800b9fa <_dtoa_r+0x70a>
 800b9a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b9a6:	4640      	mov	r0, r8
 800b9a8:	4649      	mov	r1, r9
 800b9aa:	f7f4 fffd 	bl	80009a8 <__aeabi_dcmpeq>
 800b9ae:	b108      	cbz	r0, 800b9b4 <_dtoa_r+0x6c4>
 800b9b0:	07e1      	lsls	r1, r4, #31
 800b9b2:	d422      	bmi.n	800b9fa <_dtoa_r+0x70a>
 800b9b4:	4628      	mov	r0, r5
 800b9b6:	4659      	mov	r1, fp
 800b9b8:	f001 f88e 	bl	800cad8 <_Bfree>
 800b9bc:	2300      	movs	r3, #0
 800b9be:	703b      	strb	r3, [r7, #0]
 800b9c0:	9b24      	ldr	r3, [sp, #144]	; 0x90
 800b9c2:	f10a 0001 	add.w	r0, sl, #1
 800b9c6:	6018      	str	r0, [r3, #0]
 800b9c8:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	f43f acde 	beq.w	800b38c <_dtoa_r+0x9c>
 800b9d0:	601f      	str	r7, [r3, #0]
 800b9d2:	e4db      	b.n	800b38c <_dtoa_r+0x9c>
 800b9d4:	4627      	mov	r7, r4
 800b9d6:	463b      	mov	r3, r7
 800b9d8:	461f      	mov	r7, r3
 800b9da:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b9de:	2a39      	cmp	r2, #57	; 0x39
 800b9e0:	d107      	bne.n	800b9f2 <_dtoa_r+0x702>
 800b9e2:	9a03      	ldr	r2, [sp, #12]
 800b9e4:	429a      	cmp	r2, r3
 800b9e6:	d1f7      	bne.n	800b9d8 <_dtoa_r+0x6e8>
 800b9e8:	2230      	movs	r2, #48	; 0x30
 800b9ea:	9903      	ldr	r1, [sp, #12]
 800b9ec:	f108 0801 	add.w	r8, r8, #1
 800b9f0:	700a      	strb	r2, [r1, #0]
 800b9f2:	781a      	ldrb	r2, [r3, #0]
 800b9f4:	3201      	adds	r2, #1
 800b9f6:	701a      	strb	r2, [r3, #0]
 800b9f8:	e79e      	b.n	800b938 <_dtoa_r+0x648>
 800b9fa:	46d0      	mov	r8, sl
 800b9fc:	e7eb      	b.n	800b9d6 <_dtoa_r+0x6e6>
 800b9fe:	2200      	movs	r2, #0
 800ba00:	4b6e      	ldr	r3, [pc, #440]	; (800bbbc <_dtoa_r+0x8cc>)
 800ba02:	f7f4 fd69 	bl	80004d8 <__aeabi_dmul>
 800ba06:	2200      	movs	r2, #0
 800ba08:	2300      	movs	r3, #0
 800ba0a:	4680      	mov	r8, r0
 800ba0c:	4689      	mov	r9, r1
 800ba0e:	f7f4 ffcb 	bl	80009a8 <__aeabi_dcmpeq>
 800ba12:	2800      	cmp	r0, #0
 800ba14:	d09b      	beq.n	800b94e <_dtoa_r+0x65e>
 800ba16:	e7cd      	b.n	800b9b4 <_dtoa_r+0x6c4>
 800ba18:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ba1a:	2a00      	cmp	r2, #0
 800ba1c:	f000 80d0 	beq.w	800bbc0 <_dtoa_r+0x8d0>
 800ba20:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800ba22:	2a01      	cmp	r2, #1
 800ba24:	f300 80ae 	bgt.w	800bb84 <_dtoa_r+0x894>
 800ba28:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ba2a:	2a00      	cmp	r2, #0
 800ba2c:	f000 80a6 	beq.w	800bb7c <_dtoa_r+0x88c>
 800ba30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800ba34:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800ba36:	9f06      	ldr	r7, [sp, #24]
 800ba38:	9a06      	ldr	r2, [sp, #24]
 800ba3a:	2101      	movs	r1, #1
 800ba3c:	441a      	add	r2, r3
 800ba3e:	9206      	str	r2, [sp, #24]
 800ba40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba42:	4628      	mov	r0, r5
 800ba44:	441a      	add	r2, r3
 800ba46:	9209      	str	r2, [sp, #36]	; 0x24
 800ba48:	f001 f946 	bl	800ccd8 <__i2b>
 800ba4c:	4606      	mov	r6, r0
 800ba4e:	2f00      	cmp	r7, #0
 800ba50:	dd0c      	ble.n	800ba6c <_dtoa_r+0x77c>
 800ba52:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ba54:	2b00      	cmp	r3, #0
 800ba56:	dd09      	ble.n	800ba6c <_dtoa_r+0x77c>
 800ba58:	42bb      	cmp	r3, r7
 800ba5a:	bfa8      	it	ge
 800ba5c:	463b      	movge	r3, r7
 800ba5e:	9a06      	ldr	r2, [sp, #24]
 800ba60:	1aff      	subs	r7, r7, r3
 800ba62:	1ad2      	subs	r2, r2, r3
 800ba64:	9206      	str	r2, [sp, #24]
 800ba66:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba68:	1ad3      	subs	r3, r2, r3
 800ba6a:	9309      	str	r3, [sp, #36]	; 0x24
 800ba6c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ba6e:	b1f3      	cbz	r3, 800baae <_dtoa_r+0x7be>
 800ba70:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ba72:	2b00      	cmp	r3, #0
 800ba74:	f000 80a8 	beq.w	800bbc8 <_dtoa_r+0x8d8>
 800ba78:	2c00      	cmp	r4, #0
 800ba7a:	dd10      	ble.n	800ba9e <_dtoa_r+0x7ae>
 800ba7c:	4631      	mov	r1, r6
 800ba7e:	4622      	mov	r2, r4
 800ba80:	4628      	mov	r0, r5
 800ba82:	f001 f9e7 	bl	800ce54 <__pow5mult>
 800ba86:	465a      	mov	r2, fp
 800ba88:	4601      	mov	r1, r0
 800ba8a:	4606      	mov	r6, r0
 800ba8c:	4628      	mov	r0, r5
 800ba8e:	f001 f939 	bl	800cd04 <__multiply>
 800ba92:	4680      	mov	r8, r0
 800ba94:	4659      	mov	r1, fp
 800ba96:	4628      	mov	r0, r5
 800ba98:	f001 f81e 	bl	800cad8 <_Bfree>
 800ba9c:	46c3      	mov	fp, r8
 800ba9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baa0:	1b1a      	subs	r2, r3, r4
 800baa2:	d004      	beq.n	800baae <_dtoa_r+0x7be>
 800baa4:	4659      	mov	r1, fp
 800baa6:	4628      	mov	r0, r5
 800baa8:	f001 f9d4 	bl	800ce54 <__pow5mult>
 800baac:	4683      	mov	fp, r0
 800baae:	2101      	movs	r1, #1
 800bab0:	4628      	mov	r0, r5
 800bab2:	f001 f911 	bl	800ccd8 <__i2b>
 800bab6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bab8:	4604      	mov	r4, r0
 800baba:	2b00      	cmp	r3, #0
 800babc:	f340 8086 	ble.w	800bbcc <_dtoa_r+0x8dc>
 800bac0:	461a      	mov	r2, r3
 800bac2:	4601      	mov	r1, r0
 800bac4:	4628      	mov	r0, r5
 800bac6:	f001 f9c5 	bl	800ce54 <__pow5mult>
 800baca:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bacc:	4604      	mov	r4, r0
 800bace:	2b01      	cmp	r3, #1
 800bad0:	dd7f      	ble.n	800bbd2 <_dtoa_r+0x8e2>
 800bad2:	f04f 0800 	mov.w	r8, #0
 800bad6:	6923      	ldr	r3, [r4, #16]
 800bad8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800badc:	6918      	ldr	r0, [r3, #16]
 800bade:	f001 f8ad 	bl	800cc3c <__hi0bits>
 800bae2:	f1c0 0020 	rsb	r0, r0, #32
 800bae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bae8:	4418      	add	r0, r3
 800baea:	f010 001f 	ands.w	r0, r0, #31
 800baee:	f000 8092 	beq.w	800bc16 <_dtoa_r+0x926>
 800baf2:	f1c0 0320 	rsb	r3, r0, #32
 800baf6:	2b04      	cmp	r3, #4
 800baf8:	f340 808a 	ble.w	800bc10 <_dtoa_r+0x920>
 800bafc:	f1c0 001c 	rsb	r0, r0, #28
 800bb00:	9b06      	ldr	r3, [sp, #24]
 800bb02:	4407      	add	r7, r0
 800bb04:	4403      	add	r3, r0
 800bb06:	9306      	str	r3, [sp, #24]
 800bb08:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb0a:	4403      	add	r3, r0
 800bb0c:	9309      	str	r3, [sp, #36]	; 0x24
 800bb0e:	9b06      	ldr	r3, [sp, #24]
 800bb10:	2b00      	cmp	r3, #0
 800bb12:	dd05      	ble.n	800bb20 <_dtoa_r+0x830>
 800bb14:	4659      	mov	r1, fp
 800bb16:	461a      	mov	r2, r3
 800bb18:	4628      	mov	r0, r5
 800bb1a:	f001 f9f5 	bl	800cf08 <__lshift>
 800bb1e:	4683      	mov	fp, r0
 800bb20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb22:	2b00      	cmp	r3, #0
 800bb24:	dd05      	ble.n	800bb32 <_dtoa_r+0x842>
 800bb26:	4621      	mov	r1, r4
 800bb28:	461a      	mov	r2, r3
 800bb2a:	4628      	mov	r0, r5
 800bb2c:	f001 f9ec 	bl	800cf08 <__lshift>
 800bb30:	4604      	mov	r4, r0
 800bb32:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800bb34:	2b00      	cmp	r3, #0
 800bb36:	d070      	beq.n	800bc1a <_dtoa_r+0x92a>
 800bb38:	4621      	mov	r1, r4
 800bb3a:	4658      	mov	r0, fp
 800bb3c:	f001 fa54 	bl	800cfe8 <__mcmp>
 800bb40:	2800      	cmp	r0, #0
 800bb42:	da6a      	bge.n	800bc1a <_dtoa_r+0x92a>
 800bb44:	2300      	movs	r3, #0
 800bb46:	4659      	mov	r1, fp
 800bb48:	220a      	movs	r2, #10
 800bb4a:	4628      	mov	r0, r5
 800bb4c:	f000 ffe6 	bl	800cb1c <__multadd>
 800bb50:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bb52:	4683      	mov	fp, r0
 800bb54:	f10a 3aff 	add.w	sl, sl, #4294967295
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	f000 8194 	beq.w	800be86 <_dtoa_r+0xb96>
 800bb5e:	4631      	mov	r1, r6
 800bb60:	2300      	movs	r3, #0
 800bb62:	220a      	movs	r2, #10
 800bb64:	4628      	mov	r0, r5
 800bb66:	f000 ffd9 	bl	800cb1c <__multadd>
 800bb6a:	f1b9 0f00 	cmp.w	r9, #0
 800bb6e:	4606      	mov	r6, r0
 800bb70:	f300 8093 	bgt.w	800bc9a <_dtoa_r+0x9aa>
 800bb74:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bb76:	2b02      	cmp	r3, #2
 800bb78:	dc57      	bgt.n	800bc2a <_dtoa_r+0x93a>
 800bb7a:	e08e      	b.n	800bc9a <_dtoa_r+0x9aa>
 800bb7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800bb7e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800bb82:	e757      	b.n	800ba34 <_dtoa_r+0x744>
 800bb84:	9b08      	ldr	r3, [sp, #32]
 800bb86:	1e5c      	subs	r4, r3, #1
 800bb88:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bb8a:	42a3      	cmp	r3, r4
 800bb8c:	bfb7      	itett	lt
 800bb8e:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800bb90:	1b1c      	subge	r4, r3, r4
 800bb92:	1ae2      	sublt	r2, r4, r3
 800bb94:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 800bb96:	bfbe      	ittt	lt
 800bb98:	940a      	strlt	r4, [sp, #40]	; 0x28
 800bb9a:	189b      	addlt	r3, r3, r2
 800bb9c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800bb9e:	9b08      	ldr	r3, [sp, #32]
 800bba0:	bfb8      	it	lt
 800bba2:	2400      	movlt	r4, #0
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	bfbb      	ittet	lt
 800bba8:	9b06      	ldrlt	r3, [sp, #24]
 800bbaa:	9a08      	ldrlt	r2, [sp, #32]
 800bbac:	9f06      	ldrge	r7, [sp, #24]
 800bbae:	1a9f      	sublt	r7, r3, r2
 800bbb0:	bfac      	ite	ge
 800bbb2:	9b08      	ldrge	r3, [sp, #32]
 800bbb4:	2300      	movlt	r3, #0
 800bbb6:	e73f      	b.n	800ba38 <_dtoa_r+0x748>
 800bbb8:	3fe00000 	.word	0x3fe00000
 800bbbc:	40240000 	.word	0x40240000
 800bbc0:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800bbc2:	9f06      	ldr	r7, [sp, #24]
 800bbc4:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800bbc6:	e742      	b.n	800ba4e <_dtoa_r+0x75e>
 800bbc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bbca:	e76b      	b.n	800baa4 <_dtoa_r+0x7b4>
 800bbcc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bbce:	2b01      	cmp	r3, #1
 800bbd0:	dc19      	bgt.n	800bc06 <_dtoa_r+0x916>
 800bbd2:	9b04      	ldr	r3, [sp, #16]
 800bbd4:	b9bb      	cbnz	r3, 800bc06 <_dtoa_r+0x916>
 800bbd6:	9b05      	ldr	r3, [sp, #20]
 800bbd8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bbdc:	b99b      	cbnz	r3, 800bc06 <_dtoa_r+0x916>
 800bbde:	9b05      	ldr	r3, [sp, #20]
 800bbe0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800bbe4:	0d1b      	lsrs	r3, r3, #20
 800bbe6:	051b      	lsls	r3, r3, #20
 800bbe8:	b183      	cbz	r3, 800bc0c <_dtoa_r+0x91c>
 800bbea:	f04f 0801 	mov.w	r8, #1
 800bbee:	9b06      	ldr	r3, [sp, #24]
 800bbf0:	3301      	adds	r3, #1
 800bbf2:	9306      	str	r3, [sp, #24]
 800bbf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bbf6:	3301      	adds	r3, #1
 800bbf8:	9309      	str	r3, [sp, #36]	; 0x24
 800bbfa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800bbfc:	2b00      	cmp	r3, #0
 800bbfe:	f47f af6a 	bne.w	800bad6 <_dtoa_r+0x7e6>
 800bc02:	2001      	movs	r0, #1
 800bc04:	e76f      	b.n	800bae6 <_dtoa_r+0x7f6>
 800bc06:	f04f 0800 	mov.w	r8, #0
 800bc0a:	e7f6      	b.n	800bbfa <_dtoa_r+0x90a>
 800bc0c:	4698      	mov	r8, r3
 800bc0e:	e7f4      	b.n	800bbfa <_dtoa_r+0x90a>
 800bc10:	f43f af7d 	beq.w	800bb0e <_dtoa_r+0x81e>
 800bc14:	4618      	mov	r0, r3
 800bc16:	301c      	adds	r0, #28
 800bc18:	e772      	b.n	800bb00 <_dtoa_r+0x810>
 800bc1a:	9b08      	ldr	r3, [sp, #32]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	dc36      	bgt.n	800bc8e <_dtoa_r+0x99e>
 800bc20:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bc22:	2b02      	cmp	r3, #2
 800bc24:	dd33      	ble.n	800bc8e <_dtoa_r+0x99e>
 800bc26:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc2a:	f1b9 0f00 	cmp.w	r9, #0
 800bc2e:	d10d      	bne.n	800bc4c <_dtoa_r+0x95c>
 800bc30:	4621      	mov	r1, r4
 800bc32:	464b      	mov	r3, r9
 800bc34:	2205      	movs	r2, #5
 800bc36:	4628      	mov	r0, r5
 800bc38:	f000 ff70 	bl	800cb1c <__multadd>
 800bc3c:	4601      	mov	r1, r0
 800bc3e:	4604      	mov	r4, r0
 800bc40:	4658      	mov	r0, fp
 800bc42:	f001 f9d1 	bl	800cfe8 <__mcmp>
 800bc46:	2800      	cmp	r0, #0
 800bc48:	f73f adb8 	bgt.w	800b7bc <_dtoa_r+0x4cc>
 800bc4c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800bc4e:	9f03      	ldr	r7, [sp, #12]
 800bc50:	ea6f 0a03 	mvn.w	sl, r3
 800bc54:	f04f 0800 	mov.w	r8, #0
 800bc58:	4621      	mov	r1, r4
 800bc5a:	4628      	mov	r0, r5
 800bc5c:	f000 ff3c 	bl	800cad8 <_Bfree>
 800bc60:	2e00      	cmp	r6, #0
 800bc62:	f43f aea7 	beq.w	800b9b4 <_dtoa_r+0x6c4>
 800bc66:	f1b8 0f00 	cmp.w	r8, #0
 800bc6a:	d005      	beq.n	800bc78 <_dtoa_r+0x988>
 800bc6c:	45b0      	cmp	r8, r6
 800bc6e:	d003      	beq.n	800bc78 <_dtoa_r+0x988>
 800bc70:	4641      	mov	r1, r8
 800bc72:	4628      	mov	r0, r5
 800bc74:	f000 ff30 	bl	800cad8 <_Bfree>
 800bc78:	4631      	mov	r1, r6
 800bc7a:	4628      	mov	r0, r5
 800bc7c:	f000 ff2c 	bl	800cad8 <_Bfree>
 800bc80:	e698      	b.n	800b9b4 <_dtoa_r+0x6c4>
 800bc82:	2400      	movs	r4, #0
 800bc84:	4626      	mov	r6, r4
 800bc86:	e7e1      	b.n	800bc4c <_dtoa_r+0x95c>
 800bc88:	46c2      	mov	sl, r8
 800bc8a:	4626      	mov	r6, r4
 800bc8c:	e596      	b.n	800b7bc <_dtoa_r+0x4cc>
 800bc8e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bc90:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bc94:	2b00      	cmp	r3, #0
 800bc96:	f000 80fd 	beq.w	800be94 <_dtoa_r+0xba4>
 800bc9a:	2f00      	cmp	r7, #0
 800bc9c:	dd05      	ble.n	800bcaa <_dtoa_r+0x9ba>
 800bc9e:	4631      	mov	r1, r6
 800bca0:	463a      	mov	r2, r7
 800bca2:	4628      	mov	r0, r5
 800bca4:	f001 f930 	bl	800cf08 <__lshift>
 800bca8:	4606      	mov	r6, r0
 800bcaa:	f1b8 0f00 	cmp.w	r8, #0
 800bcae:	d05c      	beq.n	800bd6a <_dtoa_r+0xa7a>
 800bcb0:	4628      	mov	r0, r5
 800bcb2:	6871      	ldr	r1, [r6, #4]
 800bcb4:	f000 fed0 	bl	800ca58 <_Balloc>
 800bcb8:	4607      	mov	r7, r0
 800bcba:	b928      	cbnz	r0, 800bcc8 <_dtoa_r+0x9d8>
 800bcbc:	4602      	mov	r2, r0
 800bcbe:	f240 21ea 	movw	r1, #746	; 0x2ea
 800bcc2:	4b7f      	ldr	r3, [pc, #508]	; (800bec0 <_dtoa_r+0xbd0>)
 800bcc4:	f7ff bb28 	b.w	800b318 <_dtoa_r+0x28>
 800bcc8:	6932      	ldr	r2, [r6, #16]
 800bcca:	f106 010c 	add.w	r1, r6, #12
 800bcce:	3202      	adds	r2, #2
 800bcd0:	0092      	lsls	r2, r2, #2
 800bcd2:	300c      	adds	r0, #12
 800bcd4:	f7fd fa40 	bl	8009158 <memcpy>
 800bcd8:	2201      	movs	r2, #1
 800bcda:	4639      	mov	r1, r7
 800bcdc:	4628      	mov	r0, r5
 800bcde:	f001 f913 	bl	800cf08 <__lshift>
 800bce2:	46b0      	mov	r8, r6
 800bce4:	4606      	mov	r6, r0
 800bce6:	9b03      	ldr	r3, [sp, #12]
 800bce8:	3301      	adds	r3, #1
 800bcea:	9308      	str	r3, [sp, #32]
 800bcec:	9b03      	ldr	r3, [sp, #12]
 800bcee:	444b      	add	r3, r9
 800bcf0:	930a      	str	r3, [sp, #40]	; 0x28
 800bcf2:	9b04      	ldr	r3, [sp, #16]
 800bcf4:	f003 0301 	and.w	r3, r3, #1
 800bcf8:	9309      	str	r3, [sp, #36]	; 0x24
 800bcfa:	9b08      	ldr	r3, [sp, #32]
 800bcfc:	4621      	mov	r1, r4
 800bcfe:	3b01      	subs	r3, #1
 800bd00:	4658      	mov	r0, fp
 800bd02:	9304      	str	r3, [sp, #16]
 800bd04:	f7ff fa66 	bl	800b1d4 <quorem>
 800bd08:	4603      	mov	r3, r0
 800bd0a:	4641      	mov	r1, r8
 800bd0c:	3330      	adds	r3, #48	; 0x30
 800bd0e:	9006      	str	r0, [sp, #24]
 800bd10:	4658      	mov	r0, fp
 800bd12:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd14:	f001 f968 	bl	800cfe8 <__mcmp>
 800bd18:	4632      	mov	r2, r6
 800bd1a:	4681      	mov	r9, r0
 800bd1c:	4621      	mov	r1, r4
 800bd1e:	4628      	mov	r0, r5
 800bd20:	f001 f97e 	bl	800d020 <__mdiff>
 800bd24:	68c2      	ldr	r2, [r0, #12]
 800bd26:	4607      	mov	r7, r0
 800bd28:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd2a:	bb02      	cbnz	r2, 800bd6e <_dtoa_r+0xa7e>
 800bd2c:	4601      	mov	r1, r0
 800bd2e:	4658      	mov	r0, fp
 800bd30:	f001 f95a 	bl	800cfe8 <__mcmp>
 800bd34:	4602      	mov	r2, r0
 800bd36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd38:	4639      	mov	r1, r7
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 800bd40:	f000 feca 	bl	800cad8 <_Bfree>
 800bd44:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800bd46:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd48:	9f08      	ldr	r7, [sp, #32]
 800bd4a:	ea43 0102 	orr.w	r1, r3, r2
 800bd4e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bd50:	430b      	orrs	r3, r1
 800bd52:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd54:	d10d      	bne.n	800bd72 <_dtoa_r+0xa82>
 800bd56:	2b39      	cmp	r3, #57	; 0x39
 800bd58:	d029      	beq.n	800bdae <_dtoa_r+0xabe>
 800bd5a:	f1b9 0f00 	cmp.w	r9, #0
 800bd5e:	dd01      	ble.n	800bd64 <_dtoa_r+0xa74>
 800bd60:	9b06      	ldr	r3, [sp, #24]
 800bd62:	3331      	adds	r3, #49	; 0x31
 800bd64:	9a04      	ldr	r2, [sp, #16]
 800bd66:	7013      	strb	r3, [r2, #0]
 800bd68:	e776      	b.n	800bc58 <_dtoa_r+0x968>
 800bd6a:	4630      	mov	r0, r6
 800bd6c:	e7b9      	b.n	800bce2 <_dtoa_r+0x9f2>
 800bd6e:	2201      	movs	r2, #1
 800bd70:	e7e2      	b.n	800bd38 <_dtoa_r+0xa48>
 800bd72:	f1b9 0f00 	cmp.w	r9, #0
 800bd76:	db06      	blt.n	800bd86 <_dtoa_r+0xa96>
 800bd78:	9922      	ldr	r1, [sp, #136]	; 0x88
 800bd7a:	ea41 0909 	orr.w	r9, r1, r9
 800bd7e:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd80:	ea59 0101 	orrs.w	r1, r9, r1
 800bd84:	d120      	bne.n	800bdc8 <_dtoa_r+0xad8>
 800bd86:	2a00      	cmp	r2, #0
 800bd88:	ddec      	ble.n	800bd64 <_dtoa_r+0xa74>
 800bd8a:	4659      	mov	r1, fp
 800bd8c:	2201      	movs	r2, #1
 800bd8e:	4628      	mov	r0, r5
 800bd90:	9308      	str	r3, [sp, #32]
 800bd92:	f001 f8b9 	bl	800cf08 <__lshift>
 800bd96:	4621      	mov	r1, r4
 800bd98:	4683      	mov	fp, r0
 800bd9a:	f001 f925 	bl	800cfe8 <__mcmp>
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	9b08      	ldr	r3, [sp, #32]
 800bda2:	dc02      	bgt.n	800bdaa <_dtoa_r+0xaba>
 800bda4:	d1de      	bne.n	800bd64 <_dtoa_r+0xa74>
 800bda6:	07da      	lsls	r2, r3, #31
 800bda8:	d5dc      	bpl.n	800bd64 <_dtoa_r+0xa74>
 800bdaa:	2b39      	cmp	r3, #57	; 0x39
 800bdac:	d1d8      	bne.n	800bd60 <_dtoa_r+0xa70>
 800bdae:	2339      	movs	r3, #57	; 0x39
 800bdb0:	9a04      	ldr	r2, [sp, #16]
 800bdb2:	7013      	strb	r3, [r2, #0]
 800bdb4:	463b      	mov	r3, r7
 800bdb6:	461f      	mov	r7, r3
 800bdb8:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 800bdbc:	3b01      	subs	r3, #1
 800bdbe:	2a39      	cmp	r2, #57	; 0x39
 800bdc0:	d050      	beq.n	800be64 <_dtoa_r+0xb74>
 800bdc2:	3201      	adds	r2, #1
 800bdc4:	701a      	strb	r2, [r3, #0]
 800bdc6:	e747      	b.n	800bc58 <_dtoa_r+0x968>
 800bdc8:	2a00      	cmp	r2, #0
 800bdca:	dd03      	ble.n	800bdd4 <_dtoa_r+0xae4>
 800bdcc:	2b39      	cmp	r3, #57	; 0x39
 800bdce:	d0ee      	beq.n	800bdae <_dtoa_r+0xabe>
 800bdd0:	3301      	adds	r3, #1
 800bdd2:	e7c7      	b.n	800bd64 <_dtoa_r+0xa74>
 800bdd4:	9a08      	ldr	r2, [sp, #32]
 800bdd6:	990a      	ldr	r1, [sp, #40]	; 0x28
 800bdd8:	f802 3c01 	strb.w	r3, [r2, #-1]
 800bddc:	428a      	cmp	r2, r1
 800bdde:	d02a      	beq.n	800be36 <_dtoa_r+0xb46>
 800bde0:	4659      	mov	r1, fp
 800bde2:	2300      	movs	r3, #0
 800bde4:	220a      	movs	r2, #10
 800bde6:	4628      	mov	r0, r5
 800bde8:	f000 fe98 	bl	800cb1c <__multadd>
 800bdec:	45b0      	cmp	r8, r6
 800bdee:	4683      	mov	fp, r0
 800bdf0:	f04f 0300 	mov.w	r3, #0
 800bdf4:	f04f 020a 	mov.w	r2, #10
 800bdf8:	4641      	mov	r1, r8
 800bdfa:	4628      	mov	r0, r5
 800bdfc:	d107      	bne.n	800be0e <_dtoa_r+0xb1e>
 800bdfe:	f000 fe8d 	bl	800cb1c <__multadd>
 800be02:	4680      	mov	r8, r0
 800be04:	4606      	mov	r6, r0
 800be06:	9b08      	ldr	r3, [sp, #32]
 800be08:	3301      	adds	r3, #1
 800be0a:	9308      	str	r3, [sp, #32]
 800be0c:	e775      	b.n	800bcfa <_dtoa_r+0xa0a>
 800be0e:	f000 fe85 	bl	800cb1c <__multadd>
 800be12:	4631      	mov	r1, r6
 800be14:	4680      	mov	r8, r0
 800be16:	2300      	movs	r3, #0
 800be18:	220a      	movs	r2, #10
 800be1a:	4628      	mov	r0, r5
 800be1c:	f000 fe7e 	bl	800cb1c <__multadd>
 800be20:	4606      	mov	r6, r0
 800be22:	e7f0      	b.n	800be06 <_dtoa_r+0xb16>
 800be24:	f1b9 0f00 	cmp.w	r9, #0
 800be28:	bfcc      	ite	gt
 800be2a:	464f      	movgt	r7, r9
 800be2c:	2701      	movle	r7, #1
 800be2e:	f04f 0800 	mov.w	r8, #0
 800be32:	9a03      	ldr	r2, [sp, #12]
 800be34:	4417      	add	r7, r2
 800be36:	4659      	mov	r1, fp
 800be38:	2201      	movs	r2, #1
 800be3a:	4628      	mov	r0, r5
 800be3c:	9308      	str	r3, [sp, #32]
 800be3e:	f001 f863 	bl	800cf08 <__lshift>
 800be42:	4621      	mov	r1, r4
 800be44:	4683      	mov	fp, r0
 800be46:	f001 f8cf 	bl	800cfe8 <__mcmp>
 800be4a:	2800      	cmp	r0, #0
 800be4c:	dcb2      	bgt.n	800bdb4 <_dtoa_r+0xac4>
 800be4e:	d102      	bne.n	800be56 <_dtoa_r+0xb66>
 800be50:	9b08      	ldr	r3, [sp, #32]
 800be52:	07db      	lsls	r3, r3, #31
 800be54:	d4ae      	bmi.n	800bdb4 <_dtoa_r+0xac4>
 800be56:	463b      	mov	r3, r7
 800be58:	461f      	mov	r7, r3
 800be5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800be5e:	2a30      	cmp	r2, #48	; 0x30
 800be60:	d0fa      	beq.n	800be58 <_dtoa_r+0xb68>
 800be62:	e6f9      	b.n	800bc58 <_dtoa_r+0x968>
 800be64:	9a03      	ldr	r2, [sp, #12]
 800be66:	429a      	cmp	r2, r3
 800be68:	d1a5      	bne.n	800bdb6 <_dtoa_r+0xac6>
 800be6a:	2331      	movs	r3, #49	; 0x31
 800be6c:	f10a 0a01 	add.w	sl, sl, #1
 800be70:	e779      	b.n	800bd66 <_dtoa_r+0xa76>
 800be72:	4b14      	ldr	r3, [pc, #80]	; (800bec4 <_dtoa_r+0xbd4>)
 800be74:	f7ff baa8 	b.w	800b3c8 <_dtoa_r+0xd8>
 800be78:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	f47f aa81 	bne.w	800b382 <_dtoa_r+0x92>
 800be80:	4b11      	ldr	r3, [pc, #68]	; (800bec8 <_dtoa_r+0xbd8>)
 800be82:	f7ff baa1 	b.w	800b3c8 <_dtoa_r+0xd8>
 800be86:	f1b9 0f00 	cmp.w	r9, #0
 800be8a:	dc03      	bgt.n	800be94 <_dtoa_r+0xba4>
 800be8c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800be8e:	2b02      	cmp	r3, #2
 800be90:	f73f aecb 	bgt.w	800bc2a <_dtoa_r+0x93a>
 800be94:	9f03      	ldr	r7, [sp, #12]
 800be96:	4621      	mov	r1, r4
 800be98:	4658      	mov	r0, fp
 800be9a:	f7ff f99b 	bl	800b1d4 <quorem>
 800be9e:	9a03      	ldr	r2, [sp, #12]
 800bea0:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800bea4:	f807 3b01 	strb.w	r3, [r7], #1
 800bea8:	1aba      	subs	r2, r7, r2
 800beaa:	4591      	cmp	r9, r2
 800beac:	ddba      	ble.n	800be24 <_dtoa_r+0xb34>
 800beae:	4659      	mov	r1, fp
 800beb0:	2300      	movs	r3, #0
 800beb2:	220a      	movs	r2, #10
 800beb4:	4628      	mov	r0, r5
 800beb6:	f000 fe31 	bl	800cb1c <__multadd>
 800beba:	4683      	mov	fp, r0
 800bebc:	e7eb      	b.n	800be96 <_dtoa_r+0xba6>
 800bebe:	bf00      	nop
 800bec0:	0800fa80 	.word	0x0800fa80
 800bec4:	0800fce1 	.word	0x0800fce1
 800bec8:	0800fa01 	.word	0x0800fa01

0800becc <__sflush_r>:
 800becc:	898a      	ldrh	r2, [r1, #12]
 800bece:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bed0:	4605      	mov	r5, r0
 800bed2:	0710      	lsls	r0, r2, #28
 800bed4:	460c      	mov	r4, r1
 800bed6:	d457      	bmi.n	800bf88 <__sflush_r+0xbc>
 800bed8:	684b      	ldr	r3, [r1, #4]
 800beda:	2b00      	cmp	r3, #0
 800bedc:	dc04      	bgt.n	800bee8 <__sflush_r+0x1c>
 800bede:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	dc01      	bgt.n	800bee8 <__sflush_r+0x1c>
 800bee4:	2000      	movs	r0, #0
 800bee6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bee8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800beea:	2e00      	cmp	r6, #0
 800beec:	d0fa      	beq.n	800bee4 <__sflush_r+0x18>
 800beee:	2300      	movs	r3, #0
 800bef0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bef4:	682f      	ldr	r7, [r5, #0]
 800bef6:	602b      	str	r3, [r5, #0]
 800bef8:	d032      	beq.n	800bf60 <__sflush_r+0x94>
 800befa:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800befc:	89a3      	ldrh	r3, [r4, #12]
 800befe:	075a      	lsls	r2, r3, #29
 800bf00:	d505      	bpl.n	800bf0e <__sflush_r+0x42>
 800bf02:	6863      	ldr	r3, [r4, #4]
 800bf04:	1ac0      	subs	r0, r0, r3
 800bf06:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf08:	b10b      	cbz	r3, 800bf0e <__sflush_r+0x42>
 800bf0a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf0c:	1ac0      	subs	r0, r0, r3
 800bf0e:	2300      	movs	r3, #0
 800bf10:	4602      	mov	r2, r0
 800bf12:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf14:	4628      	mov	r0, r5
 800bf16:	6a21      	ldr	r1, [r4, #32]
 800bf18:	47b0      	blx	r6
 800bf1a:	1c43      	adds	r3, r0, #1
 800bf1c:	89a3      	ldrh	r3, [r4, #12]
 800bf1e:	d106      	bne.n	800bf2e <__sflush_r+0x62>
 800bf20:	6829      	ldr	r1, [r5, #0]
 800bf22:	291d      	cmp	r1, #29
 800bf24:	d82c      	bhi.n	800bf80 <__sflush_r+0xb4>
 800bf26:	4a29      	ldr	r2, [pc, #164]	; (800bfcc <__sflush_r+0x100>)
 800bf28:	40ca      	lsrs	r2, r1
 800bf2a:	07d6      	lsls	r6, r2, #31
 800bf2c:	d528      	bpl.n	800bf80 <__sflush_r+0xb4>
 800bf2e:	2200      	movs	r2, #0
 800bf30:	6062      	str	r2, [r4, #4]
 800bf32:	6922      	ldr	r2, [r4, #16]
 800bf34:	04d9      	lsls	r1, r3, #19
 800bf36:	6022      	str	r2, [r4, #0]
 800bf38:	d504      	bpl.n	800bf44 <__sflush_r+0x78>
 800bf3a:	1c42      	adds	r2, r0, #1
 800bf3c:	d101      	bne.n	800bf42 <__sflush_r+0x76>
 800bf3e:	682b      	ldr	r3, [r5, #0]
 800bf40:	b903      	cbnz	r3, 800bf44 <__sflush_r+0x78>
 800bf42:	6560      	str	r0, [r4, #84]	; 0x54
 800bf44:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf46:	602f      	str	r7, [r5, #0]
 800bf48:	2900      	cmp	r1, #0
 800bf4a:	d0cb      	beq.n	800bee4 <__sflush_r+0x18>
 800bf4c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf50:	4299      	cmp	r1, r3
 800bf52:	d002      	beq.n	800bf5a <__sflush_r+0x8e>
 800bf54:	4628      	mov	r0, r5
 800bf56:	f7fd f929 	bl	80091ac <_free_r>
 800bf5a:	2000      	movs	r0, #0
 800bf5c:	6360      	str	r0, [r4, #52]	; 0x34
 800bf5e:	e7c2      	b.n	800bee6 <__sflush_r+0x1a>
 800bf60:	6a21      	ldr	r1, [r4, #32]
 800bf62:	2301      	movs	r3, #1
 800bf64:	4628      	mov	r0, r5
 800bf66:	47b0      	blx	r6
 800bf68:	1c41      	adds	r1, r0, #1
 800bf6a:	d1c7      	bne.n	800befc <__sflush_r+0x30>
 800bf6c:	682b      	ldr	r3, [r5, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	d0c4      	beq.n	800befc <__sflush_r+0x30>
 800bf72:	2b1d      	cmp	r3, #29
 800bf74:	d001      	beq.n	800bf7a <__sflush_r+0xae>
 800bf76:	2b16      	cmp	r3, #22
 800bf78:	d101      	bne.n	800bf7e <__sflush_r+0xb2>
 800bf7a:	602f      	str	r7, [r5, #0]
 800bf7c:	e7b2      	b.n	800bee4 <__sflush_r+0x18>
 800bf7e:	89a3      	ldrh	r3, [r4, #12]
 800bf80:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bf84:	81a3      	strh	r3, [r4, #12]
 800bf86:	e7ae      	b.n	800bee6 <__sflush_r+0x1a>
 800bf88:	690f      	ldr	r7, [r1, #16]
 800bf8a:	2f00      	cmp	r7, #0
 800bf8c:	d0aa      	beq.n	800bee4 <__sflush_r+0x18>
 800bf8e:	0793      	lsls	r3, r2, #30
 800bf90:	bf18      	it	ne
 800bf92:	2300      	movne	r3, #0
 800bf94:	680e      	ldr	r6, [r1, #0]
 800bf96:	bf08      	it	eq
 800bf98:	694b      	ldreq	r3, [r1, #20]
 800bf9a:	1bf6      	subs	r6, r6, r7
 800bf9c:	600f      	str	r7, [r1, #0]
 800bf9e:	608b      	str	r3, [r1, #8]
 800bfa0:	2e00      	cmp	r6, #0
 800bfa2:	dd9f      	ble.n	800bee4 <__sflush_r+0x18>
 800bfa4:	4633      	mov	r3, r6
 800bfa6:	463a      	mov	r2, r7
 800bfa8:	4628      	mov	r0, r5
 800bfaa:	6a21      	ldr	r1, [r4, #32]
 800bfac:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 800bfb0:	47e0      	blx	ip
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	dc06      	bgt.n	800bfc4 <__sflush_r+0xf8>
 800bfb6:	89a3      	ldrh	r3, [r4, #12]
 800bfb8:	f04f 30ff 	mov.w	r0, #4294967295
 800bfbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfc0:	81a3      	strh	r3, [r4, #12]
 800bfc2:	e790      	b.n	800bee6 <__sflush_r+0x1a>
 800bfc4:	4407      	add	r7, r0
 800bfc6:	1a36      	subs	r6, r6, r0
 800bfc8:	e7ea      	b.n	800bfa0 <__sflush_r+0xd4>
 800bfca:	bf00      	nop
 800bfcc:	20400001 	.word	0x20400001

0800bfd0 <_fflush_r>:
 800bfd0:	b538      	push	{r3, r4, r5, lr}
 800bfd2:	690b      	ldr	r3, [r1, #16]
 800bfd4:	4605      	mov	r5, r0
 800bfd6:	460c      	mov	r4, r1
 800bfd8:	b913      	cbnz	r3, 800bfe0 <_fflush_r+0x10>
 800bfda:	2500      	movs	r5, #0
 800bfdc:	4628      	mov	r0, r5
 800bfde:	bd38      	pop	{r3, r4, r5, pc}
 800bfe0:	b118      	cbz	r0, 800bfea <_fflush_r+0x1a>
 800bfe2:	6983      	ldr	r3, [r0, #24]
 800bfe4:	b90b      	cbnz	r3, 800bfea <_fflush_r+0x1a>
 800bfe6:	f000 f887 	bl	800c0f8 <__sinit>
 800bfea:	4b14      	ldr	r3, [pc, #80]	; (800c03c <_fflush_r+0x6c>)
 800bfec:	429c      	cmp	r4, r3
 800bfee:	d11b      	bne.n	800c028 <_fflush_r+0x58>
 800bff0:	686c      	ldr	r4, [r5, #4]
 800bff2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bff6:	2b00      	cmp	r3, #0
 800bff8:	d0ef      	beq.n	800bfda <_fflush_r+0xa>
 800bffa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bffc:	07d0      	lsls	r0, r2, #31
 800bffe:	d404      	bmi.n	800c00a <_fflush_r+0x3a>
 800c000:	0599      	lsls	r1, r3, #22
 800c002:	d402      	bmi.n	800c00a <_fflush_r+0x3a>
 800c004:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c006:	f000 fc80 	bl	800c90a <__retarget_lock_acquire_recursive>
 800c00a:	4628      	mov	r0, r5
 800c00c:	4621      	mov	r1, r4
 800c00e:	f7ff ff5d 	bl	800becc <__sflush_r>
 800c012:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c014:	4605      	mov	r5, r0
 800c016:	07da      	lsls	r2, r3, #31
 800c018:	d4e0      	bmi.n	800bfdc <_fflush_r+0xc>
 800c01a:	89a3      	ldrh	r3, [r4, #12]
 800c01c:	059b      	lsls	r3, r3, #22
 800c01e:	d4dd      	bmi.n	800bfdc <_fflush_r+0xc>
 800c020:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c022:	f000 fc73 	bl	800c90c <__retarget_lock_release_recursive>
 800c026:	e7d9      	b.n	800bfdc <_fflush_r+0xc>
 800c028:	4b05      	ldr	r3, [pc, #20]	; (800c040 <_fflush_r+0x70>)
 800c02a:	429c      	cmp	r4, r3
 800c02c:	d101      	bne.n	800c032 <_fflush_r+0x62>
 800c02e:	68ac      	ldr	r4, [r5, #8]
 800c030:	e7df      	b.n	800bff2 <_fflush_r+0x22>
 800c032:	4b04      	ldr	r3, [pc, #16]	; (800c044 <_fflush_r+0x74>)
 800c034:	429c      	cmp	r4, r3
 800c036:	bf08      	it	eq
 800c038:	68ec      	ldreq	r4, [r5, #12]
 800c03a:	e7da      	b.n	800bff2 <_fflush_r+0x22>
 800c03c:	0800fab4 	.word	0x0800fab4
 800c040:	0800fad4 	.word	0x0800fad4
 800c044:	0800fa94 	.word	0x0800fa94

0800c048 <std>:
 800c048:	2300      	movs	r3, #0
 800c04a:	b510      	push	{r4, lr}
 800c04c:	4604      	mov	r4, r0
 800c04e:	e9c0 3300 	strd	r3, r3, [r0]
 800c052:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800c056:	6083      	str	r3, [r0, #8]
 800c058:	8181      	strh	r1, [r0, #12]
 800c05a:	6643      	str	r3, [r0, #100]	; 0x64
 800c05c:	81c2      	strh	r2, [r0, #14]
 800c05e:	6183      	str	r3, [r0, #24]
 800c060:	4619      	mov	r1, r3
 800c062:	2208      	movs	r2, #8
 800c064:	305c      	adds	r0, #92	; 0x5c
 800c066:	f7fd f885 	bl	8009174 <memset>
 800c06a:	4b05      	ldr	r3, [pc, #20]	; (800c080 <std+0x38>)
 800c06c:	6224      	str	r4, [r4, #32]
 800c06e:	6263      	str	r3, [r4, #36]	; 0x24
 800c070:	4b04      	ldr	r3, [pc, #16]	; (800c084 <std+0x3c>)
 800c072:	62a3      	str	r3, [r4, #40]	; 0x28
 800c074:	4b04      	ldr	r3, [pc, #16]	; (800c088 <std+0x40>)
 800c076:	62e3      	str	r3, [r4, #44]	; 0x2c
 800c078:	4b04      	ldr	r3, [pc, #16]	; (800c08c <std+0x44>)
 800c07a:	6323      	str	r3, [r4, #48]	; 0x30
 800c07c:	bd10      	pop	{r4, pc}
 800c07e:	bf00      	nop
 800c080:	0800a219 	.word	0x0800a219
 800c084:	0800a23f 	.word	0x0800a23f
 800c088:	0800a277 	.word	0x0800a277
 800c08c:	0800a29b 	.word	0x0800a29b

0800c090 <_cleanup_r>:
 800c090:	4901      	ldr	r1, [pc, #4]	; (800c098 <_cleanup_r+0x8>)
 800c092:	f000 b8af 	b.w	800c1f4 <_fwalk_reent>
 800c096:	bf00      	nop
 800c098:	0800bfd1 	.word	0x0800bfd1

0800c09c <__sfmoreglue>:
 800c09c:	2268      	movs	r2, #104	; 0x68
 800c09e:	b570      	push	{r4, r5, r6, lr}
 800c0a0:	1e4d      	subs	r5, r1, #1
 800c0a2:	4355      	muls	r5, r2
 800c0a4:	460e      	mov	r6, r1
 800c0a6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800c0aa:	f7fd f8e7 	bl	800927c <_malloc_r>
 800c0ae:	4604      	mov	r4, r0
 800c0b0:	b140      	cbz	r0, 800c0c4 <__sfmoreglue+0x28>
 800c0b2:	2100      	movs	r1, #0
 800c0b4:	e9c0 1600 	strd	r1, r6, [r0]
 800c0b8:	300c      	adds	r0, #12
 800c0ba:	60a0      	str	r0, [r4, #8]
 800c0bc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800c0c0:	f7fd f858 	bl	8009174 <memset>
 800c0c4:	4620      	mov	r0, r4
 800c0c6:	bd70      	pop	{r4, r5, r6, pc}

0800c0c8 <__sfp_lock_acquire>:
 800c0c8:	4801      	ldr	r0, [pc, #4]	; (800c0d0 <__sfp_lock_acquire+0x8>)
 800c0ca:	f000 bc1e 	b.w	800c90a <__retarget_lock_acquire_recursive>
 800c0ce:	bf00      	nop
 800c0d0:	20002155 	.word	0x20002155

0800c0d4 <__sfp_lock_release>:
 800c0d4:	4801      	ldr	r0, [pc, #4]	; (800c0dc <__sfp_lock_release+0x8>)
 800c0d6:	f000 bc19 	b.w	800c90c <__retarget_lock_release_recursive>
 800c0da:	bf00      	nop
 800c0dc:	20002155 	.word	0x20002155

0800c0e0 <__sinit_lock_acquire>:
 800c0e0:	4801      	ldr	r0, [pc, #4]	; (800c0e8 <__sinit_lock_acquire+0x8>)
 800c0e2:	f000 bc12 	b.w	800c90a <__retarget_lock_acquire_recursive>
 800c0e6:	bf00      	nop
 800c0e8:	20002156 	.word	0x20002156

0800c0ec <__sinit_lock_release>:
 800c0ec:	4801      	ldr	r0, [pc, #4]	; (800c0f4 <__sinit_lock_release+0x8>)
 800c0ee:	f000 bc0d 	b.w	800c90c <__retarget_lock_release_recursive>
 800c0f2:	bf00      	nop
 800c0f4:	20002156 	.word	0x20002156

0800c0f8 <__sinit>:
 800c0f8:	b510      	push	{r4, lr}
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	f7ff fff0 	bl	800c0e0 <__sinit_lock_acquire>
 800c100:	69a3      	ldr	r3, [r4, #24]
 800c102:	b11b      	cbz	r3, 800c10c <__sinit+0x14>
 800c104:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800c108:	f7ff bff0 	b.w	800c0ec <__sinit_lock_release>
 800c10c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800c110:	6523      	str	r3, [r4, #80]	; 0x50
 800c112:	4b13      	ldr	r3, [pc, #76]	; (800c160 <__sinit+0x68>)
 800c114:	4a13      	ldr	r2, [pc, #76]	; (800c164 <__sinit+0x6c>)
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	62a2      	str	r2, [r4, #40]	; 0x28
 800c11a:	42a3      	cmp	r3, r4
 800c11c:	bf08      	it	eq
 800c11e:	2301      	moveq	r3, #1
 800c120:	4620      	mov	r0, r4
 800c122:	bf08      	it	eq
 800c124:	61a3      	streq	r3, [r4, #24]
 800c126:	f000 f81f 	bl	800c168 <__sfp>
 800c12a:	6060      	str	r0, [r4, #4]
 800c12c:	4620      	mov	r0, r4
 800c12e:	f000 f81b 	bl	800c168 <__sfp>
 800c132:	60a0      	str	r0, [r4, #8]
 800c134:	4620      	mov	r0, r4
 800c136:	f000 f817 	bl	800c168 <__sfp>
 800c13a:	2200      	movs	r2, #0
 800c13c:	2104      	movs	r1, #4
 800c13e:	60e0      	str	r0, [r4, #12]
 800c140:	6860      	ldr	r0, [r4, #4]
 800c142:	f7ff ff81 	bl	800c048 <std>
 800c146:	2201      	movs	r2, #1
 800c148:	2109      	movs	r1, #9
 800c14a:	68a0      	ldr	r0, [r4, #8]
 800c14c:	f7ff ff7c 	bl	800c048 <std>
 800c150:	2202      	movs	r2, #2
 800c152:	2112      	movs	r1, #18
 800c154:	68e0      	ldr	r0, [r4, #12]
 800c156:	f7ff ff77 	bl	800c048 <std>
 800c15a:	2301      	movs	r3, #1
 800c15c:	61a3      	str	r3, [r4, #24]
 800c15e:	e7d1      	b.n	800c104 <__sinit+0xc>
 800c160:	0800f874 	.word	0x0800f874
 800c164:	0800c091 	.word	0x0800c091

0800c168 <__sfp>:
 800c168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c16a:	4607      	mov	r7, r0
 800c16c:	f7ff ffac 	bl	800c0c8 <__sfp_lock_acquire>
 800c170:	4b1e      	ldr	r3, [pc, #120]	; (800c1ec <__sfp+0x84>)
 800c172:	681e      	ldr	r6, [r3, #0]
 800c174:	69b3      	ldr	r3, [r6, #24]
 800c176:	b913      	cbnz	r3, 800c17e <__sfp+0x16>
 800c178:	4630      	mov	r0, r6
 800c17a:	f7ff ffbd 	bl	800c0f8 <__sinit>
 800c17e:	3648      	adds	r6, #72	; 0x48
 800c180:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800c184:	3b01      	subs	r3, #1
 800c186:	d503      	bpl.n	800c190 <__sfp+0x28>
 800c188:	6833      	ldr	r3, [r6, #0]
 800c18a:	b30b      	cbz	r3, 800c1d0 <__sfp+0x68>
 800c18c:	6836      	ldr	r6, [r6, #0]
 800c18e:	e7f7      	b.n	800c180 <__sfp+0x18>
 800c190:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800c194:	b9d5      	cbnz	r5, 800c1cc <__sfp+0x64>
 800c196:	4b16      	ldr	r3, [pc, #88]	; (800c1f0 <__sfp+0x88>)
 800c198:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800c19c:	60e3      	str	r3, [r4, #12]
 800c19e:	6665      	str	r5, [r4, #100]	; 0x64
 800c1a0:	f000 fbb2 	bl	800c908 <__retarget_lock_init_recursive>
 800c1a4:	f7ff ff96 	bl	800c0d4 <__sfp_lock_release>
 800c1a8:	2208      	movs	r2, #8
 800c1aa:	4629      	mov	r1, r5
 800c1ac:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800c1b0:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800c1b4:	6025      	str	r5, [r4, #0]
 800c1b6:	61a5      	str	r5, [r4, #24]
 800c1b8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800c1bc:	f7fc ffda 	bl	8009174 <memset>
 800c1c0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800c1c4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800c1c8:	4620      	mov	r0, r4
 800c1ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c1cc:	3468      	adds	r4, #104	; 0x68
 800c1ce:	e7d9      	b.n	800c184 <__sfp+0x1c>
 800c1d0:	2104      	movs	r1, #4
 800c1d2:	4638      	mov	r0, r7
 800c1d4:	f7ff ff62 	bl	800c09c <__sfmoreglue>
 800c1d8:	4604      	mov	r4, r0
 800c1da:	6030      	str	r0, [r6, #0]
 800c1dc:	2800      	cmp	r0, #0
 800c1de:	d1d5      	bne.n	800c18c <__sfp+0x24>
 800c1e0:	f7ff ff78 	bl	800c0d4 <__sfp_lock_release>
 800c1e4:	230c      	movs	r3, #12
 800c1e6:	603b      	str	r3, [r7, #0]
 800c1e8:	e7ee      	b.n	800c1c8 <__sfp+0x60>
 800c1ea:	bf00      	nop
 800c1ec:	0800f874 	.word	0x0800f874
 800c1f0:	ffff0001 	.word	0xffff0001

0800c1f4 <_fwalk_reent>:
 800c1f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c1f8:	4606      	mov	r6, r0
 800c1fa:	4688      	mov	r8, r1
 800c1fc:	2700      	movs	r7, #0
 800c1fe:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800c202:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800c206:	f1b9 0901 	subs.w	r9, r9, #1
 800c20a:	d505      	bpl.n	800c218 <_fwalk_reent+0x24>
 800c20c:	6824      	ldr	r4, [r4, #0]
 800c20e:	2c00      	cmp	r4, #0
 800c210:	d1f7      	bne.n	800c202 <_fwalk_reent+0xe>
 800c212:	4638      	mov	r0, r7
 800c214:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c218:	89ab      	ldrh	r3, [r5, #12]
 800c21a:	2b01      	cmp	r3, #1
 800c21c:	d907      	bls.n	800c22e <_fwalk_reent+0x3a>
 800c21e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800c222:	3301      	adds	r3, #1
 800c224:	d003      	beq.n	800c22e <_fwalk_reent+0x3a>
 800c226:	4629      	mov	r1, r5
 800c228:	4630      	mov	r0, r6
 800c22a:	47c0      	blx	r8
 800c22c:	4307      	orrs	r7, r0
 800c22e:	3568      	adds	r5, #104	; 0x68
 800c230:	e7e9      	b.n	800c206 <_fwalk_reent+0x12>

0800c232 <rshift>:
 800c232:	6903      	ldr	r3, [r0, #16]
 800c234:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c238:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c23c:	f100 0414 	add.w	r4, r0, #20
 800c240:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c244:	dd46      	ble.n	800c2d4 <rshift+0xa2>
 800c246:	f011 011f 	ands.w	r1, r1, #31
 800c24a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c24e:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c252:	d10c      	bne.n	800c26e <rshift+0x3c>
 800c254:	4629      	mov	r1, r5
 800c256:	f100 0710 	add.w	r7, r0, #16
 800c25a:	42b1      	cmp	r1, r6
 800c25c:	d335      	bcc.n	800c2ca <rshift+0x98>
 800c25e:	1a9b      	subs	r3, r3, r2
 800c260:	009b      	lsls	r3, r3, #2
 800c262:	1eea      	subs	r2, r5, #3
 800c264:	4296      	cmp	r6, r2
 800c266:	bf38      	it	cc
 800c268:	2300      	movcc	r3, #0
 800c26a:	4423      	add	r3, r4
 800c26c:	e015      	b.n	800c29a <rshift+0x68>
 800c26e:	46a1      	mov	r9, r4
 800c270:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c274:	f1c1 0820 	rsb	r8, r1, #32
 800c278:	40cf      	lsrs	r7, r1
 800c27a:	f105 0e04 	add.w	lr, r5, #4
 800c27e:	4576      	cmp	r6, lr
 800c280:	46f4      	mov	ip, lr
 800c282:	d816      	bhi.n	800c2b2 <rshift+0x80>
 800c284:	1a9a      	subs	r2, r3, r2
 800c286:	0092      	lsls	r2, r2, #2
 800c288:	3a04      	subs	r2, #4
 800c28a:	3501      	adds	r5, #1
 800c28c:	42ae      	cmp	r6, r5
 800c28e:	bf38      	it	cc
 800c290:	2200      	movcc	r2, #0
 800c292:	18a3      	adds	r3, r4, r2
 800c294:	50a7      	str	r7, [r4, r2]
 800c296:	b107      	cbz	r7, 800c29a <rshift+0x68>
 800c298:	3304      	adds	r3, #4
 800c29a:	42a3      	cmp	r3, r4
 800c29c:	eba3 0204 	sub.w	r2, r3, r4
 800c2a0:	bf08      	it	eq
 800c2a2:	2300      	moveq	r3, #0
 800c2a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c2a8:	6102      	str	r2, [r0, #16]
 800c2aa:	bf08      	it	eq
 800c2ac:	6143      	streq	r3, [r0, #20]
 800c2ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c2b2:	f8dc c000 	ldr.w	ip, [ip]
 800c2b6:	fa0c fc08 	lsl.w	ip, ip, r8
 800c2ba:	ea4c 0707 	orr.w	r7, ip, r7
 800c2be:	f849 7b04 	str.w	r7, [r9], #4
 800c2c2:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c2c6:	40cf      	lsrs	r7, r1
 800c2c8:	e7d9      	b.n	800c27e <rshift+0x4c>
 800c2ca:	f851 cb04 	ldr.w	ip, [r1], #4
 800c2ce:	f847 cf04 	str.w	ip, [r7, #4]!
 800c2d2:	e7c2      	b.n	800c25a <rshift+0x28>
 800c2d4:	4623      	mov	r3, r4
 800c2d6:	e7e0      	b.n	800c29a <rshift+0x68>

0800c2d8 <__hexdig_fun>:
 800c2d8:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c2dc:	2b09      	cmp	r3, #9
 800c2de:	d802      	bhi.n	800c2e6 <__hexdig_fun+0xe>
 800c2e0:	3820      	subs	r0, #32
 800c2e2:	b2c0      	uxtb	r0, r0
 800c2e4:	4770      	bx	lr
 800c2e6:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c2ea:	2b05      	cmp	r3, #5
 800c2ec:	d801      	bhi.n	800c2f2 <__hexdig_fun+0x1a>
 800c2ee:	3847      	subs	r0, #71	; 0x47
 800c2f0:	e7f7      	b.n	800c2e2 <__hexdig_fun+0xa>
 800c2f2:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c2f6:	2b05      	cmp	r3, #5
 800c2f8:	d801      	bhi.n	800c2fe <__hexdig_fun+0x26>
 800c2fa:	3827      	subs	r0, #39	; 0x27
 800c2fc:	e7f1      	b.n	800c2e2 <__hexdig_fun+0xa>
 800c2fe:	2000      	movs	r0, #0
 800c300:	4770      	bx	lr
	...

0800c304 <__gethex>:
 800c304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c308:	b08b      	sub	sp, #44	; 0x2c
 800c30a:	9305      	str	r3, [sp, #20]
 800c30c:	4bb2      	ldr	r3, [pc, #712]	; (800c5d8 <__gethex+0x2d4>)
 800c30e:	9002      	str	r0, [sp, #8]
 800c310:	681b      	ldr	r3, [r3, #0]
 800c312:	468b      	mov	fp, r1
 800c314:	4618      	mov	r0, r3
 800c316:	4690      	mov	r8, r2
 800c318:	9303      	str	r3, [sp, #12]
 800c31a:	f7f3 ff19 	bl	8000150 <strlen>
 800c31e:	4682      	mov	sl, r0
 800c320:	9b03      	ldr	r3, [sp, #12]
 800c322:	f8db 2000 	ldr.w	r2, [fp]
 800c326:	4403      	add	r3, r0
 800c328:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c32c:	9306      	str	r3, [sp, #24]
 800c32e:	1c93      	adds	r3, r2, #2
 800c330:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c334:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c338:	32fe      	adds	r2, #254	; 0xfe
 800c33a:	18d1      	adds	r1, r2, r3
 800c33c:	461f      	mov	r7, r3
 800c33e:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c342:	9101      	str	r1, [sp, #4]
 800c344:	2830      	cmp	r0, #48	; 0x30
 800c346:	d0f8      	beq.n	800c33a <__gethex+0x36>
 800c348:	f7ff ffc6 	bl	800c2d8 <__hexdig_fun>
 800c34c:	4604      	mov	r4, r0
 800c34e:	2800      	cmp	r0, #0
 800c350:	d13a      	bne.n	800c3c8 <__gethex+0xc4>
 800c352:	4652      	mov	r2, sl
 800c354:	4638      	mov	r0, r7
 800c356:	9903      	ldr	r1, [sp, #12]
 800c358:	f001 fe60 	bl	800e01c <strncmp>
 800c35c:	4605      	mov	r5, r0
 800c35e:	2800      	cmp	r0, #0
 800c360:	d166      	bne.n	800c430 <__gethex+0x12c>
 800c362:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c366:	eb07 060a 	add.w	r6, r7, sl
 800c36a:	f7ff ffb5 	bl	800c2d8 <__hexdig_fun>
 800c36e:	2800      	cmp	r0, #0
 800c370:	d060      	beq.n	800c434 <__gethex+0x130>
 800c372:	4633      	mov	r3, r6
 800c374:	7818      	ldrb	r0, [r3, #0]
 800c376:	461f      	mov	r7, r3
 800c378:	2830      	cmp	r0, #48	; 0x30
 800c37a:	f103 0301 	add.w	r3, r3, #1
 800c37e:	d0f9      	beq.n	800c374 <__gethex+0x70>
 800c380:	f7ff ffaa 	bl	800c2d8 <__hexdig_fun>
 800c384:	2301      	movs	r3, #1
 800c386:	fab0 f480 	clz	r4, r0
 800c38a:	4635      	mov	r5, r6
 800c38c:	0964      	lsrs	r4, r4, #5
 800c38e:	9301      	str	r3, [sp, #4]
 800c390:	463a      	mov	r2, r7
 800c392:	4616      	mov	r6, r2
 800c394:	7830      	ldrb	r0, [r6, #0]
 800c396:	3201      	adds	r2, #1
 800c398:	f7ff ff9e 	bl	800c2d8 <__hexdig_fun>
 800c39c:	2800      	cmp	r0, #0
 800c39e:	d1f8      	bne.n	800c392 <__gethex+0x8e>
 800c3a0:	4652      	mov	r2, sl
 800c3a2:	4630      	mov	r0, r6
 800c3a4:	9903      	ldr	r1, [sp, #12]
 800c3a6:	f001 fe39 	bl	800e01c <strncmp>
 800c3aa:	b980      	cbnz	r0, 800c3ce <__gethex+0xca>
 800c3ac:	b94d      	cbnz	r5, 800c3c2 <__gethex+0xbe>
 800c3ae:	eb06 050a 	add.w	r5, r6, sl
 800c3b2:	462a      	mov	r2, r5
 800c3b4:	4616      	mov	r6, r2
 800c3b6:	7830      	ldrb	r0, [r6, #0]
 800c3b8:	3201      	adds	r2, #1
 800c3ba:	f7ff ff8d 	bl	800c2d8 <__hexdig_fun>
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	d1f8      	bne.n	800c3b4 <__gethex+0xb0>
 800c3c2:	1bad      	subs	r5, r5, r6
 800c3c4:	00ad      	lsls	r5, r5, #2
 800c3c6:	e004      	b.n	800c3d2 <__gethex+0xce>
 800c3c8:	2400      	movs	r4, #0
 800c3ca:	4625      	mov	r5, r4
 800c3cc:	e7e0      	b.n	800c390 <__gethex+0x8c>
 800c3ce:	2d00      	cmp	r5, #0
 800c3d0:	d1f7      	bne.n	800c3c2 <__gethex+0xbe>
 800c3d2:	7833      	ldrb	r3, [r6, #0]
 800c3d4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c3d8:	2b50      	cmp	r3, #80	; 0x50
 800c3da:	d139      	bne.n	800c450 <__gethex+0x14c>
 800c3dc:	7873      	ldrb	r3, [r6, #1]
 800c3de:	2b2b      	cmp	r3, #43	; 0x2b
 800c3e0:	d02a      	beq.n	800c438 <__gethex+0x134>
 800c3e2:	2b2d      	cmp	r3, #45	; 0x2d
 800c3e4:	d02c      	beq.n	800c440 <__gethex+0x13c>
 800c3e6:	f04f 0900 	mov.w	r9, #0
 800c3ea:	1c71      	adds	r1, r6, #1
 800c3ec:	7808      	ldrb	r0, [r1, #0]
 800c3ee:	f7ff ff73 	bl	800c2d8 <__hexdig_fun>
 800c3f2:	1e43      	subs	r3, r0, #1
 800c3f4:	b2db      	uxtb	r3, r3
 800c3f6:	2b18      	cmp	r3, #24
 800c3f8:	d82a      	bhi.n	800c450 <__gethex+0x14c>
 800c3fa:	f1a0 0210 	sub.w	r2, r0, #16
 800c3fe:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c402:	f7ff ff69 	bl	800c2d8 <__hexdig_fun>
 800c406:	1e43      	subs	r3, r0, #1
 800c408:	b2db      	uxtb	r3, r3
 800c40a:	2b18      	cmp	r3, #24
 800c40c:	d91b      	bls.n	800c446 <__gethex+0x142>
 800c40e:	f1b9 0f00 	cmp.w	r9, #0
 800c412:	d000      	beq.n	800c416 <__gethex+0x112>
 800c414:	4252      	negs	r2, r2
 800c416:	4415      	add	r5, r2
 800c418:	f8cb 1000 	str.w	r1, [fp]
 800c41c:	b1d4      	cbz	r4, 800c454 <__gethex+0x150>
 800c41e:	9b01      	ldr	r3, [sp, #4]
 800c420:	2b00      	cmp	r3, #0
 800c422:	bf14      	ite	ne
 800c424:	2700      	movne	r7, #0
 800c426:	2706      	moveq	r7, #6
 800c428:	4638      	mov	r0, r7
 800c42a:	b00b      	add	sp, #44	; 0x2c
 800c42c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c430:	463e      	mov	r6, r7
 800c432:	4625      	mov	r5, r4
 800c434:	2401      	movs	r4, #1
 800c436:	e7cc      	b.n	800c3d2 <__gethex+0xce>
 800c438:	f04f 0900 	mov.w	r9, #0
 800c43c:	1cb1      	adds	r1, r6, #2
 800c43e:	e7d5      	b.n	800c3ec <__gethex+0xe8>
 800c440:	f04f 0901 	mov.w	r9, #1
 800c444:	e7fa      	b.n	800c43c <__gethex+0x138>
 800c446:	230a      	movs	r3, #10
 800c448:	fb03 0202 	mla	r2, r3, r2, r0
 800c44c:	3a10      	subs	r2, #16
 800c44e:	e7d6      	b.n	800c3fe <__gethex+0xfa>
 800c450:	4631      	mov	r1, r6
 800c452:	e7e1      	b.n	800c418 <__gethex+0x114>
 800c454:	4621      	mov	r1, r4
 800c456:	1bf3      	subs	r3, r6, r7
 800c458:	3b01      	subs	r3, #1
 800c45a:	2b07      	cmp	r3, #7
 800c45c:	dc0a      	bgt.n	800c474 <__gethex+0x170>
 800c45e:	9802      	ldr	r0, [sp, #8]
 800c460:	f000 fafa 	bl	800ca58 <_Balloc>
 800c464:	4604      	mov	r4, r0
 800c466:	b940      	cbnz	r0, 800c47a <__gethex+0x176>
 800c468:	4602      	mov	r2, r0
 800c46a:	21de      	movs	r1, #222	; 0xde
 800c46c:	4b5b      	ldr	r3, [pc, #364]	; (800c5dc <__gethex+0x2d8>)
 800c46e:	485c      	ldr	r0, [pc, #368]	; (800c5e0 <__gethex+0x2dc>)
 800c470:	f001 fea2 	bl	800e1b8 <__assert_func>
 800c474:	3101      	adds	r1, #1
 800c476:	105b      	asrs	r3, r3, #1
 800c478:	e7ef      	b.n	800c45a <__gethex+0x156>
 800c47a:	f04f 0b00 	mov.w	fp, #0
 800c47e:	f100 0914 	add.w	r9, r0, #20
 800c482:	f1ca 0301 	rsb	r3, sl, #1
 800c486:	f8cd 9010 	str.w	r9, [sp, #16]
 800c48a:	f8cd b004 	str.w	fp, [sp, #4]
 800c48e:	9308      	str	r3, [sp, #32]
 800c490:	42b7      	cmp	r7, r6
 800c492:	d33f      	bcc.n	800c514 <__gethex+0x210>
 800c494:	9f04      	ldr	r7, [sp, #16]
 800c496:	9b01      	ldr	r3, [sp, #4]
 800c498:	f847 3b04 	str.w	r3, [r7], #4
 800c49c:	eba7 0709 	sub.w	r7, r7, r9
 800c4a0:	10bf      	asrs	r7, r7, #2
 800c4a2:	6127      	str	r7, [r4, #16]
 800c4a4:	4618      	mov	r0, r3
 800c4a6:	f000 fbc9 	bl	800cc3c <__hi0bits>
 800c4aa:	017f      	lsls	r7, r7, #5
 800c4ac:	f8d8 6000 	ldr.w	r6, [r8]
 800c4b0:	1a3f      	subs	r7, r7, r0
 800c4b2:	42b7      	cmp	r7, r6
 800c4b4:	dd62      	ble.n	800c57c <__gethex+0x278>
 800c4b6:	1bbf      	subs	r7, r7, r6
 800c4b8:	4639      	mov	r1, r7
 800c4ba:	4620      	mov	r0, r4
 800c4bc:	f000 ff63 	bl	800d386 <__any_on>
 800c4c0:	4682      	mov	sl, r0
 800c4c2:	b1a8      	cbz	r0, 800c4f0 <__gethex+0x1ec>
 800c4c4:	f04f 0a01 	mov.w	sl, #1
 800c4c8:	1e7b      	subs	r3, r7, #1
 800c4ca:	1159      	asrs	r1, r3, #5
 800c4cc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800c4d0:	f003 021f 	and.w	r2, r3, #31
 800c4d4:	fa0a f202 	lsl.w	r2, sl, r2
 800c4d8:	420a      	tst	r2, r1
 800c4da:	d009      	beq.n	800c4f0 <__gethex+0x1ec>
 800c4dc:	4553      	cmp	r3, sl
 800c4de:	dd05      	ble.n	800c4ec <__gethex+0x1e8>
 800c4e0:	4620      	mov	r0, r4
 800c4e2:	1eb9      	subs	r1, r7, #2
 800c4e4:	f000 ff4f 	bl	800d386 <__any_on>
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	d144      	bne.n	800c576 <__gethex+0x272>
 800c4ec:	f04f 0a02 	mov.w	sl, #2
 800c4f0:	4639      	mov	r1, r7
 800c4f2:	4620      	mov	r0, r4
 800c4f4:	f7ff fe9d 	bl	800c232 <rshift>
 800c4f8:	443d      	add	r5, r7
 800c4fa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c4fe:	42ab      	cmp	r3, r5
 800c500:	da4a      	bge.n	800c598 <__gethex+0x294>
 800c502:	4621      	mov	r1, r4
 800c504:	9802      	ldr	r0, [sp, #8]
 800c506:	f000 fae7 	bl	800cad8 <_Bfree>
 800c50a:	2300      	movs	r3, #0
 800c50c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c50e:	27a3      	movs	r7, #163	; 0xa3
 800c510:	6013      	str	r3, [r2, #0]
 800c512:	e789      	b.n	800c428 <__gethex+0x124>
 800c514:	1e73      	subs	r3, r6, #1
 800c516:	9a06      	ldr	r2, [sp, #24]
 800c518:	9307      	str	r3, [sp, #28]
 800c51a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c51e:	4293      	cmp	r3, r2
 800c520:	d019      	beq.n	800c556 <__gethex+0x252>
 800c522:	f1bb 0f20 	cmp.w	fp, #32
 800c526:	d107      	bne.n	800c538 <__gethex+0x234>
 800c528:	9b04      	ldr	r3, [sp, #16]
 800c52a:	9a01      	ldr	r2, [sp, #4]
 800c52c:	f843 2b04 	str.w	r2, [r3], #4
 800c530:	9304      	str	r3, [sp, #16]
 800c532:	2300      	movs	r3, #0
 800c534:	469b      	mov	fp, r3
 800c536:	9301      	str	r3, [sp, #4]
 800c538:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800c53c:	f7ff fecc 	bl	800c2d8 <__hexdig_fun>
 800c540:	9b01      	ldr	r3, [sp, #4]
 800c542:	f000 000f 	and.w	r0, r0, #15
 800c546:	fa00 f00b 	lsl.w	r0, r0, fp
 800c54a:	4303      	orrs	r3, r0
 800c54c:	9301      	str	r3, [sp, #4]
 800c54e:	f10b 0b04 	add.w	fp, fp, #4
 800c552:	9b07      	ldr	r3, [sp, #28]
 800c554:	e00d      	b.n	800c572 <__gethex+0x26e>
 800c556:	9a08      	ldr	r2, [sp, #32]
 800c558:	1e73      	subs	r3, r6, #1
 800c55a:	4413      	add	r3, r2
 800c55c:	42bb      	cmp	r3, r7
 800c55e:	d3e0      	bcc.n	800c522 <__gethex+0x21e>
 800c560:	4618      	mov	r0, r3
 800c562:	4652      	mov	r2, sl
 800c564:	9903      	ldr	r1, [sp, #12]
 800c566:	9309      	str	r3, [sp, #36]	; 0x24
 800c568:	f001 fd58 	bl	800e01c <strncmp>
 800c56c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c56e:	2800      	cmp	r0, #0
 800c570:	d1d7      	bne.n	800c522 <__gethex+0x21e>
 800c572:	461e      	mov	r6, r3
 800c574:	e78c      	b.n	800c490 <__gethex+0x18c>
 800c576:	f04f 0a03 	mov.w	sl, #3
 800c57a:	e7b9      	b.n	800c4f0 <__gethex+0x1ec>
 800c57c:	da09      	bge.n	800c592 <__gethex+0x28e>
 800c57e:	1bf7      	subs	r7, r6, r7
 800c580:	4621      	mov	r1, r4
 800c582:	463a      	mov	r2, r7
 800c584:	9802      	ldr	r0, [sp, #8]
 800c586:	f000 fcbf 	bl	800cf08 <__lshift>
 800c58a:	4604      	mov	r4, r0
 800c58c:	1bed      	subs	r5, r5, r7
 800c58e:	f100 0914 	add.w	r9, r0, #20
 800c592:	f04f 0a00 	mov.w	sl, #0
 800c596:	e7b0      	b.n	800c4fa <__gethex+0x1f6>
 800c598:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800c59c:	42a8      	cmp	r0, r5
 800c59e:	dd72      	ble.n	800c686 <__gethex+0x382>
 800c5a0:	1b45      	subs	r5, r0, r5
 800c5a2:	42ae      	cmp	r6, r5
 800c5a4:	dc35      	bgt.n	800c612 <__gethex+0x30e>
 800c5a6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c5aa:	2b02      	cmp	r3, #2
 800c5ac:	d029      	beq.n	800c602 <__gethex+0x2fe>
 800c5ae:	2b03      	cmp	r3, #3
 800c5b0:	d02b      	beq.n	800c60a <__gethex+0x306>
 800c5b2:	2b01      	cmp	r3, #1
 800c5b4:	d11c      	bne.n	800c5f0 <__gethex+0x2ec>
 800c5b6:	42ae      	cmp	r6, r5
 800c5b8:	d11a      	bne.n	800c5f0 <__gethex+0x2ec>
 800c5ba:	2e01      	cmp	r6, #1
 800c5bc:	d112      	bne.n	800c5e4 <__gethex+0x2e0>
 800c5be:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800c5c2:	9a05      	ldr	r2, [sp, #20]
 800c5c4:	2762      	movs	r7, #98	; 0x62
 800c5c6:	6013      	str	r3, [r2, #0]
 800c5c8:	2301      	movs	r3, #1
 800c5ca:	6123      	str	r3, [r4, #16]
 800c5cc:	f8c9 3000 	str.w	r3, [r9]
 800c5d0:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c5d2:	601c      	str	r4, [r3, #0]
 800c5d4:	e728      	b.n	800c428 <__gethex+0x124>
 800c5d6:	bf00      	nop
 800c5d8:	0800fb5c 	.word	0x0800fb5c
 800c5dc:	0800fa80 	.word	0x0800fa80
 800c5e0:	0800faf4 	.word	0x0800faf4
 800c5e4:	4620      	mov	r0, r4
 800c5e6:	1e71      	subs	r1, r6, #1
 800c5e8:	f000 fecd 	bl	800d386 <__any_on>
 800c5ec:	2800      	cmp	r0, #0
 800c5ee:	d1e6      	bne.n	800c5be <__gethex+0x2ba>
 800c5f0:	4621      	mov	r1, r4
 800c5f2:	9802      	ldr	r0, [sp, #8]
 800c5f4:	f000 fa70 	bl	800cad8 <_Bfree>
 800c5f8:	2300      	movs	r3, #0
 800c5fa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800c5fc:	2750      	movs	r7, #80	; 0x50
 800c5fe:	6013      	str	r3, [r2, #0]
 800c600:	e712      	b.n	800c428 <__gethex+0x124>
 800c602:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c604:	2b00      	cmp	r3, #0
 800c606:	d1f3      	bne.n	800c5f0 <__gethex+0x2ec>
 800c608:	e7d9      	b.n	800c5be <__gethex+0x2ba>
 800c60a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d1d6      	bne.n	800c5be <__gethex+0x2ba>
 800c610:	e7ee      	b.n	800c5f0 <__gethex+0x2ec>
 800c612:	1e6f      	subs	r7, r5, #1
 800c614:	f1ba 0f00 	cmp.w	sl, #0
 800c618:	d132      	bne.n	800c680 <__gethex+0x37c>
 800c61a:	b127      	cbz	r7, 800c626 <__gethex+0x322>
 800c61c:	4639      	mov	r1, r7
 800c61e:	4620      	mov	r0, r4
 800c620:	f000 feb1 	bl	800d386 <__any_on>
 800c624:	4682      	mov	sl, r0
 800c626:	2101      	movs	r1, #1
 800c628:	117b      	asrs	r3, r7, #5
 800c62a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800c62e:	f007 071f 	and.w	r7, r7, #31
 800c632:	fa01 f707 	lsl.w	r7, r1, r7
 800c636:	421f      	tst	r7, r3
 800c638:	f04f 0702 	mov.w	r7, #2
 800c63c:	4629      	mov	r1, r5
 800c63e:	4620      	mov	r0, r4
 800c640:	bf18      	it	ne
 800c642:	f04a 0a02 	orrne.w	sl, sl, #2
 800c646:	1b76      	subs	r6, r6, r5
 800c648:	f7ff fdf3 	bl	800c232 <rshift>
 800c64c:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800c650:	f1ba 0f00 	cmp.w	sl, #0
 800c654:	d048      	beq.n	800c6e8 <__gethex+0x3e4>
 800c656:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800c65a:	2b02      	cmp	r3, #2
 800c65c:	d015      	beq.n	800c68a <__gethex+0x386>
 800c65e:	2b03      	cmp	r3, #3
 800c660:	d017      	beq.n	800c692 <__gethex+0x38e>
 800c662:	2b01      	cmp	r3, #1
 800c664:	d109      	bne.n	800c67a <__gethex+0x376>
 800c666:	f01a 0f02 	tst.w	sl, #2
 800c66a:	d006      	beq.n	800c67a <__gethex+0x376>
 800c66c:	f8d9 0000 	ldr.w	r0, [r9]
 800c670:	ea4a 0a00 	orr.w	sl, sl, r0
 800c674:	f01a 0f01 	tst.w	sl, #1
 800c678:	d10e      	bne.n	800c698 <__gethex+0x394>
 800c67a:	f047 0710 	orr.w	r7, r7, #16
 800c67e:	e033      	b.n	800c6e8 <__gethex+0x3e4>
 800c680:	f04f 0a01 	mov.w	sl, #1
 800c684:	e7cf      	b.n	800c626 <__gethex+0x322>
 800c686:	2701      	movs	r7, #1
 800c688:	e7e2      	b.n	800c650 <__gethex+0x34c>
 800c68a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c68c:	f1c3 0301 	rsb	r3, r3, #1
 800c690:	9315      	str	r3, [sp, #84]	; 0x54
 800c692:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c694:	2b00      	cmp	r3, #0
 800c696:	d0f0      	beq.n	800c67a <__gethex+0x376>
 800c698:	f04f 0c00 	mov.w	ip, #0
 800c69c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c6a0:	f104 0314 	add.w	r3, r4, #20
 800c6a4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c6a8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c6ac:	4618      	mov	r0, r3
 800c6ae:	f853 2b04 	ldr.w	r2, [r3], #4
 800c6b2:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c6b6:	d01c      	beq.n	800c6f2 <__gethex+0x3ee>
 800c6b8:	3201      	adds	r2, #1
 800c6ba:	6002      	str	r2, [r0, #0]
 800c6bc:	2f02      	cmp	r7, #2
 800c6be:	f104 0314 	add.w	r3, r4, #20
 800c6c2:	d13d      	bne.n	800c740 <__gethex+0x43c>
 800c6c4:	f8d8 2000 	ldr.w	r2, [r8]
 800c6c8:	3a01      	subs	r2, #1
 800c6ca:	42b2      	cmp	r2, r6
 800c6cc:	d10a      	bne.n	800c6e4 <__gethex+0x3e0>
 800c6ce:	2201      	movs	r2, #1
 800c6d0:	1171      	asrs	r1, r6, #5
 800c6d2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c6d6:	f006 061f 	and.w	r6, r6, #31
 800c6da:	fa02 f606 	lsl.w	r6, r2, r6
 800c6de:	421e      	tst	r6, r3
 800c6e0:	bf18      	it	ne
 800c6e2:	4617      	movne	r7, r2
 800c6e4:	f047 0720 	orr.w	r7, r7, #32
 800c6e8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c6ea:	601c      	str	r4, [r3, #0]
 800c6ec:	9b05      	ldr	r3, [sp, #20]
 800c6ee:	601d      	str	r5, [r3, #0]
 800c6f0:	e69a      	b.n	800c428 <__gethex+0x124>
 800c6f2:	4299      	cmp	r1, r3
 800c6f4:	f843 cc04 	str.w	ip, [r3, #-4]
 800c6f8:	d8d8      	bhi.n	800c6ac <__gethex+0x3a8>
 800c6fa:	68a3      	ldr	r3, [r4, #8]
 800c6fc:	459b      	cmp	fp, r3
 800c6fe:	db17      	blt.n	800c730 <__gethex+0x42c>
 800c700:	6861      	ldr	r1, [r4, #4]
 800c702:	9802      	ldr	r0, [sp, #8]
 800c704:	3101      	adds	r1, #1
 800c706:	f000 f9a7 	bl	800ca58 <_Balloc>
 800c70a:	4681      	mov	r9, r0
 800c70c:	b918      	cbnz	r0, 800c716 <__gethex+0x412>
 800c70e:	4602      	mov	r2, r0
 800c710:	2184      	movs	r1, #132	; 0x84
 800c712:	4b19      	ldr	r3, [pc, #100]	; (800c778 <__gethex+0x474>)
 800c714:	e6ab      	b.n	800c46e <__gethex+0x16a>
 800c716:	6922      	ldr	r2, [r4, #16]
 800c718:	f104 010c 	add.w	r1, r4, #12
 800c71c:	3202      	adds	r2, #2
 800c71e:	0092      	lsls	r2, r2, #2
 800c720:	300c      	adds	r0, #12
 800c722:	f7fc fd19 	bl	8009158 <memcpy>
 800c726:	4621      	mov	r1, r4
 800c728:	9802      	ldr	r0, [sp, #8]
 800c72a:	f000 f9d5 	bl	800cad8 <_Bfree>
 800c72e:	464c      	mov	r4, r9
 800c730:	6923      	ldr	r3, [r4, #16]
 800c732:	1c5a      	adds	r2, r3, #1
 800c734:	6122      	str	r2, [r4, #16]
 800c736:	2201      	movs	r2, #1
 800c738:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c73c:	615a      	str	r2, [r3, #20]
 800c73e:	e7bd      	b.n	800c6bc <__gethex+0x3b8>
 800c740:	6922      	ldr	r2, [r4, #16]
 800c742:	455a      	cmp	r2, fp
 800c744:	dd0b      	ble.n	800c75e <__gethex+0x45a>
 800c746:	2101      	movs	r1, #1
 800c748:	4620      	mov	r0, r4
 800c74a:	f7ff fd72 	bl	800c232 <rshift>
 800c74e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c752:	3501      	adds	r5, #1
 800c754:	42ab      	cmp	r3, r5
 800c756:	f6ff aed4 	blt.w	800c502 <__gethex+0x1fe>
 800c75a:	2701      	movs	r7, #1
 800c75c:	e7c2      	b.n	800c6e4 <__gethex+0x3e0>
 800c75e:	f016 061f 	ands.w	r6, r6, #31
 800c762:	d0fa      	beq.n	800c75a <__gethex+0x456>
 800c764:	4453      	add	r3, sl
 800c766:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c76a:	f000 fa67 	bl	800cc3c <__hi0bits>
 800c76e:	f1c6 0620 	rsb	r6, r6, #32
 800c772:	42b0      	cmp	r0, r6
 800c774:	dbe7      	blt.n	800c746 <__gethex+0x442>
 800c776:	e7f0      	b.n	800c75a <__gethex+0x456>
 800c778:	0800fa80 	.word	0x0800fa80

0800c77c <L_shift>:
 800c77c:	f1c2 0208 	rsb	r2, r2, #8
 800c780:	0092      	lsls	r2, r2, #2
 800c782:	b570      	push	{r4, r5, r6, lr}
 800c784:	f1c2 0620 	rsb	r6, r2, #32
 800c788:	6843      	ldr	r3, [r0, #4]
 800c78a:	6804      	ldr	r4, [r0, #0]
 800c78c:	fa03 f506 	lsl.w	r5, r3, r6
 800c790:	432c      	orrs	r4, r5
 800c792:	40d3      	lsrs	r3, r2
 800c794:	6004      	str	r4, [r0, #0]
 800c796:	f840 3f04 	str.w	r3, [r0, #4]!
 800c79a:	4288      	cmp	r0, r1
 800c79c:	d3f4      	bcc.n	800c788 <L_shift+0xc>
 800c79e:	bd70      	pop	{r4, r5, r6, pc}

0800c7a0 <__match>:
 800c7a0:	b530      	push	{r4, r5, lr}
 800c7a2:	6803      	ldr	r3, [r0, #0]
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c7aa:	b914      	cbnz	r4, 800c7b2 <__match+0x12>
 800c7ac:	6003      	str	r3, [r0, #0]
 800c7ae:	2001      	movs	r0, #1
 800c7b0:	bd30      	pop	{r4, r5, pc}
 800c7b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7b6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c7ba:	2d19      	cmp	r5, #25
 800c7bc:	bf98      	it	ls
 800c7be:	3220      	addls	r2, #32
 800c7c0:	42a2      	cmp	r2, r4
 800c7c2:	d0f0      	beq.n	800c7a6 <__match+0x6>
 800c7c4:	2000      	movs	r0, #0
 800c7c6:	e7f3      	b.n	800c7b0 <__match+0x10>

0800c7c8 <__hexnan>:
 800c7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c7cc:	2500      	movs	r5, #0
 800c7ce:	680b      	ldr	r3, [r1, #0]
 800c7d0:	4682      	mov	sl, r0
 800c7d2:	115e      	asrs	r6, r3, #5
 800c7d4:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c7d8:	f013 031f 	ands.w	r3, r3, #31
 800c7dc:	bf18      	it	ne
 800c7de:	3604      	addne	r6, #4
 800c7e0:	1f37      	subs	r7, r6, #4
 800c7e2:	46b9      	mov	r9, r7
 800c7e4:	463c      	mov	r4, r7
 800c7e6:	46ab      	mov	fp, r5
 800c7e8:	b087      	sub	sp, #28
 800c7ea:	4690      	mov	r8, r2
 800c7ec:	6802      	ldr	r2, [r0, #0]
 800c7ee:	9301      	str	r3, [sp, #4]
 800c7f0:	f846 5c04 	str.w	r5, [r6, #-4]
 800c7f4:	9502      	str	r5, [sp, #8]
 800c7f6:	7851      	ldrb	r1, [r2, #1]
 800c7f8:	1c53      	adds	r3, r2, #1
 800c7fa:	9303      	str	r3, [sp, #12]
 800c7fc:	b341      	cbz	r1, 800c850 <__hexnan+0x88>
 800c7fe:	4608      	mov	r0, r1
 800c800:	9205      	str	r2, [sp, #20]
 800c802:	9104      	str	r1, [sp, #16]
 800c804:	f7ff fd68 	bl	800c2d8 <__hexdig_fun>
 800c808:	2800      	cmp	r0, #0
 800c80a:	d14f      	bne.n	800c8ac <__hexnan+0xe4>
 800c80c:	9904      	ldr	r1, [sp, #16]
 800c80e:	9a05      	ldr	r2, [sp, #20]
 800c810:	2920      	cmp	r1, #32
 800c812:	d818      	bhi.n	800c846 <__hexnan+0x7e>
 800c814:	9b02      	ldr	r3, [sp, #8]
 800c816:	459b      	cmp	fp, r3
 800c818:	dd13      	ble.n	800c842 <__hexnan+0x7a>
 800c81a:	454c      	cmp	r4, r9
 800c81c:	d206      	bcs.n	800c82c <__hexnan+0x64>
 800c81e:	2d07      	cmp	r5, #7
 800c820:	dc04      	bgt.n	800c82c <__hexnan+0x64>
 800c822:	462a      	mov	r2, r5
 800c824:	4649      	mov	r1, r9
 800c826:	4620      	mov	r0, r4
 800c828:	f7ff ffa8 	bl	800c77c <L_shift>
 800c82c:	4544      	cmp	r4, r8
 800c82e:	d950      	bls.n	800c8d2 <__hexnan+0x10a>
 800c830:	2300      	movs	r3, #0
 800c832:	f1a4 0904 	sub.w	r9, r4, #4
 800c836:	f844 3c04 	str.w	r3, [r4, #-4]
 800c83a:	461d      	mov	r5, r3
 800c83c:	464c      	mov	r4, r9
 800c83e:	f8cd b008 	str.w	fp, [sp, #8]
 800c842:	9a03      	ldr	r2, [sp, #12]
 800c844:	e7d7      	b.n	800c7f6 <__hexnan+0x2e>
 800c846:	2929      	cmp	r1, #41	; 0x29
 800c848:	d156      	bne.n	800c8f8 <__hexnan+0x130>
 800c84a:	3202      	adds	r2, #2
 800c84c:	f8ca 2000 	str.w	r2, [sl]
 800c850:	f1bb 0f00 	cmp.w	fp, #0
 800c854:	d050      	beq.n	800c8f8 <__hexnan+0x130>
 800c856:	454c      	cmp	r4, r9
 800c858:	d206      	bcs.n	800c868 <__hexnan+0xa0>
 800c85a:	2d07      	cmp	r5, #7
 800c85c:	dc04      	bgt.n	800c868 <__hexnan+0xa0>
 800c85e:	462a      	mov	r2, r5
 800c860:	4649      	mov	r1, r9
 800c862:	4620      	mov	r0, r4
 800c864:	f7ff ff8a 	bl	800c77c <L_shift>
 800c868:	4544      	cmp	r4, r8
 800c86a:	d934      	bls.n	800c8d6 <__hexnan+0x10e>
 800c86c:	4623      	mov	r3, r4
 800c86e:	f1a8 0204 	sub.w	r2, r8, #4
 800c872:	f853 1b04 	ldr.w	r1, [r3], #4
 800c876:	429f      	cmp	r7, r3
 800c878:	f842 1f04 	str.w	r1, [r2, #4]!
 800c87c:	d2f9      	bcs.n	800c872 <__hexnan+0xaa>
 800c87e:	1b3b      	subs	r3, r7, r4
 800c880:	f023 0303 	bic.w	r3, r3, #3
 800c884:	3304      	adds	r3, #4
 800c886:	3401      	adds	r4, #1
 800c888:	3e03      	subs	r6, #3
 800c88a:	42b4      	cmp	r4, r6
 800c88c:	bf88      	it	hi
 800c88e:	2304      	movhi	r3, #4
 800c890:	2200      	movs	r2, #0
 800c892:	4443      	add	r3, r8
 800c894:	f843 2b04 	str.w	r2, [r3], #4
 800c898:	429f      	cmp	r7, r3
 800c89a:	d2fb      	bcs.n	800c894 <__hexnan+0xcc>
 800c89c:	683b      	ldr	r3, [r7, #0]
 800c89e:	b91b      	cbnz	r3, 800c8a8 <__hexnan+0xe0>
 800c8a0:	4547      	cmp	r7, r8
 800c8a2:	d127      	bne.n	800c8f4 <__hexnan+0x12c>
 800c8a4:	2301      	movs	r3, #1
 800c8a6:	603b      	str	r3, [r7, #0]
 800c8a8:	2005      	movs	r0, #5
 800c8aa:	e026      	b.n	800c8fa <__hexnan+0x132>
 800c8ac:	3501      	adds	r5, #1
 800c8ae:	2d08      	cmp	r5, #8
 800c8b0:	f10b 0b01 	add.w	fp, fp, #1
 800c8b4:	dd06      	ble.n	800c8c4 <__hexnan+0xfc>
 800c8b6:	4544      	cmp	r4, r8
 800c8b8:	d9c3      	bls.n	800c842 <__hexnan+0x7a>
 800c8ba:	2300      	movs	r3, #0
 800c8bc:	2501      	movs	r5, #1
 800c8be:	f844 3c04 	str.w	r3, [r4, #-4]
 800c8c2:	3c04      	subs	r4, #4
 800c8c4:	6822      	ldr	r2, [r4, #0]
 800c8c6:	f000 000f 	and.w	r0, r0, #15
 800c8ca:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c8ce:	6022      	str	r2, [r4, #0]
 800c8d0:	e7b7      	b.n	800c842 <__hexnan+0x7a>
 800c8d2:	2508      	movs	r5, #8
 800c8d4:	e7b5      	b.n	800c842 <__hexnan+0x7a>
 800c8d6:	9b01      	ldr	r3, [sp, #4]
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d0df      	beq.n	800c89c <__hexnan+0xd4>
 800c8dc:	f04f 32ff 	mov.w	r2, #4294967295
 800c8e0:	f1c3 0320 	rsb	r3, r3, #32
 800c8e4:	fa22 f303 	lsr.w	r3, r2, r3
 800c8e8:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c8ec:	401a      	ands	r2, r3
 800c8ee:	f846 2c04 	str.w	r2, [r6, #-4]
 800c8f2:	e7d3      	b.n	800c89c <__hexnan+0xd4>
 800c8f4:	3f04      	subs	r7, #4
 800c8f6:	e7d1      	b.n	800c89c <__hexnan+0xd4>
 800c8f8:	2004      	movs	r0, #4
 800c8fa:	b007      	add	sp, #28
 800c8fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c900 <_localeconv_r>:
 800c900:	4800      	ldr	r0, [pc, #0]	; (800c904 <_localeconv_r+0x4>)
 800c902:	4770      	bx	lr
 800c904:	20000184 	.word	0x20000184

0800c908 <__retarget_lock_init_recursive>:
 800c908:	4770      	bx	lr

0800c90a <__retarget_lock_acquire_recursive>:
 800c90a:	4770      	bx	lr

0800c90c <__retarget_lock_release_recursive>:
 800c90c:	4770      	bx	lr
	...

0800c910 <_lseek_r>:
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	4604      	mov	r4, r0
 800c914:	4608      	mov	r0, r1
 800c916:	4611      	mov	r1, r2
 800c918:	2200      	movs	r2, #0
 800c91a:	4d05      	ldr	r5, [pc, #20]	; (800c930 <_lseek_r+0x20>)
 800c91c:	602a      	str	r2, [r5, #0]
 800c91e:	461a      	mov	r2, r3
 800c920:	f7f6 fa5a 	bl	8002dd8 <_lseek>
 800c924:	1c43      	adds	r3, r0, #1
 800c926:	d102      	bne.n	800c92e <_lseek_r+0x1e>
 800c928:	682b      	ldr	r3, [r5, #0]
 800c92a:	b103      	cbz	r3, 800c92e <_lseek_r+0x1e>
 800c92c:	6023      	str	r3, [r4, #0]
 800c92e:	bd38      	pop	{r3, r4, r5, pc}
 800c930:	20002158 	.word	0x20002158

0800c934 <__swhatbuf_r>:
 800c934:	b570      	push	{r4, r5, r6, lr}
 800c936:	460e      	mov	r6, r1
 800c938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c93c:	4614      	mov	r4, r2
 800c93e:	2900      	cmp	r1, #0
 800c940:	461d      	mov	r5, r3
 800c942:	b096      	sub	sp, #88	; 0x58
 800c944:	da08      	bge.n	800c958 <__swhatbuf_r+0x24>
 800c946:	2200      	movs	r2, #0
 800c948:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c94c:	602a      	str	r2, [r5, #0]
 800c94e:	061a      	lsls	r2, r3, #24
 800c950:	d410      	bmi.n	800c974 <__swhatbuf_r+0x40>
 800c952:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c956:	e00e      	b.n	800c976 <__swhatbuf_r+0x42>
 800c958:	466a      	mov	r2, sp
 800c95a:	f001 fc5d 	bl	800e218 <_fstat_r>
 800c95e:	2800      	cmp	r0, #0
 800c960:	dbf1      	blt.n	800c946 <__swhatbuf_r+0x12>
 800c962:	9a01      	ldr	r2, [sp, #4]
 800c964:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c968:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c96c:	425a      	negs	r2, r3
 800c96e:	415a      	adcs	r2, r3
 800c970:	602a      	str	r2, [r5, #0]
 800c972:	e7ee      	b.n	800c952 <__swhatbuf_r+0x1e>
 800c974:	2340      	movs	r3, #64	; 0x40
 800c976:	2000      	movs	r0, #0
 800c978:	6023      	str	r3, [r4, #0]
 800c97a:	b016      	add	sp, #88	; 0x58
 800c97c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c980 <__smakebuf_r>:
 800c980:	898b      	ldrh	r3, [r1, #12]
 800c982:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c984:	079d      	lsls	r5, r3, #30
 800c986:	4606      	mov	r6, r0
 800c988:	460c      	mov	r4, r1
 800c98a:	d507      	bpl.n	800c99c <__smakebuf_r+0x1c>
 800c98c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c990:	6023      	str	r3, [r4, #0]
 800c992:	6123      	str	r3, [r4, #16]
 800c994:	2301      	movs	r3, #1
 800c996:	6163      	str	r3, [r4, #20]
 800c998:	b002      	add	sp, #8
 800c99a:	bd70      	pop	{r4, r5, r6, pc}
 800c99c:	466a      	mov	r2, sp
 800c99e:	ab01      	add	r3, sp, #4
 800c9a0:	f7ff ffc8 	bl	800c934 <__swhatbuf_r>
 800c9a4:	9900      	ldr	r1, [sp, #0]
 800c9a6:	4605      	mov	r5, r0
 800c9a8:	4630      	mov	r0, r6
 800c9aa:	f7fc fc67 	bl	800927c <_malloc_r>
 800c9ae:	b948      	cbnz	r0, 800c9c4 <__smakebuf_r+0x44>
 800c9b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c9b4:	059a      	lsls	r2, r3, #22
 800c9b6:	d4ef      	bmi.n	800c998 <__smakebuf_r+0x18>
 800c9b8:	f023 0303 	bic.w	r3, r3, #3
 800c9bc:	f043 0302 	orr.w	r3, r3, #2
 800c9c0:	81a3      	strh	r3, [r4, #12]
 800c9c2:	e7e3      	b.n	800c98c <__smakebuf_r+0xc>
 800c9c4:	4b0d      	ldr	r3, [pc, #52]	; (800c9fc <__smakebuf_r+0x7c>)
 800c9c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800c9c8:	89a3      	ldrh	r3, [r4, #12]
 800c9ca:	6020      	str	r0, [r4, #0]
 800c9cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c9d0:	81a3      	strh	r3, [r4, #12]
 800c9d2:	9b00      	ldr	r3, [sp, #0]
 800c9d4:	6120      	str	r0, [r4, #16]
 800c9d6:	6163      	str	r3, [r4, #20]
 800c9d8:	9b01      	ldr	r3, [sp, #4]
 800c9da:	b15b      	cbz	r3, 800c9f4 <__smakebuf_r+0x74>
 800c9dc:	4630      	mov	r0, r6
 800c9de:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c9e2:	f001 fc2b 	bl	800e23c <_isatty_r>
 800c9e6:	b128      	cbz	r0, 800c9f4 <__smakebuf_r+0x74>
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	f023 0303 	bic.w	r3, r3, #3
 800c9ee:	f043 0301 	orr.w	r3, r3, #1
 800c9f2:	81a3      	strh	r3, [r4, #12]
 800c9f4:	89a0      	ldrh	r0, [r4, #12]
 800c9f6:	4305      	orrs	r5, r0
 800c9f8:	81a5      	strh	r5, [r4, #12]
 800c9fa:	e7cd      	b.n	800c998 <__smakebuf_r+0x18>
 800c9fc:	0800c091 	.word	0x0800c091

0800ca00 <__ascii_mbtowc>:
 800ca00:	b082      	sub	sp, #8
 800ca02:	b901      	cbnz	r1, 800ca06 <__ascii_mbtowc+0x6>
 800ca04:	a901      	add	r1, sp, #4
 800ca06:	b142      	cbz	r2, 800ca1a <__ascii_mbtowc+0x1a>
 800ca08:	b14b      	cbz	r3, 800ca1e <__ascii_mbtowc+0x1e>
 800ca0a:	7813      	ldrb	r3, [r2, #0]
 800ca0c:	600b      	str	r3, [r1, #0]
 800ca0e:	7812      	ldrb	r2, [r2, #0]
 800ca10:	1e10      	subs	r0, r2, #0
 800ca12:	bf18      	it	ne
 800ca14:	2001      	movne	r0, #1
 800ca16:	b002      	add	sp, #8
 800ca18:	4770      	bx	lr
 800ca1a:	4610      	mov	r0, r2
 800ca1c:	e7fb      	b.n	800ca16 <__ascii_mbtowc+0x16>
 800ca1e:	f06f 0001 	mvn.w	r0, #1
 800ca22:	e7f8      	b.n	800ca16 <__ascii_mbtowc+0x16>

0800ca24 <memchr>:
 800ca24:	4603      	mov	r3, r0
 800ca26:	b510      	push	{r4, lr}
 800ca28:	b2c9      	uxtb	r1, r1
 800ca2a:	4402      	add	r2, r0
 800ca2c:	4293      	cmp	r3, r2
 800ca2e:	4618      	mov	r0, r3
 800ca30:	d101      	bne.n	800ca36 <memchr+0x12>
 800ca32:	2000      	movs	r0, #0
 800ca34:	e003      	b.n	800ca3e <memchr+0x1a>
 800ca36:	7804      	ldrb	r4, [r0, #0]
 800ca38:	3301      	adds	r3, #1
 800ca3a:	428c      	cmp	r4, r1
 800ca3c:	d1f6      	bne.n	800ca2c <memchr+0x8>
 800ca3e:	bd10      	pop	{r4, pc}

0800ca40 <__malloc_lock>:
 800ca40:	4801      	ldr	r0, [pc, #4]	; (800ca48 <__malloc_lock+0x8>)
 800ca42:	f7ff bf62 	b.w	800c90a <__retarget_lock_acquire_recursive>
 800ca46:	bf00      	nop
 800ca48:	20002154 	.word	0x20002154

0800ca4c <__malloc_unlock>:
 800ca4c:	4801      	ldr	r0, [pc, #4]	; (800ca54 <__malloc_unlock+0x8>)
 800ca4e:	f7ff bf5d 	b.w	800c90c <__retarget_lock_release_recursive>
 800ca52:	bf00      	nop
 800ca54:	20002154 	.word	0x20002154

0800ca58 <_Balloc>:
 800ca58:	b570      	push	{r4, r5, r6, lr}
 800ca5a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ca5c:	4604      	mov	r4, r0
 800ca5e:	460d      	mov	r5, r1
 800ca60:	b976      	cbnz	r6, 800ca80 <_Balloc+0x28>
 800ca62:	2010      	movs	r0, #16
 800ca64:	f7fc fb70 	bl	8009148 <malloc>
 800ca68:	4602      	mov	r2, r0
 800ca6a:	6260      	str	r0, [r4, #36]	; 0x24
 800ca6c:	b920      	cbnz	r0, 800ca78 <_Balloc+0x20>
 800ca6e:	2166      	movs	r1, #102	; 0x66
 800ca70:	4b17      	ldr	r3, [pc, #92]	; (800cad0 <_Balloc+0x78>)
 800ca72:	4818      	ldr	r0, [pc, #96]	; (800cad4 <_Balloc+0x7c>)
 800ca74:	f001 fba0 	bl	800e1b8 <__assert_func>
 800ca78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca7c:	6006      	str	r6, [r0, #0]
 800ca7e:	60c6      	str	r6, [r0, #12]
 800ca80:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800ca82:	68f3      	ldr	r3, [r6, #12]
 800ca84:	b183      	cbz	r3, 800caa8 <_Balloc+0x50>
 800ca86:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca88:	68db      	ldr	r3, [r3, #12]
 800ca8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ca8e:	b9b8      	cbnz	r0, 800cac0 <_Balloc+0x68>
 800ca90:	2101      	movs	r1, #1
 800ca92:	fa01 f605 	lsl.w	r6, r1, r5
 800ca96:	1d72      	adds	r2, r6, #5
 800ca98:	4620      	mov	r0, r4
 800ca9a:	0092      	lsls	r2, r2, #2
 800ca9c:	f7fc fb72 	bl	8009184 <_calloc_r>
 800caa0:	b160      	cbz	r0, 800cabc <_Balloc+0x64>
 800caa2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800caa6:	e00e      	b.n	800cac6 <_Balloc+0x6e>
 800caa8:	2221      	movs	r2, #33	; 0x21
 800caaa:	2104      	movs	r1, #4
 800caac:	4620      	mov	r0, r4
 800caae:	f7fc fb69 	bl	8009184 <_calloc_r>
 800cab2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cab4:	60f0      	str	r0, [r6, #12]
 800cab6:	68db      	ldr	r3, [r3, #12]
 800cab8:	2b00      	cmp	r3, #0
 800caba:	d1e4      	bne.n	800ca86 <_Balloc+0x2e>
 800cabc:	2000      	movs	r0, #0
 800cabe:	bd70      	pop	{r4, r5, r6, pc}
 800cac0:	6802      	ldr	r2, [r0, #0]
 800cac2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cac6:	2300      	movs	r3, #0
 800cac8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cacc:	e7f7      	b.n	800cabe <_Balloc+0x66>
 800cace:	bf00      	nop
 800cad0:	0800fa0e 	.word	0x0800fa0e
 800cad4:	0800fb70 	.word	0x0800fb70

0800cad8 <_Bfree>:
 800cad8:	b570      	push	{r4, r5, r6, lr}
 800cada:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cadc:	4605      	mov	r5, r0
 800cade:	460c      	mov	r4, r1
 800cae0:	b976      	cbnz	r6, 800cb00 <_Bfree+0x28>
 800cae2:	2010      	movs	r0, #16
 800cae4:	f7fc fb30 	bl	8009148 <malloc>
 800cae8:	4602      	mov	r2, r0
 800caea:	6268      	str	r0, [r5, #36]	; 0x24
 800caec:	b920      	cbnz	r0, 800caf8 <_Bfree+0x20>
 800caee:	218a      	movs	r1, #138	; 0x8a
 800caf0:	4b08      	ldr	r3, [pc, #32]	; (800cb14 <_Bfree+0x3c>)
 800caf2:	4809      	ldr	r0, [pc, #36]	; (800cb18 <_Bfree+0x40>)
 800caf4:	f001 fb60 	bl	800e1b8 <__assert_func>
 800caf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cafc:	6006      	str	r6, [r0, #0]
 800cafe:	60c6      	str	r6, [r0, #12]
 800cb00:	b13c      	cbz	r4, 800cb12 <_Bfree+0x3a>
 800cb02:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cb04:	6862      	ldr	r2, [r4, #4]
 800cb06:	68db      	ldr	r3, [r3, #12]
 800cb08:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cb0c:	6021      	str	r1, [r4, #0]
 800cb0e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cb12:	bd70      	pop	{r4, r5, r6, pc}
 800cb14:	0800fa0e 	.word	0x0800fa0e
 800cb18:	0800fb70 	.word	0x0800fb70

0800cb1c <__multadd>:
 800cb1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cb20:	4607      	mov	r7, r0
 800cb22:	460c      	mov	r4, r1
 800cb24:	461e      	mov	r6, r3
 800cb26:	2000      	movs	r0, #0
 800cb28:	690d      	ldr	r5, [r1, #16]
 800cb2a:	f101 0c14 	add.w	ip, r1, #20
 800cb2e:	f8dc 3000 	ldr.w	r3, [ip]
 800cb32:	3001      	adds	r0, #1
 800cb34:	b299      	uxth	r1, r3
 800cb36:	fb02 6101 	mla	r1, r2, r1, r6
 800cb3a:	0c1e      	lsrs	r6, r3, #16
 800cb3c:	0c0b      	lsrs	r3, r1, #16
 800cb3e:	fb02 3306 	mla	r3, r2, r6, r3
 800cb42:	b289      	uxth	r1, r1
 800cb44:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cb48:	4285      	cmp	r5, r0
 800cb4a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cb4e:	f84c 1b04 	str.w	r1, [ip], #4
 800cb52:	dcec      	bgt.n	800cb2e <__multadd+0x12>
 800cb54:	b30e      	cbz	r6, 800cb9a <__multadd+0x7e>
 800cb56:	68a3      	ldr	r3, [r4, #8]
 800cb58:	42ab      	cmp	r3, r5
 800cb5a:	dc19      	bgt.n	800cb90 <__multadd+0x74>
 800cb5c:	6861      	ldr	r1, [r4, #4]
 800cb5e:	4638      	mov	r0, r7
 800cb60:	3101      	adds	r1, #1
 800cb62:	f7ff ff79 	bl	800ca58 <_Balloc>
 800cb66:	4680      	mov	r8, r0
 800cb68:	b928      	cbnz	r0, 800cb76 <__multadd+0x5a>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	21b5      	movs	r1, #181	; 0xb5
 800cb6e:	4b0c      	ldr	r3, [pc, #48]	; (800cba0 <__multadd+0x84>)
 800cb70:	480c      	ldr	r0, [pc, #48]	; (800cba4 <__multadd+0x88>)
 800cb72:	f001 fb21 	bl	800e1b8 <__assert_func>
 800cb76:	6922      	ldr	r2, [r4, #16]
 800cb78:	f104 010c 	add.w	r1, r4, #12
 800cb7c:	3202      	adds	r2, #2
 800cb7e:	0092      	lsls	r2, r2, #2
 800cb80:	300c      	adds	r0, #12
 800cb82:	f7fc fae9 	bl	8009158 <memcpy>
 800cb86:	4621      	mov	r1, r4
 800cb88:	4638      	mov	r0, r7
 800cb8a:	f7ff ffa5 	bl	800cad8 <_Bfree>
 800cb8e:	4644      	mov	r4, r8
 800cb90:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cb94:	3501      	adds	r5, #1
 800cb96:	615e      	str	r6, [r3, #20]
 800cb98:	6125      	str	r5, [r4, #16]
 800cb9a:	4620      	mov	r0, r4
 800cb9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cba0:	0800fa80 	.word	0x0800fa80
 800cba4:	0800fb70 	.word	0x0800fb70

0800cba8 <__s2b>:
 800cba8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cbac:	4615      	mov	r5, r2
 800cbae:	2209      	movs	r2, #9
 800cbb0:	461f      	mov	r7, r3
 800cbb2:	3308      	adds	r3, #8
 800cbb4:	460c      	mov	r4, r1
 800cbb6:	fb93 f3f2 	sdiv	r3, r3, r2
 800cbba:	4606      	mov	r6, r0
 800cbbc:	2201      	movs	r2, #1
 800cbbe:	2100      	movs	r1, #0
 800cbc0:	429a      	cmp	r2, r3
 800cbc2:	db09      	blt.n	800cbd8 <__s2b+0x30>
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	f7ff ff47 	bl	800ca58 <_Balloc>
 800cbca:	b940      	cbnz	r0, 800cbde <__s2b+0x36>
 800cbcc:	4602      	mov	r2, r0
 800cbce:	21ce      	movs	r1, #206	; 0xce
 800cbd0:	4b18      	ldr	r3, [pc, #96]	; (800cc34 <__s2b+0x8c>)
 800cbd2:	4819      	ldr	r0, [pc, #100]	; (800cc38 <__s2b+0x90>)
 800cbd4:	f001 faf0 	bl	800e1b8 <__assert_func>
 800cbd8:	0052      	lsls	r2, r2, #1
 800cbda:	3101      	adds	r1, #1
 800cbdc:	e7f0      	b.n	800cbc0 <__s2b+0x18>
 800cbde:	9b08      	ldr	r3, [sp, #32]
 800cbe0:	2d09      	cmp	r5, #9
 800cbe2:	6143      	str	r3, [r0, #20]
 800cbe4:	f04f 0301 	mov.w	r3, #1
 800cbe8:	6103      	str	r3, [r0, #16]
 800cbea:	dd16      	ble.n	800cc1a <__s2b+0x72>
 800cbec:	f104 0909 	add.w	r9, r4, #9
 800cbf0:	46c8      	mov	r8, r9
 800cbf2:	442c      	add	r4, r5
 800cbf4:	f818 3b01 	ldrb.w	r3, [r8], #1
 800cbf8:	4601      	mov	r1, r0
 800cbfa:	220a      	movs	r2, #10
 800cbfc:	4630      	mov	r0, r6
 800cbfe:	3b30      	subs	r3, #48	; 0x30
 800cc00:	f7ff ff8c 	bl	800cb1c <__multadd>
 800cc04:	45a0      	cmp	r8, r4
 800cc06:	d1f5      	bne.n	800cbf4 <__s2b+0x4c>
 800cc08:	f1a5 0408 	sub.w	r4, r5, #8
 800cc0c:	444c      	add	r4, r9
 800cc0e:	1b2d      	subs	r5, r5, r4
 800cc10:	1963      	adds	r3, r4, r5
 800cc12:	42bb      	cmp	r3, r7
 800cc14:	db04      	blt.n	800cc20 <__s2b+0x78>
 800cc16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cc1a:	2509      	movs	r5, #9
 800cc1c:	340a      	adds	r4, #10
 800cc1e:	e7f6      	b.n	800cc0e <__s2b+0x66>
 800cc20:	f814 3b01 	ldrb.w	r3, [r4], #1
 800cc24:	4601      	mov	r1, r0
 800cc26:	220a      	movs	r2, #10
 800cc28:	4630      	mov	r0, r6
 800cc2a:	3b30      	subs	r3, #48	; 0x30
 800cc2c:	f7ff ff76 	bl	800cb1c <__multadd>
 800cc30:	e7ee      	b.n	800cc10 <__s2b+0x68>
 800cc32:	bf00      	nop
 800cc34:	0800fa80 	.word	0x0800fa80
 800cc38:	0800fb70 	.word	0x0800fb70

0800cc3c <__hi0bits>:
 800cc3c:	0c02      	lsrs	r2, r0, #16
 800cc3e:	0412      	lsls	r2, r2, #16
 800cc40:	4603      	mov	r3, r0
 800cc42:	b9ca      	cbnz	r2, 800cc78 <__hi0bits+0x3c>
 800cc44:	0403      	lsls	r3, r0, #16
 800cc46:	2010      	movs	r0, #16
 800cc48:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800cc4c:	bf04      	itt	eq
 800cc4e:	021b      	lsleq	r3, r3, #8
 800cc50:	3008      	addeq	r0, #8
 800cc52:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800cc56:	bf04      	itt	eq
 800cc58:	011b      	lsleq	r3, r3, #4
 800cc5a:	3004      	addeq	r0, #4
 800cc5c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800cc60:	bf04      	itt	eq
 800cc62:	009b      	lsleq	r3, r3, #2
 800cc64:	3002      	addeq	r0, #2
 800cc66:	2b00      	cmp	r3, #0
 800cc68:	db05      	blt.n	800cc76 <__hi0bits+0x3a>
 800cc6a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800cc6e:	f100 0001 	add.w	r0, r0, #1
 800cc72:	bf08      	it	eq
 800cc74:	2020      	moveq	r0, #32
 800cc76:	4770      	bx	lr
 800cc78:	2000      	movs	r0, #0
 800cc7a:	e7e5      	b.n	800cc48 <__hi0bits+0xc>

0800cc7c <__lo0bits>:
 800cc7c:	6803      	ldr	r3, [r0, #0]
 800cc7e:	4602      	mov	r2, r0
 800cc80:	f013 0007 	ands.w	r0, r3, #7
 800cc84:	d00b      	beq.n	800cc9e <__lo0bits+0x22>
 800cc86:	07d9      	lsls	r1, r3, #31
 800cc88:	d421      	bmi.n	800ccce <__lo0bits+0x52>
 800cc8a:	0798      	lsls	r0, r3, #30
 800cc8c:	bf49      	itett	mi
 800cc8e:	085b      	lsrmi	r3, r3, #1
 800cc90:	089b      	lsrpl	r3, r3, #2
 800cc92:	2001      	movmi	r0, #1
 800cc94:	6013      	strmi	r3, [r2, #0]
 800cc96:	bf5c      	itt	pl
 800cc98:	2002      	movpl	r0, #2
 800cc9a:	6013      	strpl	r3, [r2, #0]
 800cc9c:	4770      	bx	lr
 800cc9e:	b299      	uxth	r1, r3
 800cca0:	b909      	cbnz	r1, 800cca6 <__lo0bits+0x2a>
 800cca2:	2010      	movs	r0, #16
 800cca4:	0c1b      	lsrs	r3, r3, #16
 800cca6:	b2d9      	uxtb	r1, r3
 800cca8:	b909      	cbnz	r1, 800ccae <__lo0bits+0x32>
 800ccaa:	3008      	adds	r0, #8
 800ccac:	0a1b      	lsrs	r3, r3, #8
 800ccae:	0719      	lsls	r1, r3, #28
 800ccb0:	bf04      	itt	eq
 800ccb2:	091b      	lsreq	r3, r3, #4
 800ccb4:	3004      	addeq	r0, #4
 800ccb6:	0799      	lsls	r1, r3, #30
 800ccb8:	bf04      	itt	eq
 800ccba:	089b      	lsreq	r3, r3, #2
 800ccbc:	3002      	addeq	r0, #2
 800ccbe:	07d9      	lsls	r1, r3, #31
 800ccc0:	d403      	bmi.n	800ccca <__lo0bits+0x4e>
 800ccc2:	085b      	lsrs	r3, r3, #1
 800ccc4:	f100 0001 	add.w	r0, r0, #1
 800ccc8:	d003      	beq.n	800ccd2 <__lo0bits+0x56>
 800ccca:	6013      	str	r3, [r2, #0]
 800cccc:	4770      	bx	lr
 800ccce:	2000      	movs	r0, #0
 800ccd0:	4770      	bx	lr
 800ccd2:	2020      	movs	r0, #32
 800ccd4:	4770      	bx	lr
	...

0800ccd8 <__i2b>:
 800ccd8:	b510      	push	{r4, lr}
 800ccda:	460c      	mov	r4, r1
 800ccdc:	2101      	movs	r1, #1
 800ccde:	f7ff febb 	bl	800ca58 <_Balloc>
 800cce2:	4602      	mov	r2, r0
 800cce4:	b928      	cbnz	r0, 800ccf2 <__i2b+0x1a>
 800cce6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ccea:	4b04      	ldr	r3, [pc, #16]	; (800ccfc <__i2b+0x24>)
 800ccec:	4804      	ldr	r0, [pc, #16]	; (800cd00 <__i2b+0x28>)
 800ccee:	f001 fa63 	bl	800e1b8 <__assert_func>
 800ccf2:	2301      	movs	r3, #1
 800ccf4:	6144      	str	r4, [r0, #20]
 800ccf6:	6103      	str	r3, [r0, #16]
 800ccf8:	bd10      	pop	{r4, pc}
 800ccfa:	bf00      	nop
 800ccfc:	0800fa80 	.word	0x0800fa80
 800cd00:	0800fb70 	.word	0x0800fb70

0800cd04 <__multiply>:
 800cd04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd08:	4691      	mov	r9, r2
 800cd0a:	690a      	ldr	r2, [r1, #16]
 800cd0c:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cd10:	460c      	mov	r4, r1
 800cd12:	429a      	cmp	r2, r3
 800cd14:	bfbe      	ittt	lt
 800cd16:	460b      	movlt	r3, r1
 800cd18:	464c      	movlt	r4, r9
 800cd1a:	4699      	movlt	r9, r3
 800cd1c:	6927      	ldr	r7, [r4, #16]
 800cd1e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800cd22:	68a3      	ldr	r3, [r4, #8]
 800cd24:	6861      	ldr	r1, [r4, #4]
 800cd26:	eb07 060a 	add.w	r6, r7, sl
 800cd2a:	42b3      	cmp	r3, r6
 800cd2c:	b085      	sub	sp, #20
 800cd2e:	bfb8      	it	lt
 800cd30:	3101      	addlt	r1, #1
 800cd32:	f7ff fe91 	bl	800ca58 <_Balloc>
 800cd36:	b930      	cbnz	r0, 800cd46 <__multiply+0x42>
 800cd38:	4602      	mov	r2, r0
 800cd3a:	f240 115d 	movw	r1, #349	; 0x15d
 800cd3e:	4b43      	ldr	r3, [pc, #268]	; (800ce4c <__multiply+0x148>)
 800cd40:	4843      	ldr	r0, [pc, #268]	; (800ce50 <__multiply+0x14c>)
 800cd42:	f001 fa39 	bl	800e1b8 <__assert_func>
 800cd46:	f100 0514 	add.w	r5, r0, #20
 800cd4a:	462b      	mov	r3, r5
 800cd4c:	2200      	movs	r2, #0
 800cd4e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cd52:	4543      	cmp	r3, r8
 800cd54:	d321      	bcc.n	800cd9a <__multiply+0x96>
 800cd56:	f104 0314 	add.w	r3, r4, #20
 800cd5a:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800cd5e:	f109 0314 	add.w	r3, r9, #20
 800cd62:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800cd66:	9202      	str	r2, [sp, #8]
 800cd68:	1b3a      	subs	r2, r7, r4
 800cd6a:	3a15      	subs	r2, #21
 800cd6c:	f022 0203 	bic.w	r2, r2, #3
 800cd70:	3204      	adds	r2, #4
 800cd72:	f104 0115 	add.w	r1, r4, #21
 800cd76:	428f      	cmp	r7, r1
 800cd78:	bf38      	it	cc
 800cd7a:	2204      	movcc	r2, #4
 800cd7c:	9201      	str	r2, [sp, #4]
 800cd7e:	9a02      	ldr	r2, [sp, #8]
 800cd80:	9303      	str	r3, [sp, #12]
 800cd82:	429a      	cmp	r2, r3
 800cd84:	d80c      	bhi.n	800cda0 <__multiply+0x9c>
 800cd86:	2e00      	cmp	r6, #0
 800cd88:	dd03      	ble.n	800cd92 <__multiply+0x8e>
 800cd8a:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cd8e:	2b00      	cmp	r3, #0
 800cd90:	d059      	beq.n	800ce46 <__multiply+0x142>
 800cd92:	6106      	str	r6, [r0, #16]
 800cd94:	b005      	add	sp, #20
 800cd96:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cd9a:	f843 2b04 	str.w	r2, [r3], #4
 800cd9e:	e7d8      	b.n	800cd52 <__multiply+0x4e>
 800cda0:	f8b3 a000 	ldrh.w	sl, [r3]
 800cda4:	f1ba 0f00 	cmp.w	sl, #0
 800cda8:	d023      	beq.n	800cdf2 <__multiply+0xee>
 800cdaa:	46a9      	mov	r9, r5
 800cdac:	f04f 0c00 	mov.w	ip, #0
 800cdb0:	f104 0e14 	add.w	lr, r4, #20
 800cdb4:	f85e 2b04 	ldr.w	r2, [lr], #4
 800cdb8:	f8d9 1000 	ldr.w	r1, [r9]
 800cdbc:	fa1f fb82 	uxth.w	fp, r2
 800cdc0:	b289      	uxth	r1, r1
 800cdc2:	fb0a 110b 	mla	r1, sl, fp, r1
 800cdc6:	4461      	add	r1, ip
 800cdc8:	f8d9 c000 	ldr.w	ip, [r9]
 800cdcc:	0c12      	lsrs	r2, r2, #16
 800cdce:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800cdd2:	fb0a c202 	mla	r2, sl, r2, ip
 800cdd6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800cdda:	b289      	uxth	r1, r1
 800cddc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800cde0:	4577      	cmp	r7, lr
 800cde2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800cde6:	f849 1b04 	str.w	r1, [r9], #4
 800cdea:	d8e3      	bhi.n	800cdb4 <__multiply+0xb0>
 800cdec:	9a01      	ldr	r2, [sp, #4]
 800cdee:	f845 c002 	str.w	ip, [r5, r2]
 800cdf2:	9a03      	ldr	r2, [sp, #12]
 800cdf4:	3304      	adds	r3, #4
 800cdf6:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800cdfa:	f1b9 0f00 	cmp.w	r9, #0
 800cdfe:	d020      	beq.n	800ce42 <__multiply+0x13e>
 800ce00:	46ae      	mov	lr, r5
 800ce02:	f04f 0a00 	mov.w	sl, #0
 800ce06:	6829      	ldr	r1, [r5, #0]
 800ce08:	f104 0c14 	add.w	ip, r4, #20
 800ce0c:	f8bc b000 	ldrh.w	fp, [ip]
 800ce10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ce14:	b289      	uxth	r1, r1
 800ce16:	fb09 220b 	mla	r2, r9, fp, r2
 800ce1a:	4492      	add	sl, r2
 800ce1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ce20:	f84e 1b04 	str.w	r1, [lr], #4
 800ce24:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ce28:	f8be 1000 	ldrh.w	r1, [lr]
 800ce2c:	0c12      	lsrs	r2, r2, #16
 800ce2e:	fb09 1102 	mla	r1, r9, r2, r1
 800ce32:	4567      	cmp	r7, ip
 800ce34:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ce38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ce3c:	d8e6      	bhi.n	800ce0c <__multiply+0x108>
 800ce3e:	9a01      	ldr	r2, [sp, #4]
 800ce40:	50a9      	str	r1, [r5, r2]
 800ce42:	3504      	adds	r5, #4
 800ce44:	e79b      	b.n	800cd7e <__multiply+0x7a>
 800ce46:	3e01      	subs	r6, #1
 800ce48:	e79d      	b.n	800cd86 <__multiply+0x82>
 800ce4a:	bf00      	nop
 800ce4c:	0800fa80 	.word	0x0800fa80
 800ce50:	0800fb70 	.word	0x0800fb70

0800ce54 <__pow5mult>:
 800ce54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ce58:	4615      	mov	r5, r2
 800ce5a:	f012 0203 	ands.w	r2, r2, #3
 800ce5e:	4606      	mov	r6, r0
 800ce60:	460f      	mov	r7, r1
 800ce62:	d007      	beq.n	800ce74 <__pow5mult+0x20>
 800ce64:	4c25      	ldr	r4, [pc, #148]	; (800cefc <__pow5mult+0xa8>)
 800ce66:	3a01      	subs	r2, #1
 800ce68:	2300      	movs	r3, #0
 800ce6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ce6e:	f7ff fe55 	bl	800cb1c <__multadd>
 800ce72:	4607      	mov	r7, r0
 800ce74:	10ad      	asrs	r5, r5, #2
 800ce76:	d03d      	beq.n	800cef4 <__pow5mult+0xa0>
 800ce78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800ce7a:	b97c      	cbnz	r4, 800ce9c <__pow5mult+0x48>
 800ce7c:	2010      	movs	r0, #16
 800ce7e:	f7fc f963 	bl	8009148 <malloc>
 800ce82:	4602      	mov	r2, r0
 800ce84:	6270      	str	r0, [r6, #36]	; 0x24
 800ce86:	b928      	cbnz	r0, 800ce94 <__pow5mult+0x40>
 800ce88:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ce8c:	4b1c      	ldr	r3, [pc, #112]	; (800cf00 <__pow5mult+0xac>)
 800ce8e:	481d      	ldr	r0, [pc, #116]	; (800cf04 <__pow5mult+0xb0>)
 800ce90:	f001 f992 	bl	800e1b8 <__assert_func>
 800ce94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ce98:	6004      	str	r4, [r0, #0]
 800ce9a:	60c4      	str	r4, [r0, #12]
 800ce9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800cea0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cea4:	b94c      	cbnz	r4, 800ceba <__pow5mult+0x66>
 800cea6:	f240 2171 	movw	r1, #625	; 0x271
 800ceaa:	4630      	mov	r0, r6
 800ceac:	f7ff ff14 	bl	800ccd8 <__i2b>
 800ceb0:	2300      	movs	r3, #0
 800ceb2:	4604      	mov	r4, r0
 800ceb4:	f8c8 0008 	str.w	r0, [r8, #8]
 800ceb8:	6003      	str	r3, [r0, #0]
 800ceba:	f04f 0900 	mov.w	r9, #0
 800cebe:	07eb      	lsls	r3, r5, #31
 800cec0:	d50a      	bpl.n	800ced8 <__pow5mult+0x84>
 800cec2:	4639      	mov	r1, r7
 800cec4:	4622      	mov	r2, r4
 800cec6:	4630      	mov	r0, r6
 800cec8:	f7ff ff1c 	bl	800cd04 <__multiply>
 800cecc:	4680      	mov	r8, r0
 800cece:	4639      	mov	r1, r7
 800ced0:	4630      	mov	r0, r6
 800ced2:	f7ff fe01 	bl	800cad8 <_Bfree>
 800ced6:	4647      	mov	r7, r8
 800ced8:	106d      	asrs	r5, r5, #1
 800ceda:	d00b      	beq.n	800cef4 <__pow5mult+0xa0>
 800cedc:	6820      	ldr	r0, [r4, #0]
 800cede:	b938      	cbnz	r0, 800cef0 <__pow5mult+0x9c>
 800cee0:	4622      	mov	r2, r4
 800cee2:	4621      	mov	r1, r4
 800cee4:	4630      	mov	r0, r6
 800cee6:	f7ff ff0d 	bl	800cd04 <__multiply>
 800ceea:	6020      	str	r0, [r4, #0]
 800ceec:	f8c0 9000 	str.w	r9, [r0]
 800cef0:	4604      	mov	r4, r0
 800cef2:	e7e4      	b.n	800cebe <__pow5mult+0x6a>
 800cef4:	4638      	mov	r0, r7
 800cef6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cefa:	bf00      	nop
 800cefc:	0800fcc0 	.word	0x0800fcc0
 800cf00:	0800fa0e 	.word	0x0800fa0e
 800cf04:	0800fb70 	.word	0x0800fb70

0800cf08 <__lshift>:
 800cf08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf0c:	460c      	mov	r4, r1
 800cf0e:	4607      	mov	r7, r0
 800cf10:	4691      	mov	r9, r2
 800cf12:	6923      	ldr	r3, [r4, #16]
 800cf14:	6849      	ldr	r1, [r1, #4]
 800cf16:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cf1a:	68a3      	ldr	r3, [r4, #8]
 800cf1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cf20:	f108 0601 	add.w	r6, r8, #1
 800cf24:	42b3      	cmp	r3, r6
 800cf26:	db0b      	blt.n	800cf40 <__lshift+0x38>
 800cf28:	4638      	mov	r0, r7
 800cf2a:	f7ff fd95 	bl	800ca58 <_Balloc>
 800cf2e:	4605      	mov	r5, r0
 800cf30:	b948      	cbnz	r0, 800cf46 <__lshift+0x3e>
 800cf32:	4602      	mov	r2, r0
 800cf34:	f240 11d9 	movw	r1, #473	; 0x1d9
 800cf38:	4b29      	ldr	r3, [pc, #164]	; (800cfe0 <__lshift+0xd8>)
 800cf3a:	482a      	ldr	r0, [pc, #168]	; (800cfe4 <__lshift+0xdc>)
 800cf3c:	f001 f93c 	bl	800e1b8 <__assert_func>
 800cf40:	3101      	adds	r1, #1
 800cf42:	005b      	lsls	r3, r3, #1
 800cf44:	e7ee      	b.n	800cf24 <__lshift+0x1c>
 800cf46:	2300      	movs	r3, #0
 800cf48:	f100 0114 	add.w	r1, r0, #20
 800cf4c:	f100 0210 	add.w	r2, r0, #16
 800cf50:	4618      	mov	r0, r3
 800cf52:	4553      	cmp	r3, sl
 800cf54:	db37      	blt.n	800cfc6 <__lshift+0xbe>
 800cf56:	6920      	ldr	r0, [r4, #16]
 800cf58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cf5c:	f104 0314 	add.w	r3, r4, #20
 800cf60:	f019 091f 	ands.w	r9, r9, #31
 800cf64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cf68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800cf6c:	d02f      	beq.n	800cfce <__lshift+0xc6>
 800cf6e:	468a      	mov	sl, r1
 800cf70:	f04f 0c00 	mov.w	ip, #0
 800cf74:	f1c9 0e20 	rsb	lr, r9, #32
 800cf78:	681a      	ldr	r2, [r3, #0]
 800cf7a:	fa02 f209 	lsl.w	r2, r2, r9
 800cf7e:	ea42 020c 	orr.w	r2, r2, ip
 800cf82:	f84a 2b04 	str.w	r2, [sl], #4
 800cf86:	f853 2b04 	ldr.w	r2, [r3], #4
 800cf8a:	4298      	cmp	r0, r3
 800cf8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800cf90:	d8f2      	bhi.n	800cf78 <__lshift+0x70>
 800cf92:	1b03      	subs	r3, r0, r4
 800cf94:	3b15      	subs	r3, #21
 800cf96:	f023 0303 	bic.w	r3, r3, #3
 800cf9a:	3304      	adds	r3, #4
 800cf9c:	f104 0215 	add.w	r2, r4, #21
 800cfa0:	4290      	cmp	r0, r2
 800cfa2:	bf38      	it	cc
 800cfa4:	2304      	movcc	r3, #4
 800cfa6:	f841 c003 	str.w	ip, [r1, r3]
 800cfaa:	f1bc 0f00 	cmp.w	ip, #0
 800cfae:	d001      	beq.n	800cfb4 <__lshift+0xac>
 800cfb0:	f108 0602 	add.w	r6, r8, #2
 800cfb4:	3e01      	subs	r6, #1
 800cfb6:	4638      	mov	r0, r7
 800cfb8:	4621      	mov	r1, r4
 800cfba:	612e      	str	r6, [r5, #16]
 800cfbc:	f7ff fd8c 	bl	800cad8 <_Bfree>
 800cfc0:	4628      	mov	r0, r5
 800cfc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cfc6:	f842 0f04 	str.w	r0, [r2, #4]!
 800cfca:	3301      	adds	r3, #1
 800cfcc:	e7c1      	b.n	800cf52 <__lshift+0x4a>
 800cfce:	3904      	subs	r1, #4
 800cfd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800cfd4:	4298      	cmp	r0, r3
 800cfd6:	f841 2f04 	str.w	r2, [r1, #4]!
 800cfda:	d8f9      	bhi.n	800cfd0 <__lshift+0xc8>
 800cfdc:	e7ea      	b.n	800cfb4 <__lshift+0xac>
 800cfde:	bf00      	nop
 800cfe0:	0800fa80 	.word	0x0800fa80
 800cfe4:	0800fb70 	.word	0x0800fb70

0800cfe8 <__mcmp>:
 800cfe8:	4603      	mov	r3, r0
 800cfea:	690a      	ldr	r2, [r1, #16]
 800cfec:	6900      	ldr	r0, [r0, #16]
 800cfee:	b530      	push	{r4, r5, lr}
 800cff0:	1a80      	subs	r0, r0, r2
 800cff2:	d10d      	bne.n	800d010 <__mcmp+0x28>
 800cff4:	3314      	adds	r3, #20
 800cff6:	3114      	adds	r1, #20
 800cff8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800cffc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800d000:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800d004:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800d008:	4295      	cmp	r5, r2
 800d00a:	d002      	beq.n	800d012 <__mcmp+0x2a>
 800d00c:	d304      	bcc.n	800d018 <__mcmp+0x30>
 800d00e:	2001      	movs	r0, #1
 800d010:	bd30      	pop	{r4, r5, pc}
 800d012:	42a3      	cmp	r3, r4
 800d014:	d3f4      	bcc.n	800d000 <__mcmp+0x18>
 800d016:	e7fb      	b.n	800d010 <__mcmp+0x28>
 800d018:	f04f 30ff 	mov.w	r0, #4294967295
 800d01c:	e7f8      	b.n	800d010 <__mcmp+0x28>
	...

0800d020 <__mdiff>:
 800d020:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d024:	460d      	mov	r5, r1
 800d026:	4607      	mov	r7, r0
 800d028:	4611      	mov	r1, r2
 800d02a:	4628      	mov	r0, r5
 800d02c:	4614      	mov	r4, r2
 800d02e:	f7ff ffdb 	bl	800cfe8 <__mcmp>
 800d032:	1e06      	subs	r6, r0, #0
 800d034:	d111      	bne.n	800d05a <__mdiff+0x3a>
 800d036:	4631      	mov	r1, r6
 800d038:	4638      	mov	r0, r7
 800d03a:	f7ff fd0d 	bl	800ca58 <_Balloc>
 800d03e:	4602      	mov	r2, r0
 800d040:	b928      	cbnz	r0, 800d04e <__mdiff+0x2e>
 800d042:	f240 2132 	movw	r1, #562	; 0x232
 800d046:	4b3a      	ldr	r3, [pc, #232]	; (800d130 <__mdiff+0x110>)
 800d048:	483a      	ldr	r0, [pc, #232]	; (800d134 <__mdiff+0x114>)
 800d04a:	f001 f8b5 	bl	800e1b8 <__assert_func>
 800d04e:	2301      	movs	r3, #1
 800d050:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800d054:	4610      	mov	r0, r2
 800d056:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d05a:	bfa4      	itt	ge
 800d05c:	4623      	movge	r3, r4
 800d05e:	462c      	movge	r4, r5
 800d060:	4638      	mov	r0, r7
 800d062:	6861      	ldr	r1, [r4, #4]
 800d064:	bfa6      	itte	ge
 800d066:	461d      	movge	r5, r3
 800d068:	2600      	movge	r6, #0
 800d06a:	2601      	movlt	r6, #1
 800d06c:	f7ff fcf4 	bl	800ca58 <_Balloc>
 800d070:	4602      	mov	r2, r0
 800d072:	b918      	cbnz	r0, 800d07c <__mdiff+0x5c>
 800d074:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d078:	4b2d      	ldr	r3, [pc, #180]	; (800d130 <__mdiff+0x110>)
 800d07a:	e7e5      	b.n	800d048 <__mdiff+0x28>
 800d07c:	f102 0814 	add.w	r8, r2, #20
 800d080:	46c2      	mov	sl, r8
 800d082:	f04f 0c00 	mov.w	ip, #0
 800d086:	6927      	ldr	r7, [r4, #16]
 800d088:	60c6      	str	r6, [r0, #12]
 800d08a:	692e      	ldr	r6, [r5, #16]
 800d08c:	f104 0014 	add.w	r0, r4, #20
 800d090:	f105 0914 	add.w	r9, r5, #20
 800d094:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 800d098:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d09c:	3410      	adds	r4, #16
 800d09e:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800d0a2:	f859 3b04 	ldr.w	r3, [r9], #4
 800d0a6:	fa1f f18b 	uxth.w	r1, fp
 800d0aa:	448c      	add	ip, r1
 800d0ac:	b299      	uxth	r1, r3
 800d0ae:	0c1b      	lsrs	r3, r3, #16
 800d0b0:	ebac 0101 	sub.w	r1, ip, r1
 800d0b4:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d0b8:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800d0bc:	b289      	uxth	r1, r1
 800d0be:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800d0c2:	454e      	cmp	r6, r9
 800d0c4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800d0c8:	f84a 3b04 	str.w	r3, [sl], #4
 800d0cc:	d8e7      	bhi.n	800d09e <__mdiff+0x7e>
 800d0ce:	1b73      	subs	r3, r6, r5
 800d0d0:	3b15      	subs	r3, #21
 800d0d2:	f023 0303 	bic.w	r3, r3, #3
 800d0d6:	3515      	adds	r5, #21
 800d0d8:	3304      	adds	r3, #4
 800d0da:	42ae      	cmp	r6, r5
 800d0dc:	bf38      	it	cc
 800d0de:	2304      	movcc	r3, #4
 800d0e0:	4418      	add	r0, r3
 800d0e2:	4443      	add	r3, r8
 800d0e4:	461e      	mov	r6, r3
 800d0e6:	4605      	mov	r5, r0
 800d0e8:	4575      	cmp	r5, lr
 800d0ea:	d30e      	bcc.n	800d10a <__mdiff+0xea>
 800d0ec:	f10e 0103 	add.w	r1, lr, #3
 800d0f0:	1a09      	subs	r1, r1, r0
 800d0f2:	f021 0103 	bic.w	r1, r1, #3
 800d0f6:	3803      	subs	r0, #3
 800d0f8:	4586      	cmp	lr, r0
 800d0fa:	bf38      	it	cc
 800d0fc:	2100      	movcc	r1, #0
 800d0fe:	4419      	add	r1, r3
 800d100:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 800d104:	b18b      	cbz	r3, 800d12a <__mdiff+0x10a>
 800d106:	6117      	str	r7, [r2, #16]
 800d108:	e7a4      	b.n	800d054 <__mdiff+0x34>
 800d10a:	f855 8b04 	ldr.w	r8, [r5], #4
 800d10e:	fa1f f188 	uxth.w	r1, r8
 800d112:	4461      	add	r1, ip
 800d114:	140c      	asrs	r4, r1, #16
 800d116:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d11a:	b289      	uxth	r1, r1
 800d11c:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800d120:	ea4f 4c24 	mov.w	ip, r4, asr #16
 800d124:	f846 1b04 	str.w	r1, [r6], #4
 800d128:	e7de      	b.n	800d0e8 <__mdiff+0xc8>
 800d12a:	3f01      	subs	r7, #1
 800d12c:	e7e8      	b.n	800d100 <__mdiff+0xe0>
 800d12e:	bf00      	nop
 800d130:	0800fa80 	.word	0x0800fa80
 800d134:	0800fb70 	.word	0x0800fb70

0800d138 <__ulp>:
 800d138:	4b11      	ldr	r3, [pc, #68]	; (800d180 <__ulp+0x48>)
 800d13a:	400b      	ands	r3, r1
 800d13c:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800d140:	2b00      	cmp	r3, #0
 800d142:	dd02      	ble.n	800d14a <__ulp+0x12>
 800d144:	2000      	movs	r0, #0
 800d146:	4619      	mov	r1, r3
 800d148:	4770      	bx	lr
 800d14a:	425b      	negs	r3, r3
 800d14c:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800d150:	f04f 0000 	mov.w	r0, #0
 800d154:	f04f 0100 	mov.w	r1, #0
 800d158:	ea4f 5223 	mov.w	r2, r3, asr #20
 800d15c:	da04      	bge.n	800d168 <__ulp+0x30>
 800d15e:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800d162:	fa43 f102 	asr.w	r1, r3, r2
 800d166:	4770      	bx	lr
 800d168:	f1a2 0314 	sub.w	r3, r2, #20
 800d16c:	2b1e      	cmp	r3, #30
 800d16e:	bfd6      	itet	le
 800d170:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800d174:	2301      	movgt	r3, #1
 800d176:	fa22 f303 	lsrle.w	r3, r2, r3
 800d17a:	4618      	mov	r0, r3
 800d17c:	4770      	bx	lr
 800d17e:	bf00      	nop
 800d180:	7ff00000 	.word	0x7ff00000

0800d184 <__b2d>:
 800d184:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d188:	6907      	ldr	r7, [r0, #16]
 800d18a:	f100 0914 	add.w	r9, r0, #20
 800d18e:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 800d192:	f857 6c04 	ldr.w	r6, [r7, #-4]
 800d196:	f1a7 0804 	sub.w	r8, r7, #4
 800d19a:	4630      	mov	r0, r6
 800d19c:	f7ff fd4e 	bl	800cc3c <__hi0bits>
 800d1a0:	f1c0 0320 	rsb	r3, r0, #32
 800d1a4:	280a      	cmp	r0, #10
 800d1a6:	600b      	str	r3, [r1, #0]
 800d1a8:	491f      	ldr	r1, [pc, #124]	; (800d228 <__b2d+0xa4>)
 800d1aa:	dc17      	bgt.n	800d1dc <__b2d+0x58>
 800d1ac:	45c1      	cmp	r9, r8
 800d1ae:	bf28      	it	cs
 800d1b0:	2200      	movcs	r2, #0
 800d1b2:	f1c0 0c0b 	rsb	ip, r0, #11
 800d1b6:	fa26 f30c 	lsr.w	r3, r6, ip
 800d1ba:	bf38      	it	cc
 800d1bc:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d1c0:	ea43 0501 	orr.w	r5, r3, r1
 800d1c4:	f100 0315 	add.w	r3, r0, #21
 800d1c8:	fa06 f303 	lsl.w	r3, r6, r3
 800d1cc:	fa22 f20c 	lsr.w	r2, r2, ip
 800d1d0:	ea43 0402 	orr.w	r4, r3, r2
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	4629      	mov	r1, r5
 800d1d8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d1dc:	45c1      	cmp	r9, r8
 800d1de:	bf2e      	itee	cs
 800d1e0:	2200      	movcs	r2, #0
 800d1e2:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 800d1e6:	f1a7 0808 	subcc.w	r8, r7, #8
 800d1ea:	f1b0 030b 	subs.w	r3, r0, #11
 800d1ee:	d016      	beq.n	800d21e <__b2d+0x9a>
 800d1f0:	f1c3 0720 	rsb	r7, r3, #32
 800d1f4:	fa22 f107 	lsr.w	r1, r2, r7
 800d1f8:	45c8      	cmp	r8, r9
 800d1fa:	fa06 f603 	lsl.w	r6, r6, r3
 800d1fe:	ea46 0601 	orr.w	r6, r6, r1
 800d202:	bf94      	ite	ls
 800d204:	2100      	movls	r1, #0
 800d206:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 800d20a:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 800d20e:	fa02 f003 	lsl.w	r0, r2, r3
 800d212:	40f9      	lsrs	r1, r7
 800d214:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800d218:	ea40 0401 	orr.w	r4, r0, r1
 800d21c:	e7da      	b.n	800d1d4 <__b2d+0x50>
 800d21e:	4614      	mov	r4, r2
 800d220:	ea46 0501 	orr.w	r5, r6, r1
 800d224:	e7d6      	b.n	800d1d4 <__b2d+0x50>
 800d226:	bf00      	nop
 800d228:	3ff00000 	.word	0x3ff00000

0800d22c <__d2b>:
 800d22c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800d230:	2101      	movs	r1, #1
 800d232:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800d236:	4690      	mov	r8, r2
 800d238:	461d      	mov	r5, r3
 800d23a:	f7ff fc0d 	bl	800ca58 <_Balloc>
 800d23e:	4604      	mov	r4, r0
 800d240:	b930      	cbnz	r0, 800d250 <__d2b+0x24>
 800d242:	4602      	mov	r2, r0
 800d244:	f240 310a 	movw	r1, #778	; 0x30a
 800d248:	4b24      	ldr	r3, [pc, #144]	; (800d2dc <__d2b+0xb0>)
 800d24a:	4825      	ldr	r0, [pc, #148]	; (800d2e0 <__d2b+0xb4>)
 800d24c:	f000 ffb4 	bl	800e1b8 <__assert_func>
 800d250:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800d254:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800d258:	bb2d      	cbnz	r5, 800d2a6 <__d2b+0x7a>
 800d25a:	9301      	str	r3, [sp, #4]
 800d25c:	f1b8 0300 	subs.w	r3, r8, #0
 800d260:	d026      	beq.n	800d2b0 <__d2b+0x84>
 800d262:	4668      	mov	r0, sp
 800d264:	9300      	str	r3, [sp, #0]
 800d266:	f7ff fd09 	bl	800cc7c <__lo0bits>
 800d26a:	9900      	ldr	r1, [sp, #0]
 800d26c:	b1f0      	cbz	r0, 800d2ac <__d2b+0x80>
 800d26e:	9a01      	ldr	r2, [sp, #4]
 800d270:	f1c0 0320 	rsb	r3, r0, #32
 800d274:	fa02 f303 	lsl.w	r3, r2, r3
 800d278:	430b      	orrs	r3, r1
 800d27a:	40c2      	lsrs	r2, r0
 800d27c:	6163      	str	r3, [r4, #20]
 800d27e:	9201      	str	r2, [sp, #4]
 800d280:	9b01      	ldr	r3, [sp, #4]
 800d282:	2b00      	cmp	r3, #0
 800d284:	bf14      	ite	ne
 800d286:	2102      	movne	r1, #2
 800d288:	2101      	moveq	r1, #1
 800d28a:	61a3      	str	r3, [r4, #24]
 800d28c:	6121      	str	r1, [r4, #16]
 800d28e:	b1c5      	cbz	r5, 800d2c2 <__d2b+0x96>
 800d290:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d294:	4405      	add	r5, r0
 800d296:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d29a:	603d      	str	r5, [r7, #0]
 800d29c:	6030      	str	r0, [r6, #0]
 800d29e:	4620      	mov	r0, r4
 800d2a0:	b002      	add	sp, #8
 800d2a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d2a6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d2aa:	e7d6      	b.n	800d25a <__d2b+0x2e>
 800d2ac:	6161      	str	r1, [r4, #20]
 800d2ae:	e7e7      	b.n	800d280 <__d2b+0x54>
 800d2b0:	a801      	add	r0, sp, #4
 800d2b2:	f7ff fce3 	bl	800cc7c <__lo0bits>
 800d2b6:	2101      	movs	r1, #1
 800d2b8:	9b01      	ldr	r3, [sp, #4]
 800d2ba:	6121      	str	r1, [r4, #16]
 800d2bc:	6163      	str	r3, [r4, #20]
 800d2be:	3020      	adds	r0, #32
 800d2c0:	e7e5      	b.n	800d28e <__d2b+0x62>
 800d2c2:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800d2c6:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d2ca:	6038      	str	r0, [r7, #0]
 800d2cc:	6918      	ldr	r0, [r3, #16]
 800d2ce:	f7ff fcb5 	bl	800cc3c <__hi0bits>
 800d2d2:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800d2d6:	6031      	str	r1, [r6, #0]
 800d2d8:	e7e1      	b.n	800d29e <__d2b+0x72>
 800d2da:	bf00      	nop
 800d2dc:	0800fa80 	.word	0x0800fa80
 800d2e0:	0800fb70 	.word	0x0800fb70

0800d2e4 <__ratio>:
 800d2e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d2e8:	4688      	mov	r8, r1
 800d2ea:	4669      	mov	r1, sp
 800d2ec:	4681      	mov	r9, r0
 800d2ee:	f7ff ff49 	bl	800d184 <__b2d>
 800d2f2:	460f      	mov	r7, r1
 800d2f4:	4604      	mov	r4, r0
 800d2f6:	460d      	mov	r5, r1
 800d2f8:	4640      	mov	r0, r8
 800d2fa:	a901      	add	r1, sp, #4
 800d2fc:	f7ff ff42 	bl	800d184 <__b2d>
 800d300:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d304:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d308:	468b      	mov	fp, r1
 800d30a:	eba3 0c02 	sub.w	ip, r3, r2
 800d30e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d312:	1a9b      	subs	r3, r3, r2
 800d314:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d318:	2b00      	cmp	r3, #0
 800d31a:	bfd5      	itete	le
 800d31c:	460a      	movle	r2, r1
 800d31e:	462a      	movgt	r2, r5
 800d320:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d324:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d328:	bfd8      	it	le
 800d32a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d32e:	465b      	mov	r3, fp
 800d330:	4602      	mov	r2, r0
 800d332:	4639      	mov	r1, r7
 800d334:	4620      	mov	r0, r4
 800d336:	f7f3 f9f9 	bl	800072c <__aeabi_ddiv>
 800d33a:	b003      	add	sp, #12
 800d33c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d340 <__copybits>:
 800d340:	3901      	subs	r1, #1
 800d342:	b570      	push	{r4, r5, r6, lr}
 800d344:	1149      	asrs	r1, r1, #5
 800d346:	6914      	ldr	r4, [r2, #16]
 800d348:	3101      	adds	r1, #1
 800d34a:	f102 0314 	add.w	r3, r2, #20
 800d34e:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d352:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d356:	1f05      	subs	r5, r0, #4
 800d358:	42a3      	cmp	r3, r4
 800d35a:	d30c      	bcc.n	800d376 <__copybits+0x36>
 800d35c:	1aa3      	subs	r3, r4, r2
 800d35e:	3b11      	subs	r3, #17
 800d360:	f023 0303 	bic.w	r3, r3, #3
 800d364:	3211      	adds	r2, #17
 800d366:	42a2      	cmp	r2, r4
 800d368:	bf88      	it	hi
 800d36a:	2300      	movhi	r3, #0
 800d36c:	4418      	add	r0, r3
 800d36e:	2300      	movs	r3, #0
 800d370:	4288      	cmp	r0, r1
 800d372:	d305      	bcc.n	800d380 <__copybits+0x40>
 800d374:	bd70      	pop	{r4, r5, r6, pc}
 800d376:	f853 6b04 	ldr.w	r6, [r3], #4
 800d37a:	f845 6f04 	str.w	r6, [r5, #4]!
 800d37e:	e7eb      	b.n	800d358 <__copybits+0x18>
 800d380:	f840 3b04 	str.w	r3, [r0], #4
 800d384:	e7f4      	b.n	800d370 <__copybits+0x30>

0800d386 <__any_on>:
 800d386:	f100 0214 	add.w	r2, r0, #20
 800d38a:	6900      	ldr	r0, [r0, #16]
 800d38c:	114b      	asrs	r3, r1, #5
 800d38e:	4298      	cmp	r0, r3
 800d390:	b510      	push	{r4, lr}
 800d392:	db11      	blt.n	800d3b8 <__any_on+0x32>
 800d394:	dd0a      	ble.n	800d3ac <__any_on+0x26>
 800d396:	f011 011f 	ands.w	r1, r1, #31
 800d39a:	d007      	beq.n	800d3ac <__any_on+0x26>
 800d39c:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d3a0:	fa24 f001 	lsr.w	r0, r4, r1
 800d3a4:	fa00 f101 	lsl.w	r1, r0, r1
 800d3a8:	428c      	cmp	r4, r1
 800d3aa:	d10b      	bne.n	800d3c4 <__any_on+0x3e>
 800d3ac:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d3b0:	4293      	cmp	r3, r2
 800d3b2:	d803      	bhi.n	800d3bc <__any_on+0x36>
 800d3b4:	2000      	movs	r0, #0
 800d3b6:	bd10      	pop	{r4, pc}
 800d3b8:	4603      	mov	r3, r0
 800d3ba:	e7f7      	b.n	800d3ac <__any_on+0x26>
 800d3bc:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d3c0:	2900      	cmp	r1, #0
 800d3c2:	d0f5      	beq.n	800d3b0 <__any_on+0x2a>
 800d3c4:	2001      	movs	r0, #1
 800d3c6:	e7f6      	b.n	800d3b6 <__any_on+0x30>

0800d3c8 <__ssputs_r>:
 800d3c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3cc:	688e      	ldr	r6, [r1, #8]
 800d3ce:	4682      	mov	sl, r0
 800d3d0:	429e      	cmp	r6, r3
 800d3d2:	460c      	mov	r4, r1
 800d3d4:	4690      	mov	r8, r2
 800d3d6:	461f      	mov	r7, r3
 800d3d8:	d838      	bhi.n	800d44c <__ssputs_r+0x84>
 800d3da:	898a      	ldrh	r2, [r1, #12]
 800d3dc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800d3e0:	d032      	beq.n	800d448 <__ssputs_r+0x80>
 800d3e2:	6825      	ldr	r5, [r4, #0]
 800d3e4:	6909      	ldr	r1, [r1, #16]
 800d3e6:	3301      	adds	r3, #1
 800d3e8:	eba5 0901 	sub.w	r9, r5, r1
 800d3ec:	6965      	ldr	r5, [r4, #20]
 800d3ee:	444b      	add	r3, r9
 800d3f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d3f4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d3f8:	106d      	asrs	r5, r5, #1
 800d3fa:	429d      	cmp	r5, r3
 800d3fc:	bf38      	it	cc
 800d3fe:	461d      	movcc	r5, r3
 800d400:	0553      	lsls	r3, r2, #21
 800d402:	d531      	bpl.n	800d468 <__ssputs_r+0xa0>
 800d404:	4629      	mov	r1, r5
 800d406:	f7fb ff39 	bl	800927c <_malloc_r>
 800d40a:	4606      	mov	r6, r0
 800d40c:	b950      	cbnz	r0, 800d424 <__ssputs_r+0x5c>
 800d40e:	230c      	movs	r3, #12
 800d410:	f04f 30ff 	mov.w	r0, #4294967295
 800d414:	f8ca 3000 	str.w	r3, [sl]
 800d418:	89a3      	ldrh	r3, [r4, #12]
 800d41a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d41e:	81a3      	strh	r3, [r4, #12]
 800d420:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d424:	464a      	mov	r2, r9
 800d426:	6921      	ldr	r1, [r4, #16]
 800d428:	f7fb fe96 	bl	8009158 <memcpy>
 800d42c:	89a3      	ldrh	r3, [r4, #12]
 800d42e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800d432:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d436:	81a3      	strh	r3, [r4, #12]
 800d438:	6126      	str	r6, [r4, #16]
 800d43a:	444e      	add	r6, r9
 800d43c:	6026      	str	r6, [r4, #0]
 800d43e:	463e      	mov	r6, r7
 800d440:	6165      	str	r5, [r4, #20]
 800d442:	eba5 0509 	sub.w	r5, r5, r9
 800d446:	60a5      	str	r5, [r4, #8]
 800d448:	42be      	cmp	r6, r7
 800d44a:	d900      	bls.n	800d44e <__ssputs_r+0x86>
 800d44c:	463e      	mov	r6, r7
 800d44e:	4632      	mov	r2, r6
 800d450:	4641      	mov	r1, r8
 800d452:	6820      	ldr	r0, [r4, #0]
 800d454:	f000 ff02 	bl	800e25c <memmove>
 800d458:	68a3      	ldr	r3, [r4, #8]
 800d45a:	2000      	movs	r0, #0
 800d45c:	1b9b      	subs	r3, r3, r6
 800d45e:	60a3      	str	r3, [r4, #8]
 800d460:	6823      	ldr	r3, [r4, #0]
 800d462:	4433      	add	r3, r6
 800d464:	6023      	str	r3, [r4, #0]
 800d466:	e7db      	b.n	800d420 <__ssputs_r+0x58>
 800d468:	462a      	mov	r2, r5
 800d46a:	f000 ff11 	bl	800e290 <_realloc_r>
 800d46e:	4606      	mov	r6, r0
 800d470:	2800      	cmp	r0, #0
 800d472:	d1e1      	bne.n	800d438 <__ssputs_r+0x70>
 800d474:	4650      	mov	r0, sl
 800d476:	6921      	ldr	r1, [r4, #16]
 800d478:	f7fb fe98 	bl	80091ac <_free_r>
 800d47c:	e7c7      	b.n	800d40e <__ssputs_r+0x46>
	...

0800d480 <_svfiprintf_r>:
 800d480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d484:	4698      	mov	r8, r3
 800d486:	898b      	ldrh	r3, [r1, #12]
 800d488:	4607      	mov	r7, r0
 800d48a:	061b      	lsls	r3, r3, #24
 800d48c:	460d      	mov	r5, r1
 800d48e:	4614      	mov	r4, r2
 800d490:	b09d      	sub	sp, #116	; 0x74
 800d492:	d50e      	bpl.n	800d4b2 <_svfiprintf_r+0x32>
 800d494:	690b      	ldr	r3, [r1, #16]
 800d496:	b963      	cbnz	r3, 800d4b2 <_svfiprintf_r+0x32>
 800d498:	2140      	movs	r1, #64	; 0x40
 800d49a:	f7fb feef 	bl	800927c <_malloc_r>
 800d49e:	6028      	str	r0, [r5, #0]
 800d4a0:	6128      	str	r0, [r5, #16]
 800d4a2:	b920      	cbnz	r0, 800d4ae <_svfiprintf_r+0x2e>
 800d4a4:	230c      	movs	r3, #12
 800d4a6:	603b      	str	r3, [r7, #0]
 800d4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800d4ac:	e0d1      	b.n	800d652 <_svfiprintf_r+0x1d2>
 800d4ae:	2340      	movs	r3, #64	; 0x40
 800d4b0:	616b      	str	r3, [r5, #20]
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	9309      	str	r3, [sp, #36]	; 0x24
 800d4b6:	2320      	movs	r3, #32
 800d4b8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d4bc:	2330      	movs	r3, #48	; 0x30
 800d4be:	f04f 0901 	mov.w	r9, #1
 800d4c2:	f8cd 800c 	str.w	r8, [sp, #12]
 800d4c6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800d66c <_svfiprintf_r+0x1ec>
 800d4ca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d4ce:	4623      	mov	r3, r4
 800d4d0:	469a      	mov	sl, r3
 800d4d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d4d6:	b10a      	cbz	r2, 800d4dc <_svfiprintf_r+0x5c>
 800d4d8:	2a25      	cmp	r2, #37	; 0x25
 800d4da:	d1f9      	bne.n	800d4d0 <_svfiprintf_r+0x50>
 800d4dc:	ebba 0b04 	subs.w	fp, sl, r4
 800d4e0:	d00b      	beq.n	800d4fa <_svfiprintf_r+0x7a>
 800d4e2:	465b      	mov	r3, fp
 800d4e4:	4622      	mov	r2, r4
 800d4e6:	4629      	mov	r1, r5
 800d4e8:	4638      	mov	r0, r7
 800d4ea:	f7ff ff6d 	bl	800d3c8 <__ssputs_r>
 800d4ee:	3001      	adds	r0, #1
 800d4f0:	f000 80aa 	beq.w	800d648 <_svfiprintf_r+0x1c8>
 800d4f4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d4f6:	445a      	add	r2, fp
 800d4f8:	9209      	str	r2, [sp, #36]	; 0x24
 800d4fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	f000 80a2 	beq.w	800d648 <_svfiprintf_r+0x1c8>
 800d504:	2300      	movs	r3, #0
 800d506:	f04f 32ff 	mov.w	r2, #4294967295
 800d50a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d50e:	f10a 0a01 	add.w	sl, sl, #1
 800d512:	9304      	str	r3, [sp, #16]
 800d514:	9307      	str	r3, [sp, #28]
 800d516:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d51a:	931a      	str	r3, [sp, #104]	; 0x68
 800d51c:	4654      	mov	r4, sl
 800d51e:	2205      	movs	r2, #5
 800d520:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d524:	4851      	ldr	r0, [pc, #324]	; (800d66c <_svfiprintf_r+0x1ec>)
 800d526:	f7ff fa7d 	bl	800ca24 <memchr>
 800d52a:	9a04      	ldr	r2, [sp, #16]
 800d52c:	b9d8      	cbnz	r0, 800d566 <_svfiprintf_r+0xe6>
 800d52e:	06d0      	lsls	r0, r2, #27
 800d530:	bf44      	itt	mi
 800d532:	2320      	movmi	r3, #32
 800d534:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d538:	0711      	lsls	r1, r2, #28
 800d53a:	bf44      	itt	mi
 800d53c:	232b      	movmi	r3, #43	; 0x2b
 800d53e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d542:	f89a 3000 	ldrb.w	r3, [sl]
 800d546:	2b2a      	cmp	r3, #42	; 0x2a
 800d548:	d015      	beq.n	800d576 <_svfiprintf_r+0xf6>
 800d54a:	4654      	mov	r4, sl
 800d54c:	2000      	movs	r0, #0
 800d54e:	f04f 0c0a 	mov.w	ip, #10
 800d552:	9a07      	ldr	r2, [sp, #28]
 800d554:	4621      	mov	r1, r4
 800d556:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d55a:	3b30      	subs	r3, #48	; 0x30
 800d55c:	2b09      	cmp	r3, #9
 800d55e:	d94e      	bls.n	800d5fe <_svfiprintf_r+0x17e>
 800d560:	b1b0      	cbz	r0, 800d590 <_svfiprintf_r+0x110>
 800d562:	9207      	str	r2, [sp, #28]
 800d564:	e014      	b.n	800d590 <_svfiprintf_r+0x110>
 800d566:	eba0 0308 	sub.w	r3, r0, r8
 800d56a:	fa09 f303 	lsl.w	r3, r9, r3
 800d56e:	4313      	orrs	r3, r2
 800d570:	46a2      	mov	sl, r4
 800d572:	9304      	str	r3, [sp, #16]
 800d574:	e7d2      	b.n	800d51c <_svfiprintf_r+0x9c>
 800d576:	9b03      	ldr	r3, [sp, #12]
 800d578:	1d19      	adds	r1, r3, #4
 800d57a:	681b      	ldr	r3, [r3, #0]
 800d57c:	9103      	str	r1, [sp, #12]
 800d57e:	2b00      	cmp	r3, #0
 800d580:	bfbb      	ittet	lt
 800d582:	425b      	neglt	r3, r3
 800d584:	f042 0202 	orrlt.w	r2, r2, #2
 800d588:	9307      	strge	r3, [sp, #28]
 800d58a:	9307      	strlt	r3, [sp, #28]
 800d58c:	bfb8      	it	lt
 800d58e:	9204      	strlt	r2, [sp, #16]
 800d590:	7823      	ldrb	r3, [r4, #0]
 800d592:	2b2e      	cmp	r3, #46	; 0x2e
 800d594:	d10c      	bne.n	800d5b0 <_svfiprintf_r+0x130>
 800d596:	7863      	ldrb	r3, [r4, #1]
 800d598:	2b2a      	cmp	r3, #42	; 0x2a
 800d59a:	d135      	bne.n	800d608 <_svfiprintf_r+0x188>
 800d59c:	9b03      	ldr	r3, [sp, #12]
 800d59e:	3402      	adds	r4, #2
 800d5a0:	1d1a      	adds	r2, r3, #4
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	9203      	str	r2, [sp, #12]
 800d5a6:	2b00      	cmp	r3, #0
 800d5a8:	bfb8      	it	lt
 800d5aa:	f04f 33ff 	movlt.w	r3, #4294967295
 800d5ae:	9305      	str	r3, [sp, #20]
 800d5b0:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800d670 <_svfiprintf_r+0x1f0>
 800d5b4:	2203      	movs	r2, #3
 800d5b6:	4650      	mov	r0, sl
 800d5b8:	7821      	ldrb	r1, [r4, #0]
 800d5ba:	f7ff fa33 	bl	800ca24 <memchr>
 800d5be:	b140      	cbz	r0, 800d5d2 <_svfiprintf_r+0x152>
 800d5c0:	2340      	movs	r3, #64	; 0x40
 800d5c2:	eba0 000a 	sub.w	r0, r0, sl
 800d5c6:	fa03 f000 	lsl.w	r0, r3, r0
 800d5ca:	9b04      	ldr	r3, [sp, #16]
 800d5cc:	3401      	adds	r4, #1
 800d5ce:	4303      	orrs	r3, r0
 800d5d0:	9304      	str	r3, [sp, #16]
 800d5d2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d5d6:	2206      	movs	r2, #6
 800d5d8:	4826      	ldr	r0, [pc, #152]	; (800d674 <_svfiprintf_r+0x1f4>)
 800d5da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d5de:	f7ff fa21 	bl	800ca24 <memchr>
 800d5e2:	2800      	cmp	r0, #0
 800d5e4:	d038      	beq.n	800d658 <_svfiprintf_r+0x1d8>
 800d5e6:	4b24      	ldr	r3, [pc, #144]	; (800d678 <_svfiprintf_r+0x1f8>)
 800d5e8:	bb1b      	cbnz	r3, 800d632 <_svfiprintf_r+0x1b2>
 800d5ea:	9b03      	ldr	r3, [sp, #12]
 800d5ec:	3307      	adds	r3, #7
 800d5ee:	f023 0307 	bic.w	r3, r3, #7
 800d5f2:	3308      	adds	r3, #8
 800d5f4:	9303      	str	r3, [sp, #12]
 800d5f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d5f8:	4433      	add	r3, r6
 800d5fa:	9309      	str	r3, [sp, #36]	; 0x24
 800d5fc:	e767      	b.n	800d4ce <_svfiprintf_r+0x4e>
 800d5fe:	460c      	mov	r4, r1
 800d600:	2001      	movs	r0, #1
 800d602:	fb0c 3202 	mla	r2, ip, r2, r3
 800d606:	e7a5      	b.n	800d554 <_svfiprintf_r+0xd4>
 800d608:	2300      	movs	r3, #0
 800d60a:	f04f 0c0a 	mov.w	ip, #10
 800d60e:	4619      	mov	r1, r3
 800d610:	3401      	adds	r4, #1
 800d612:	9305      	str	r3, [sp, #20]
 800d614:	4620      	mov	r0, r4
 800d616:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d61a:	3a30      	subs	r2, #48	; 0x30
 800d61c:	2a09      	cmp	r2, #9
 800d61e:	d903      	bls.n	800d628 <_svfiprintf_r+0x1a8>
 800d620:	2b00      	cmp	r3, #0
 800d622:	d0c5      	beq.n	800d5b0 <_svfiprintf_r+0x130>
 800d624:	9105      	str	r1, [sp, #20]
 800d626:	e7c3      	b.n	800d5b0 <_svfiprintf_r+0x130>
 800d628:	4604      	mov	r4, r0
 800d62a:	2301      	movs	r3, #1
 800d62c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d630:	e7f0      	b.n	800d614 <_svfiprintf_r+0x194>
 800d632:	ab03      	add	r3, sp, #12
 800d634:	9300      	str	r3, [sp, #0]
 800d636:	462a      	mov	r2, r5
 800d638:	4638      	mov	r0, r7
 800d63a:	4b10      	ldr	r3, [pc, #64]	; (800d67c <_svfiprintf_r+0x1fc>)
 800d63c:	a904      	add	r1, sp, #16
 800d63e:	f7fb ff2f 	bl	80094a0 <_printf_float>
 800d642:	1c42      	adds	r2, r0, #1
 800d644:	4606      	mov	r6, r0
 800d646:	d1d6      	bne.n	800d5f6 <_svfiprintf_r+0x176>
 800d648:	89ab      	ldrh	r3, [r5, #12]
 800d64a:	065b      	lsls	r3, r3, #25
 800d64c:	f53f af2c 	bmi.w	800d4a8 <_svfiprintf_r+0x28>
 800d650:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d652:	b01d      	add	sp, #116	; 0x74
 800d654:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d658:	ab03      	add	r3, sp, #12
 800d65a:	9300      	str	r3, [sp, #0]
 800d65c:	462a      	mov	r2, r5
 800d65e:	4638      	mov	r0, r7
 800d660:	4b06      	ldr	r3, [pc, #24]	; (800d67c <_svfiprintf_r+0x1fc>)
 800d662:	a904      	add	r1, sp, #16
 800d664:	f7fc f9b8 	bl	80099d8 <_printf_i>
 800d668:	e7eb      	b.n	800d642 <_svfiprintf_r+0x1c2>
 800d66a:	bf00      	nop
 800d66c:	0800fccc 	.word	0x0800fccc
 800d670:	0800fcd2 	.word	0x0800fcd2
 800d674:	0800fcd6 	.word	0x0800fcd6
 800d678:	080094a1 	.word	0x080094a1
 800d67c:	0800d3c9 	.word	0x0800d3c9

0800d680 <_sungetc_r>:
 800d680:	b538      	push	{r3, r4, r5, lr}
 800d682:	1c4b      	adds	r3, r1, #1
 800d684:	4614      	mov	r4, r2
 800d686:	d103      	bne.n	800d690 <_sungetc_r+0x10>
 800d688:	f04f 35ff 	mov.w	r5, #4294967295
 800d68c:	4628      	mov	r0, r5
 800d68e:	bd38      	pop	{r3, r4, r5, pc}
 800d690:	8993      	ldrh	r3, [r2, #12]
 800d692:	b2cd      	uxtb	r5, r1
 800d694:	f023 0320 	bic.w	r3, r3, #32
 800d698:	8193      	strh	r3, [r2, #12]
 800d69a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d69c:	6852      	ldr	r2, [r2, #4]
 800d69e:	b18b      	cbz	r3, 800d6c4 <_sungetc_r+0x44>
 800d6a0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800d6a2:	4293      	cmp	r3, r2
 800d6a4:	dd08      	ble.n	800d6b8 <_sungetc_r+0x38>
 800d6a6:	6823      	ldr	r3, [r4, #0]
 800d6a8:	1e5a      	subs	r2, r3, #1
 800d6aa:	6022      	str	r2, [r4, #0]
 800d6ac:	f803 5c01 	strb.w	r5, [r3, #-1]
 800d6b0:	6863      	ldr	r3, [r4, #4]
 800d6b2:	3301      	adds	r3, #1
 800d6b4:	6063      	str	r3, [r4, #4]
 800d6b6:	e7e9      	b.n	800d68c <_sungetc_r+0xc>
 800d6b8:	4621      	mov	r1, r4
 800d6ba:	f000 fd37 	bl	800e12c <__submore>
 800d6be:	2800      	cmp	r0, #0
 800d6c0:	d0f1      	beq.n	800d6a6 <_sungetc_r+0x26>
 800d6c2:	e7e1      	b.n	800d688 <_sungetc_r+0x8>
 800d6c4:	6921      	ldr	r1, [r4, #16]
 800d6c6:	6823      	ldr	r3, [r4, #0]
 800d6c8:	b151      	cbz	r1, 800d6e0 <_sungetc_r+0x60>
 800d6ca:	4299      	cmp	r1, r3
 800d6cc:	d208      	bcs.n	800d6e0 <_sungetc_r+0x60>
 800d6ce:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800d6d2:	42a9      	cmp	r1, r5
 800d6d4:	d104      	bne.n	800d6e0 <_sungetc_r+0x60>
 800d6d6:	3b01      	subs	r3, #1
 800d6d8:	3201      	adds	r2, #1
 800d6da:	6023      	str	r3, [r4, #0]
 800d6dc:	6062      	str	r2, [r4, #4]
 800d6de:	e7d5      	b.n	800d68c <_sungetc_r+0xc>
 800d6e0:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 800d6e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6e8:	6363      	str	r3, [r4, #52]	; 0x34
 800d6ea:	2303      	movs	r3, #3
 800d6ec:	63a3      	str	r3, [r4, #56]	; 0x38
 800d6ee:	4623      	mov	r3, r4
 800d6f0:	f803 5f46 	strb.w	r5, [r3, #70]!
 800d6f4:	6023      	str	r3, [r4, #0]
 800d6f6:	2301      	movs	r3, #1
 800d6f8:	e7dc      	b.n	800d6b4 <_sungetc_r+0x34>

0800d6fa <__ssrefill_r>:
 800d6fa:	b510      	push	{r4, lr}
 800d6fc:	460c      	mov	r4, r1
 800d6fe:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800d700:	b169      	cbz	r1, 800d71e <__ssrefill_r+0x24>
 800d702:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d706:	4299      	cmp	r1, r3
 800d708:	d001      	beq.n	800d70e <__ssrefill_r+0x14>
 800d70a:	f7fb fd4f 	bl	80091ac <_free_r>
 800d70e:	2000      	movs	r0, #0
 800d710:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d712:	6360      	str	r0, [r4, #52]	; 0x34
 800d714:	6063      	str	r3, [r4, #4]
 800d716:	b113      	cbz	r3, 800d71e <__ssrefill_r+0x24>
 800d718:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800d71a:	6023      	str	r3, [r4, #0]
 800d71c:	bd10      	pop	{r4, pc}
 800d71e:	6923      	ldr	r3, [r4, #16]
 800d720:	f04f 30ff 	mov.w	r0, #4294967295
 800d724:	6023      	str	r3, [r4, #0]
 800d726:	2300      	movs	r3, #0
 800d728:	6063      	str	r3, [r4, #4]
 800d72a:	89a3      	ldrh	r3, [r4, #12]
 800d72c:	f043 0320 	orr.w	r3, r3, #32
 800d730:	81a3      	strh	r3, [r4, #12]
 800d732:	e7f3      	b.n	800d71c <__ssrefill_r+0x22>

0800d734 <__ssvfiscanf_r>:
 800d734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d738:	460c      	mov	r4, r1
 800d73a:	2100      	movs	r1, #0
 800d73c:	4606      	mov	r6, r0
 800d73e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 800d742:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 800d746:	49a7      	ldr	r1, [pc, #668]	; (800d9e4 <__ssvfiscanf_r+0x2b0>)
 800d748:	f10d 0804 	add.w	r8, sp, #4
 800d74c:	91a0      	str	r1, [sp, #640]	; 0x280
 800d74e:	49a6      	ldr	r1, [pc, #664]	; (800d9e8 <__ssvfiscanf_r+0x2b4>)
 800d750:	4fa6      	ldr	r7, [pc, #664]	; (800d9ec <__ssvfiscanf_r+0x2b8>)
 800d752:	f8df 929c 	ldr.w	r9, [pc, #668]	; 800d9f0 <__ssvfiscanf_r+0x2bc>
 800d756:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800d75a:	91a1      	str	r1, [sp, #644]	; 0x284
 800d75c:	9300      	str	r3, [sp, #0]
 800d75e:	7813      	ldrb	r3, [r2, #0]
 800d760:	2b00      	cmp	r3, #0
 800d762:	f000 815c 	beq.w	800da1e <__ssvfiscanf_r+0x2ea>
 800d766:	5dd9      	ldrb	r1, [r3, r7]
 800d768:	1c55      	adds	r5, r2, #1
 800d76a:	f011 0108 	ands.w	r1, r1, #8
 800d76e:	d019      	beq.n	800d7a4 <__ssvfiscanf_r+0x70>
 800d770:	6863      	ldr	r3, [r4, #4]
 800d772:	2b00      	cmp	r3, #0
 800d774:	dd0f      	ble.n	800d796 <__ssvfiscanf_r+0x62>
 800d776:	6823      	ldr	r3, [r4, #0]
 800d778:	781a      	ldrb	r2, [r3, #0]
 800d77a:	5cba      	ldrb	r2, [r7, r2]
 800d77c:	0712      	lsls	r2, r2, #28
 800d77e:	d401      	bmi.n	800d784 <__ssvfiscanf_r+0x50>
 800d780:	462a      	mov	r2, r5
 800d782:	e7ec      	b.n	800d75e <__ssvfiscanf_r+0x2a>
 800d784:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d786:	3301      	adds	r3, #1
 800d788:	3201      	adds	r2, #1
 800d78a:	9245      	str	r2, [sp, #276]	; 0x114
 800d78c:	6862      	ldr	r2, [r4, #4]
 800d78e:	6023      	str	r3, [r4, #0]
 800d790:	3a01      	subs	r2, #1
 800d792:	6062      	str	r2, [r4, #4]
 800d794:	e7ec      	b.n	800d770 <__ssvfiscanf_r+0x3c>
 800d796:	4621      	mov	r1, r4
 800d798:	4630      	mov	r0, r6
 800d79a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d79c:	4798      	blx	r3
 800d79e:	2800      	cmp	r0, #0
 800d7a0:	d0e9      	beq.n	800d776 <__ssvfiscanf_r+0x42>
 800d7a2:	e7ed      	b.n	800d780 <__ssvfiscanf_r+0x4c>
 800d7a4:	2b25      	cmp	r3, #37	; 0x25
 800d7a6:	d012      	beq.n	800d7ce <__ssvfiscanf_r+0x9a>
 800d7a8:	469a      	mov	sl, r3
 800d7aa:	6863      	ldr	r3, [r4, #4]
 800d7ac:	2b00      	cmp	r3, #0
 800d7ae:	f340 8094 	ble.w	800d8da <__ssvfiscanf_r+0x1a6>
 800d7b2:	6822      	ldr	r2, [r4, #0]
 800d7b4:	7813      	ldrb	r3, [r2, #0]
 800d7b6:	4553      	cmp	r3, sl
 800d7b8:	f040 8131 	bne.w	800da1e <__ssvfiscanf_r+0x2ea>
 800d7bc:	6863      	ldr	r3, [r4, #4]
 800d7be:	3201      	adds	r2, #1
 800d7c0:	3b01      	subs	r3, #1
 800d7c2:	6063      	str	r3, [r4, #4]
 800d7c4:	9b45      	ldr	r3, [sp, #276]	; 0x114
 800d7c6:	6022      	str	r2, [r4, #0]
 800d7c8:	3301      	adds	r3, #1
 800d7ca:	9345      	str	r3, [sp, #276]	; 0x114
 800d7cc:	e7d8      	b.n	800d780 <__ssvfiscanf_r+0x4c>
 800d7ce:	9141      	str	r1, [sp, #260]	; 0x104
 800d7d0:	9143      	str	r1, [sp, #268]	; 0x10c
 800d7d2:	7853      	ldrb	r3, [r2, #1]
 800d7d4:	2b2a      	cmp	r3, #42	; 0x2a
 800d7d6:	bf04      	itt	eq
 800d7d8:	2310      	moveq	r3, #16
 800d7da:	1c95      	addeq	r5, r2, #2
 800d7dc:	f04f 020a 	mov.w	r2, #10
 800d7e0:	bf08      	it	eq
 800d7e2:	9341      	streq	r3, [sp, #260]	; 0x104
 800d7e4:	46aa      	mov	sl, r5
 800d7e6:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800d7ea:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 800d7ee:	2b09      	cmp	r3, #9
 800d7f0:	d91d      	bls.n	800d82e <__ssvfiscanf_r+0xfa>
 800d7f2:	2203      	movs	r2, #3
 800d7f4:	487e      	ldr	r0, [pc, #504]	; (800d9f0 <__ssvfiscanf_r+0x2bc>)
 800d7f6:	f7ff f915 	bl	800ca24 <memchr>
 800d7fa:	b140      	cbz	r0, 800d80e <__ssvfiscanf_r+0xda>
 800d7fc:	2301      	movs	r3, #1
 800d7fe:	4655      	mov	r5, sl
 800d800:	eba0 0009 	sub.w	r0, r0, r9
 800d804:	fa03 f000 	lsl.w	r0, r3, r0
 800d808:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d80a:	4318      	orrs	r0, r3
 800d80c:	9041      	str	r0, [sp, #260]	; 0x104
 800d80e:	f815 3b01 	ldrb.w	r3, [r5], #1
 800d812:	2b78      	cmp	r3, #120	; 0x78
 800d814:	d806      	bhi.n	800d824 <__ssvfiscanf_r+0xf0>
 800d816:	2b57      	cmp	r3, #87	; 0x57
 800d818:	d810      	bhi.n	800d83c <__ssvfiscanf_r+0x108>
 800d81a:	2b25      	cmp	r3, #37	; 0x25
 800d81c:	d0c4      	beq.n	800d7a8 <__ssvfiscanf_r+0x74>
 800d81e:	d857      	bhi.n	800d8d0 <__ssvfiscanf_r+0x19c>
 800d820:	2b00      	cmp	r3, #0
 800d822:	d065      	beq.n	800d8f0 <__ssvfiscanf_r+0x1bc>
 800d824:	2303      	movs	r3, #3
 800d826:	9347      	str	r3, [sp, #284]	; 0x11c
 800d828:	230a      	movs	r3, #10
 800d82a:	9342      	str	r3, [sp, #264]	; 0x108
 800d82c:	e072      	b.n	800d914 <__ssvfiscanf_r+0x1e0>
 800d82e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 800d830:	4655      	mov	r5, sl
 800d832:	fb02 1103 	mla	r1, r2, r3, r1
 800d836:	3930      	subs	r1, #48	; 0x30
 800d838:	9143      	str	r1, [sp, #268]	; 0x10c
 800d83a:	e7d3      	b.n	800d7e4 <__ssvfiscanf_r+0xb0>
 800d83c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 800d840:	2a20      	cmp	r2, #32
 800d842:	d8ef      	bhi.n	800d824 <__ssvfiscanf_r+0xf0>
 800d844:	a101      	add	r1, pc, #4	; (adr r1, 800d84c <__ssvfiscanf_r+0x118>)
 800d846:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800d84a:	bf00      	nop
 800d84c:	0800d8ff 	.word	0x0800d8ff
 800d850:	0800d825 	.word	0x0800d825
 800d854:	0800d825 	.word	0x0800d825
 800d858:	0800d95d 	.word	0x0800d95d
 800d85c:	0800d825 	.word	0x0800d825
 800d860:	0800d825 	.word	0x0800d825
 800d864:	0800d825 	.word	0x0800d825
 800d868:	0800d825 	.word	0x0800d825
 800d86c:	0800d825 	.word	0x0800d825
 800d870:	0800d825 	.word	0x0800d825
 800d874:	0800d825 	.word	0x0800d825
 800d878:	0800d973 	.word	0x0800d973
 800d87c:	0800d949 	.word	0x0800d949
 800d880:	0800d8d7 	.word	0x0800d8d7
 800d884:	0800d8d7 	.word	0x0800d8d7
 800d888:	0800d8d7 	.word	0x0800d8d7
 800d88c:	0800d825 	.word	0x0800d825
 800d890:	0800d94d 	.word	0x0800d94d
 800d894:	0800d825 	.word	0x0800d825
 800d898:	0800d825 	.word	0x0800d825
 800d89c:	0800d825 	.word	0x0800d825
 800d8a0:	0800d825 	.word	0x0800d825
 800d8a4:	0800d983 	.word	0x0800d983
 800d8a8:	0800d955 	.word	0x0800d955
 800d8ac:	0800d8f7 	.word	0x0800d8f7
 800d8b0:	0800d825 	.word	0x0800d825
 800d8b4:	0800d825 	.word	0x0800d825
 800d8b8:	0800d97f 	.word	0x0800d97f
 800d8bc:	0800d825 	.word	0x0800d825
 800d8c0:	0800d949 	.word	0x0800d949
 800d8c4:	0800d825 	.word	0x0800d825
 800d8c8:	0800d825 	.word	0x0800d825
 800d8cc:	0800d8ff 	.word	0x0800d8ff
 800d8d0:	3b45      	subs	r3, #69	; 0x45
 800d8d2:	2b02      	cmp	r3, #2
 800d8d4:	d8a6      	bhi.n	800d824 <__ssvfiscanf_r+0xf0>
 800d8d6:	2305      	movs	r3, #5
 800d8d8:	e01b      	b.n	800d912 <__ssvfiscanf_r+0x1de>
 800d8da:	4621      	mov	r1, r4
 800d8dc:	4630      	mov	r0, r6
 800d8de:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d8e0:	4798      	blx	r3
 800d8e2:	2800      	cmp	r0, #0
 800d8e4:	f43f af65 	beq.w	800d7b2 <__ssvfiscanf_r+0x7e>
 800d8e8:	9844      	ldr	r0, [sp, #272]	; 0x110
 800d8ea:	2800      	cmp	r0, #0
 800d8ec:	f040 808d 	bne.w	800da0a <__ssvfiscanf_r+0x2d6>
 800d8f0:	f04f 30ff 	mov.w	r0, #4294967295
 800d8f4:	e08f      	b.n	800da16 <__ssvfiscanf_r+0x2e2>
 800d8f6:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d8f8:	f042 0220 	orr.w	r2, r2, #32
 800d8fc:	9241      	str	r2, [sp, #260]	; 0x104
 800d8fe:	9a41      	ldr	r2, [sp, #260]	; 0x104
 800d900:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800d904:	9241      	str	r2, [sp, #260]	; 0x104
 800d906:	2210      	movs	r2, #16
 800d908:	2b6f      	cmp	r3, #111	; 0x6f
 800d90a:	bf34      	ite	cc
 800d90c:	2303      	movcc	r3, #3
 800d90e:	2304      	movcs	r3, #4
 800d910:	9242      	str	r2, [sp, #264]	; 0x108
 800d912:	9347      	str	r3, [sp, #284]	; 0x11c
 800d914:	6863      	ldr	r3, [r4, #4]
 800d916:	2b00      	cmp	r3, #0
 800d918:	dd42      	ble.n	800d9a0 <__ssvfiscanf_r+0x26c>
 800d91a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d91c:	0659      	lsls	r1, r3, #25
 800d91e:	d404      	bmi.n	800d92a <__ssvfiscanf_r+0x1f6>
 800d920:	6823      	ldr	r3, [r4, #0]
 800d922:	781a      	ldrb	r2, [r3, #0]
 800d924:	5cba      	ldrb	r2, [r7, r2]
 800d926:	0712      	lsls	r2, r2, #28
 800d928:	d441      	bmi.n	800d9ae <__ssvfiscanf_r+0x27a>
 800d92a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800d92c:	2b02      	cmp	r3, #2
 800d92e:	dc50      	bgt.n	800d9d2 <__ssvfiscanf_r+0x29e>
 800d930:	466b      	mov	r3, sp
 800d932:	4622      	mov	r2, r4
 800d934:	4630      	mov	r0, r6
 800d936:	a941      	add	r1, sp, #260	; 0x104
 800d938:	f000 f9ce 	bl	800dcd8 <_scanf_chars>
 800d93c:	2801      	cmp	r0, #1
 800d93e:	d06e      	beq.n	800da1e <__ssvfiscanf_r+0x2ea>
 800d940:	2802      	cmp	r0, #2
 800d942:	f47f af1d 	bne.w	800d780 <__ssvfiscanf_r+0x4c>
 800d946:	e7cf      	b.n	800d8e8 <__ssvfiscanf_r+0x1b4>
 800d948:	220a      	movs	r2, #10
 800d94a:	e7dd      	b.n	800d908 <__ssvfiscanf_r+0x1d4>
 800d94c:	2300      	movs	r3, #0
 800d94e:	9342      	str	r3, [sp, #264]	; 0x108
 800d950:	2303      	movs	r3, #3
 800d952:	e7de      	b.n	800d912 <__ssvfiscanf_r+0x1de>
 800d954:	2308      	movs	r3, #8
 800d956:	9342      	str	r3, [sp, #264]	; 0x108
 800d958:	2304      	movs	r3, #4
 800d95a:	e7da      	b.n	800d912 <__ssvfiscanf_r+0x1de>
 800d95c:	4629      	mov	r1, r5
 800d95e:	4640      	mov	r0, r8
 800d960:	f000 fb24 	bl	800dfac <__sccl>
 800d964:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d966:	4605      	mov	r5, r0
 800d968:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d96c:	9341      	str	r3, [sp, #260]	; 0x104
 800d96e:	2301      	movs	r3, #1
 800d970:	e7cf      	b.n	800d912 <__ssvfiscanf_r+0x1de>
 800d972:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800d974:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d978:	9341      	str	r3, [sp, #260]	; 0x104
 800d97a:	2300      	movs	r3, #0
 800d97c:	e7c9      	b.n	800d912 <__ssvfiscanf_r+0x1de>
 800d97e:	2302      	movs	r3, #2
 800d980:	e7c7      	b.n	800d912 <__ssvfiscanf_r+0x1de>
 800d982:	9841      	ldr	r0, [sp, #260]	; 0x104
 800d984:	06c3      	lsls	r3, r0, #27
 800d986:	f53f aefb 	bmi.w	800d780 <__ssvfiscanf_r+0x4c>
 800d98a:	9b00      	ldr	r3, [sp, #0]
 800d98c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d98e:	1d19      	adds	r1, r3, #4
 800d990:	9100      	str	r1, [sp, #0]
 800d992:	681b      	ldr	r3, [r3, #0]
 800d994:	f010 0f01 	tst.w	r0, #1
 800d998:	bf14      	ite	ne
 800d99a:	801a      	strhne	r2, [r3, #0]
 800d99c:	601a      	streq	r2, [r3, #0]
 800d99e:	e6ef      	b.n	800d780 <__ssvfiscanf_r+0x4c>
 800d9a0:	4621      	mov	r1, r4
 800d9a2:	4630      	mov	r0, r6
 800d9a4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d9a6:	4798      	blx	r3
 800d9a8:	2800      	cmp	r0, #0
 800d9aa:	d0b6      	beq.n	800d91a <__ssvfiscanf_r+0x1e6>
 800d9ac:	e79c      	b.n	800d8e8 <__ssvfiscanf_r+0x1b4>
 800d9ae:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800d9b0:	3201      	adds	r2, #1
 800d9b2:	9245      	str	r2, [sp, #276]	; 0x114
 800d9b4:	6862      	ldr	r2, [r4, #4]
 800d9b6:	3a01      	subs	r2, #1
 800d9b8:	2a00      	cmp	r2, #0
 800d9ba:	6062      	str	r2, [r4, #4]
 800d9bc:	dd02      	ble.n	800d9c4 <__ssvfiscanf_r+0x290>
 800d9be:	3301      	adds	r3, #1
 800d9c0:	6023      	str	r3, [r4, #0]
 800d9c2:	e7ad      	b.n	800d920 <__ssvfiscanf_r+0x1ec>
 800d9c4:	4621      	mov	r1, r4
 800d9c6:	4630      	mov	r0, r6
 800d9c8:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800d9ca:	4798      	blx	r3
 800d9cc:	2800      	cmp	r0, #0
 800d9ce:	d0a7      	beq.n	800d920 <__ssvfiscanf_r+0x1ec>
 800d9d0:	e78a      	b.n	800d8e8 <__ssvfiscanf_r+0x1b4>
 800d9d2:	2b04      	cmp	r3, #4
 800d9d4:	dc0e      	bgt.n	800d9f4 <__ssvfiscanf_r+0x2c0>
 800d9d6:	466b      	mov	r3, sp
 800d9d8:	4622      	mov	r2, r4
 800d9da:	4630      	mov	r0, r6
 800d9dc:	a941      	add	r1, sp, #260	; 0x104
 800d9de:	f000 f9d5 	bl	800dd8c <_scanf_i>
 800d9e2:	e7ab      	b.n	800d93c <__ssvfiscanf_r+0x208>
 800d9e4:	0800d681 	.word	0x0800d681
 800d9e8:	0800d6fb 	.word	0x0800d6fb
 800d9ec:	0800f901 	.word	0x0800f901
 800d9f0:	0800fcd2 	.word	0x0800fcd2
 800d9f4:	4b0b      	ldr	r3, [pc, #44]	; (800da24 <__ssvfiscanf_r+0x2f0>)
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	f43f aec2 	beq.w	800d780 <__ssvfiscanf_r+0x4c>
 800d9fc:	466b      	mov	r3, sp
 800d9fe:	4622      	mov	r2, r4
 800da00:	4630      	mov	r0, r6
 800da02:	a941      	add	r1, sp, #260	; 0x104
 800da04:	f7fc f90e 	bl	8009c24 <_scanf_float>
 800da08:	e798      	b.n	800d93c <__ssvfiscanf_r+0x208>
 800da0a:	89a3      	ldrh	r3, [r4, #12]
 800da0c:	f013 0f40 	tst.w	r3, #64	; 0x40
 800da10:	bf18      	it	ne
 800da12:	f04f 30ff 	movne.w	r0, #4294967295
 800da16:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800da1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800da1e:	9844      	ldr	r0, [sp, #272]	; 0x110
 800da20:	e7f9      	b.n	800da16 <__ssvfiscanf_r+0x2e2>
 800da22:	bf00      	nop
 800da24:	08009c25 	.word	0x08009c25

0800da28 <__sfputc_r>:
 800da28:	6893      	ldr	r3, [r2, #8]
 800da2a:	b410      	push	{r4}
 800da2c:	3b01      	subs	r3, #1
 800da2e:	2b00      	cmp	r3, #0
 800da30:	6093      	str	r3, [r2, #8]
 800da32:	da07      	bge.n	800da44 <__sfputc_r+0x1c>
 800da34:	6994      	ldr	r4, [r2, #24]
 800da36:	42a3      	cmp	r3, r4
 800da38:	db01      	blt.n	800da3e <__sfputc_r+0x16>
 800da3a:	290a      	cmp	r1, #10
 800da3c:	d102      	bne.n	800da44 <__sfputc_r+0x1c>
 800da3e:	bc10      	pop	{r4}
 800da40:	f7fd bae6 	b.w	800b010 <__swbuf_r>
 800da44:	6813      	ldr	r3, [r2, #0]
 800da46:	1c58      	adds	r0, r3, #1
 800da48:	6010      	str	r0, [r2, #0]
 800da4a:	7019      	strb	r1, [r3, #0]
 800da4c:	4608      	mov	r0, r1
 800da4e:	bc10      	pop	{r4}
 800da50:	4770      	bx	lr

0800da52 <__sfputs_r>:
 800da52:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da54:	4606      	mov	r6, r0
 800da56:	460f      	mov	r7, r1
 800da58:	4614      	mov	r4, r2
 800da5a:	18d5      	adds	r5, r2, r3
 800da5c:	42ac      	cmp	r4, r5
 800da5e:	d101      	bne.n	800da64 <__sfputs_r+0x12>
 800da60:	2000      	movs	r0, #0
 800da62:	e007      	b.n	800da74 <__sfputs_r+0x22>
 800da64:	463a      	mov	r2, r7
 800da66:	4630      	mov	r0, r6
 800da68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800da6c:	f7ff ffdc 	bl	800da28 <__sfputc_r>
 800da70:	1c43      	adds	r3, r0, #1
 800da72:	d1f3      	bne.n	800da5c <__sfputs_r+0xa>
 800da74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800da78 <_vfiprintf_r>:
 800da78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da7c:	460d      	mov	r5, r1
 800da7e:	4614      	mov	r4, r2
 800da80:	4698      	mov	r8, r3
 800da82:	4606      	mov	r6, r0
 800da84:	b09d      	sub	sp, #116	; 0x74
 800da86:	b118      	cbz	r0, 800da90 <_vfiprintf_r+0x18>
 800da88:	6983      	ldr	r3, [r0, #24]
 800da8a:	b90b      	cbnz	r3, 800da90 <_vfiprintf_r+0x18>
 800da8c:	f7fe fb34 	bl	800c0f8 <__sinit>
 800da90:	4b89      	ldr	r3, [pc, #548]	; (800dcb8 <_vfiprintf_r+0x240>)
 800da92:	429d      	cmp	r5, r3
 800da94:	d11b      	bne.n	800dace <_vfiprintf_r+0x56>
 800da96:	6875      	ldr	r5, [r6, #4]
 800da98:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800da9a:	07d9      	lsls	r1, r3, #31
 800da9c:	d405      	bmi.n	800daaa <_vfiprintf_r+0x32>
 800da9e:	89ab      	ldrh	r3, [r5, #12]
 800daa0:	059a      	lsls	r2, r3, #22
 800daa2:	d402      	bmi.n	800daaa <_vfiprintf_r+0x32>
 800daa4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800daa6:	f7fe ff30 	bl	800c90a <__retarget_lock_acquire_recursive>
 800daaa:	89ab      	ldrh	r3, [r5, #12]
 800daac:	071b      	lsls	r3, r3, #28
 800daae:	d501      	bpl.n	800dab4 <_vfiprintf_r+0x3c>
 800dab0:	692b      	ldr	r3, [r5, #16]
 800dab2:	b9eb      	cbnz	r3, 800daf0 <_vfiprintf_r+0x78>
 800dab4:	4629      	mov	r1, r5
 800dab6:	4630      	mov	r0, r6
 800dab8:	f7fd fb0e 	bl	800b0d8 <__swsetup_r>
 800dabc:	b1c0      	cbz	r0, 800daf0 <_vfiprintf_r+0x78>
 800dabe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dac0:	07dc      	lsls	r4, r3, #31
 800dac2:	d50e      	bpl.n	800dae2 <_vfiprintf_r+0x6a>
 800dac4:	f04f 30ff 	mov.w	r0, #4294967295
 800dac8:	b01d      	add	sp, #116	; 0x74
 800daca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dace:	4b7b      	ldr	r3, [pc, #492]	; (800dcbc <_vfiprintf_r+0x244>)
 800dad0:	429d      	cmp	r5, r3
 800dad2:	d101      	bne.n	800dad8 <_vfiprintf_r+0x60>
 800dad4:	68b5      	ldr	r5, [r6, #8]
 800dad6:	e7df      	b.n	800da98 <_vfiprintf_r+0x20>
 800dad8:	4b79      	ldr	r3, [pc, #484]	; (800dcc0 <_vfiprintf_r+0x248>)
 800dada:	429d      	cmp	r5, r3
 800dadc:	bf08      	it	eq
 800dade:	68f5      	ldreq	r5, [r6, #12]
 800dae0:	e7da      	b.n	800da98 <_vfiprintf_r+0x20>
 800dae2:	89ab      	ldrh	r3, [r5, #12]
 800dae4:	0598      	lsls	r0, r3, #22
 800dae6:	d4ed      	bmi.n	800dac4 <_vfiprintf_r+0x4c>
 800dae8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800daea:	f7fe ff0f 	bl	800c90c <__retarget_lock_release_recursive>
 800daee:	e7e9      	b.n	800dac4 <_vfiprintf_r+0x4c>
 800daf0:	2300      	movs	r3, #0
 800daf2:	9309      	str	r3, [sp, #36]	; 0x24
 800daf4:	2320      	movs	r3, #32
 800daf6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dafa:	2330      	movs	r3, #48	; 0x30
 800dafc:	f04f 0901 	mov.w	r9, #1
 800db00:	f8cd 800c 	str.w	r8, [sp, #12]
 800db04:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 800dcc4 <_vfiprintf_r+0x24c>
 800db08:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db0c:	4623      	mov	r3, r4
 800db0e:	469a      	mov	sl, r3
 800db10:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db14:	b10a      	cbz	r2, 800db1a <_vfiprintf_r+0xa2>
 800db16:	2a25      	cmp	r2, #37	; 0x25
 800db18:	d1f9      	bne.n	800db0e <_vfiprintf_r+0x96>
 800db1a:	ebba 0b04 	subs.w	fp, sl, r4
 800db1e:	d00b      	beq.n	800db38 <_vfiprintf_r+0xc0>
 800db20:	465b      	mov	r3, fp
 800db22:	4622      	mov	r2, r4
 800db24:	4629      	mov	r1, r5
 800db26:	4630      	mov	r0, r6
 800db28:	f7ff ff93 	bl	800da52 <__sfputs_r>
 800db2c:	3001      	adds	r0, #1
 800db2e:	f000 80aa 	beq.w	800dc86 <_vfiprintf_r+0x20e>
 800db32:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db34:	445a      	add	r2, fp
 800db36:	9209      	str	r2, [sp, #36]	; 0x24
 800db38:	f89a 3000 	ldrb.w	r3, [sl]
 800db3c:	2b00      	cmp	r3, #0
 800db3e:	f000 80a2 	beq.w	800dc86 <_vfiprintf_r+0x20e>
 800db42:	2300      	movs	r3, #0
 800db44:	f04f 32ff 	mov.w	r2, #4294967295
 800db48:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db4c:	f10a 0a01 	add.w	sl, sl, #1
 800db50:	9304      	str	r3, [sp, #16]
 800db52:	9307      	str	r3, [sp, #28]
 800db54:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800db58:	931a      	str	r3, [sp, #104]	; 0x68
 800db5a:	4654      	mov	r4, sl
 800db5c:	2205      	movs	r2, #5
 800db5e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800db62:	4858      	ldr	r0, [pc, #352]	; (800dcc4 <_vfiprintf_r+0x24c>)
 800db64:	f7fe ff5e 	bl	800ca24 <memchr>
 800db68:	9a04      	ldr	r2, [sp, #16]
 800db6a:	b9d8      	cbnz	r0, 800dba4 <_vfiprintf_r+0x12c>
 800db6c:	06d1      	lsls	r1, r2, #27
 800db6e:	bf44      	itt	mi
 800db70:	2320      	movmi	r3, #32
 800db72:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db76:	0713      	lsls	r3, r2, #28
 800db78:	bf44      	itt	mi
 800db7a:	232b      	movmi	r3, #43	; 0x2b
 800db7c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800db80:	f89a 3000 	ldrb.w	r3, [sl]
 800db84:	2b2a      	cmp	r3, #42	; 0x2a
 800db86:	d015      	beq.n	800dbb4 <_vfiprintf_r+0x13c>
 800db88:	4654      	mov	r4, sl
 800db8a:	2000      	movs	r0, #0
 800db8c:	f04f 0c0a 	mov.w	ip, #10
 800db90:	9a07      	ldr	r2, [sp, #28]
 800db92:	4621      	mov	r1, r4
 800db94:	f811 3b01 	ldrb.w	r3, [r1], #1
 800db98:	3b30      	subs	r3, #48	; 0x30
 800db9a:	2b09      	cmp	r3, #9
 800db9c:	d94e      	bls.n	800dc3c <_vfiprintf_r+0x1c4>
 800db9e:	b1b0      	cbz	r0, 800dbce <_vfiprintf_r+0x156>
 800dba0:	9207      	str	r2, [sp, #28]
 800dba2:	e014      	b.n	800dbce <_vfiprintf_r+0x156>
 800dba4:	eba0 0308 	sub.w	r3, r0, r8
 800dba8:	fa09 f303 	lsl.w	r3, r9, r3
 800dbac:	4313      	orrs	r3, r2
 800dbae:	46a2      	mov	sl, r4
 800dbb0:	9304      	str	r3, [sp, #16]
 800dbb2:	e7d2      	b.n	800db5a <_vfiprintf_r+0xe2>
 800dbb4:	9b03      	ldr	r3, [sp, #12]
 800dbb6:	1d19      	adds	r1, r3, #4
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	9103      	str	r1, [sp, #12]
 800dbbc:	2b00      	cmp	r3, #0
 800dbbe:	bfbb      	ittet	lt
 800dbc0:	425b      	neglt	r3, r3
 800dbc2:	f042 0202 	orrlt.w	r2, r2, #2
 800dbc6:	9307      	strge	r3, [sp, #28]
 800dbc8:	9307      	strlt	r3, [sp, #28]
 800dbca:	bfb8      	it	lt
 800dbcc:	9204      	strlt	r2, [sp, #16]
 800dbce:	7823      	ldrb	r3, [r4, #0]
 800dbd0:	2b2e      	cmp	r3, #46	; 0x2e
 800dbd2:	d10c      	bne.n	800dbee <_vfiprintf_r+0x176>
 800dbd4:	7863      	ldrb	r3, [r4, #1]
 800dbd6:	2b2a      	cmp	r3, #42	; 0x2a
 800dbd8:	d135      	bne.n	800dc46 <_vfiprintf_r+0x1ce>
 800dbda:	9b03      	ldr	r3, [sp, #12]
 800dbdc:	3402      	adds	r4, #2
 800dbde:	1d1a      	adds	r2, r3, #4
 800dbe0:	681b      	ldr	r3, [r3, #0]
 800dbe2:	9203      	str	r2, [sp, #12]
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	bfb8      	it	lt
 800dbe8:	f04f 33ff 	movlt.w	r3, #4294967295
 800dbec:	9305      	str	r3, [sp, #20]
 800dbee:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800dcc8 <_vfiprintf_r+0x250>
 800dbf2:	2203      	movs	r2, #3
 800dbf4:	4650      	mov	r0, sl
 800dbf6:	7821      	ldrb	r1, [r4, #0]
 800dbf8:	f7fe ff14 	bl	800ca24 <memchr>
 800dbfc:	b140      	cbz	r0, 800dc10 <_vfiprintf_r+0x198>
 800dbfe:	2340      	movs	r3, #64	; 0x40
 800dc00:	eba0 000a 	sub.w	r0, r0, sl
 800dc04:	fa03 f000 	lsl.w	r0, r3, r0
 800dc08:	9b04      	ldr	r3, [sp, #16]
 800dc0a:	3401      	adds	r4, #1
 800dc0c:	4303      	orrs	r3, r0
 800dc0e:	9304      	str	r3, [sp, #16]
 800dc10:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc14:	2206      	movs	r2, #6
 800dc16:	482d      	ldr	r0, [pc, #180]	; (800dccc <_vfiprintf_r+0x254>)
 800dc18:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc1c:	f7fe ff02 	bl	800ca24 <memchr>
 800dc20:	2800      	cmp	r0, #0
 800dc22:	d03f      	beq.n	800dca4 <_vfiprintf_r+0x22c>
 800dc24:	4b2a      	ldr	r3, [pc, #168]	; (800dcd0 <_vfiprintf_r+0x258>)
 800dc26:	bb1b      	cbnz	r3, 800dc70 <_vfiprintf_r+0x1f8>
 800dc28:	9b03      	ldr	r3, [sp, #12]
 800dc2a:	3307      	adds	r3, #7
 800dc2c:	f023 0307 	bic.w	r3, r3, #7
 800dc30:	3308      	adds	r3, #8
 800dc32:	9303      	str	r3, [sp, #12]
 800dc34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc36:	443b      	add	r3, r7
 800dc38:	9309      	str	r3, [sp, #36]	; 0x24
 800dc3a:	e767      	b.n	800db0c <_vfiprintf_r+0x94>
 800dc3c:	460c      	mov	r4, r1
 800dc3e:	2001      	movs	r0, #1
 800dc40:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc44:	e7a5      	b.n	800db92 <_vfiprintf_r+0x11a>
 800dc46:	2300      	movs	r3, #0
 800dc48:	f04f 0c0a 	mov.w	ip, #10
 800dc4c:	4619      	mov	r1, r3
 800dc4e:	3401      	adds	r4, #1
 800dc50:	9305      	str	r3, [sp, #20]
 800dc52:	4620      	mov	r0, r4
 800dc54:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dc58:	3a30      	subs	r2, #48	; 0x30
 800dc5a:	2a09      	cmp	r2, #9
 800dc5c:	d903      	bls.n	800dc66 <_vfiprintf_r+0x1ee>
 800dc5e:	2b00      	cmp	r3, #0
 800dc60:	d0c5      	beq.n	800dbee <_vfiprintf_r+0x176>
 800dc62:	9105      	str	r1, [sp, #20]
 800dc64:	e7c3      	b.n	800dbee <_vfiprintf_r+0x176>
 800dc66:	4604      	mov	r4, r0
 800dc68:	2301      	movs	r3, #1
 800dc6a:	fb0c 2101 	mla	r1, ip, r1, r2
 800dc6e:	e7f0      	b.n	800dc52 <_vfiprintf_r+0x1da>
 800dc70:	ab03      	add	r3, sp, #12
 800dc72:	9300      	str	r3, [sp, #0]
 800dc74:	462a      	mov	r2, r5
 800dc76:	4630      	mov	r0, r6
 800dc78:	4b16      	ldr	r3, [pc, #88]	; (800dcd4 <_vfiprintf_r+0x25c>)
 800dc7a:	a904      	add	r1, sp, #16
 800dc7c:	f7fb fc10 	bl	80094a0 <_printf_float>
 800dc80:	4607      	mov	r7, r0
 800dc82:	1c78      	adds	r0, r7, #1
 800dc84:	d1d6      	bne.n	800dc34 <_vfiprintf_r+0x1bc>
 800dc86:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dc88:	07d9      	lsls	r1, r3, #31
 800dc8a:	d405      	bmi.n	800dc98 <_vfiprintf_r+0x220>
 800dc8c:	89ab      	ldrh	r3, [r5, #12]
 800dc8e:	059a      	lsls	r2, r3, #22
 800dc90:	d402      	bmi.n	800dc98 <_vfiprintf_r+0x220>
 800dc92:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dc94:	f7fe fe3a 	bl	800c90c <__retarget_lock_release_recursive>
 800dc98:	89ab      	ldrh	r3, [r5, #12]
 800dc9a:	065b      	lsls	r3, r3, #25
 800dc9c:	f53f af12 	bmi.w	800dac4 <_vfiprintf_r+0x4c>
 800dca0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dca2:	e711      	b.n	800dac8 <_vfiprintf_r+0x50>
 800dca4:	ab03      	add	r3, sp, #12
 800dca6:	9300      	str	r3, [sp, #0]
 800dca8:	462a      	mov	r2, r5
 800dcaa:	4630      	mov	r0, r6
 800dcac:	4b09      	ldr	r3, [pc, #36]	; (800dcd4 <_vfiprintf_r+0x25c>)
 800dcae:	a904      	add	r1, sp, #16
 800dcb0:	f7fb fe92 	bl	80099d8 <_printf_i>
 800dcb4:	e7e4      	b.n	800dc80 <_vfiprintf_r+0x208>
 800dcb6:	bf00      	nop
 800dcb8:	0800fab4 	.word	0x0800fab4
 800dcbc:	0800fad4 	.word	0x0800fad4
 800dcc0:	0800fa94 	.word	0x0800fa94
 800dcc4:	0800fccc 	.word	0x0800fccc
 800dcc8:	0800fcd2 	.word	0x0800fcd2
 800dccc:	0800fcd6 	.word	0x0800fcd6
 800dcd0:	080094a1 	.word	0x080094a1
 800dcd4:	0800da53 	.word	0x0800da53

0800dcd8 <_scanf_chars>:
 800dcd8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800dcdc:	4615      	mov	r5, r2
 800dcde:	688a      	ldr	r2, [r1, #8]
 800dce0:	4680      	mov	r8, r0
 800dce2:	460c      	mov	r4, r1
 800dce4:	b932      	cbnz	r2, 800dcf4 <_scanf_chars+0x1c>
 800dce6:	698a      	ldr	r2, [r1, #24]
 800dce8:	2a00      	cmp	r2, #0
 800dcea:	bf0c      	ite	eq
 800dcec:	2201      	moveq	r2, #1
 800dcee:	f04f 32ff 	movne.w	r2, #4294967295
 800dcf2:	608a      	str	r2, [r1, #8]
 800dcf4:	2700      	movs	r7, #0
 800dcf6:	6822      	ldr	r2, [r4, #0]
 800dcf8:	f8df 908c 	ldr.w	r9, [pc, #140]	; 800dd88 <_scanf_chars+0xb0>
 800dcfc:	06d1      	lsls	r1, r2, #27
 800dcfe:	bf5f      	itttt	pl
 800dd00:	681a      	ldrpl	r2, [r3, #0]
 800dd02:	1d11      	addpl	r1, r2, #4
 800dd04:	6019      	strpl	r1, [r3, #0]
 800dd06:	6816      	ldrpl	r6, [r2, #0]
 800dd08:	69a0      	ldr	r0, [r4, #24]
 800dd0a:	b188      	cbz	r0, 800dd30 <_scanf_chars+0x58>
 800dd0c:	2801      	cmp	r0, #1
 800dd0e:	d107      	bne.n	800dd20 <_scanf_chars+0x48>
 800dd10:	682b      	ldr	r3, [r5, #0]
 800dd12:	781a      	ldrb	r2, [r3, #0]
 800dd14:	6963      	ldr	r3, [r4, #20]
 800dd16:	5c9b      	ldrb	r3, [r3, r2]
 800dd18:	b953      	cbnz	r3, 800dd30 <_scanf_chars+0x58>
 800dd1a:	2f00      	cmp	r7, #0
 800dd1c:	d031      	beq.n	800dd82 <_scanf_chars+0xaa>
 800dd1e:	e022      	b.n	800dd66 <_scanf_chars+0x8e>
 800dd20:	2802      	cmp	r0, #2
 800dd22:	d120      	bne.n	800dd66 <_scanf_chars+0x8e>
 800dd24:	682b      	ldr	r3, [r5, #0]
 800dd26:	781b      	ldrb	r3, [r3, #0]
 800dd28:	f813 3009 	ldrb.w	r3, [r3, r9]
 800dd2c:	071b      	lsls	r3, r3, #28
 800dd2e:	d41a      	bmi.n	800dd66 <_scanf_chars+0x8e>
 800dd30:	6823      	ldr	r3, [r4, #0]
 800dd32:	3701      	adds	r7, #1
 800dd34:	06da      	lsls	r2, r3, #27
 800dd36:	bf5e      	ittt	pl
 800dd38:	682b      	ldrpl	r3, [r5, #0]
 800dd3a:	781b      	ldrbpl	r3, [r3, #0]
 800dd3c:	f806 3b01 	strbpl.w	r3, [r6], #1
 800dd40:	682a      	ldr	r2, [r5, #0]
 800dd42:	686b      	ldr	r3, [r5, #4]
 800dd44:	3201      	adds	r2, #1
 800dd46:	602a      	str	r2, [r5, #0]
 800dd48:	68a2      	ldr	r2, [r4, #8]
 800dd4a:	3b01      	subs	r3, #1
 800dd4c:	3a01      	subs	r2, #1
 800dd4e:	606b      	str	r3, [r5, #4]
 800dd50:	60a2      	str	r2, [r4, #8]
 800dd52:	b142      	cbz	r2, 800dd66 <_scanf_chars+0x8e>
 800dd54:	2b00      	cmp	r3, #0
 800dd56:	dcd7      	bgt.n	800dd08 <_scanf_chars+0x30>
 800dd58:	4629      	mov	r1, r5
 800dd5a:	4640      	mov	r0, r8
 800dd5c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dd60:	4798      	blx	r3
 800dd62:	2800      	cmp	r0, #0
 800dd64:	d0d0      	beq.n	800dd08 <_scanf_chars+0x30>
 800dd66:	6823      	ldr	r3, [r4, #0]
 800dd68:	f013 0310 	ands.w	r3, r3, #16
 800dd6c:	d105      	bne.n	800dd7a <_scanf_chars+0xa2>
 800dd6e:	68e2      	ldr	r2, [r4, #12]
 800dd70:	3201      	adds	r2, #1
 800dd72:	60e2      	str	r2, [r4, #12]
 800dd74:	69a2      	ldr	r2, [r4, #24]
 800dd76:	b102      	cbz	r2, 800dd7a <_scanf_chars+0xa2>
 800dd78:	7033      	strb	r3, [r6, #0]
 800dd7a:	2000      	movs	r0, #0
 800dd7c:	6923      	ldr	r3, [r4, #16]
 800dd7e:	443b      	add	r3, r7
 800dd80:	6123      	str	r3, [r4, #16]
 800dd82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dd86:	bf00      	nop
 800dd88:	0800f901 	.word	0x0800f901

0800dd8c <_scanf_i>:
 800dd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd90:	460c      	mov	r4, r1
 800dd92:	4698      	mov	r8, r3
 800dd94:	4b75      	ldr	r3, [pc, #468]	; (800df6c <_scanf_i+0x1e0>)
 800dd96:	b087      	sub	sp, #28
 800dd98:	4682      	mov	sl, r0
 800dd9a:	4616      	mov	r6, r2
 800dd9c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800dda0:	ab03      	add	r3, sp, #12
 800dda2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800dda6:	4b72      	ldr	r3, [pc, #456]	; (800df70 <_scanf_i+0x1e4>)
 800dda8:	69a1      	ldr	r1, [r4, #24]
 800ddaa:	4a72      	ldr	r2, [pc, #456]	; (800df74 <_scanf_i+0x1e8>)
 800ddac:	4627      	mov	r7, r4
 800ddae:	2903      	cmp	r1, #3
 800ddb0:	bf18      	it	ne
 800ddb2:	461a      	movne	r2, r3
 800ddb4:	68a3      	ldr	r3, [r4, #8]
 800ddb6:	9201      	str	r2, [sp, #4]
 800ddb8:	1e5a      	subs	r2, r3, #1
 800ddba:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800ddbe:	bf81      	itttt	hi
 800ddc0:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800ddc4:	eb03 0905 	addhi.w	r9, r3, r5
 800ddc8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800ddcc:	60a3      	strhi	r3, [r4, #8]
 800ddce:	f857 3b1c 	ldr.w	r3, [r7], #28
 800ddd2:	bf98      	it	ls
 800ddd4:	f04f 0900 	movls.w	r9, #0
 800ddd8:	463d      	mov	r5, r7
 800ddda:	f04f 0b00 	mov.w	fp, #0
 800ddde:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800dde2:	6023      	str	r3, [r4, #0]
 800dde4:	6831      	ldr	r1, [r6, #0]
 800dde6:	ab03      	add	r3, sp, #12
 800dde8:	2202      	movs	r2, #2
 800ddea:	7809      	ldrb	r1, [r1, #0]
 800ddec:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800ddf0:	f7fe fe18 	bl	800ca24 <memchr>
 800ddf4:	b328      	cbz	r0, 800de42 <_scanf_i+0xb6>
 800ddf6:	f1bb 0f01 	cmp.w	fp, #1
 800ddfa:	d159      	bne.n	800deb0 <_scanf_i+0x124>
 800ddfc:	6862      	ldr	r2, [r4, #4]
 800ddfe:	b92a      	cbnz	r2, 800de0c <_scanf_i+0x80>
 800de00:	2308      	movs	r3, #8
 800de02:	6822      	ldr	r2, [r4, #0]
 800de04:	6063      	str	r3, [r4, #4]
 800de06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800de0a:	6022      	str	r2, [r4, #0]
 800de0c:	6822      	ldr	r2, [r4, #0]
 800de0e:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800de12:	6022      	str	r2, [r4, #0]
 800de14:	68a2      	ldr	r2, [r4, #8]
 800de16:	1e51      	subs	r1, r2, #1
 800de18:	60a1      	str	r1, [r4, #8]
 800de1a:	b192      	cbz	r2, 800de42 <_scanf_i+0xb6>
 800de1c:	6832      	ldr	r2, [r6, #0]
 800de1e:	1c51      	adds	r1, r2, #1
 800de20:	6031      	str	r1, [r6, #0]
 800de22:	7812      	ldrb	r2, [r2, #0]
 800de24:	f805 2b01 	strb.w	r2, [r5], #1
 800de28:	6872      	ldr	r2, [r6, #4]
 800de2a:	3a01      	subs	r2, #1
 800de2c:	2a00      	cmp	r2, #0
 800de2e:	6072      	str	r2, [r6, #4]
 800de30:	dc07      	bgt.n	800de42 <_scanf_i+0xb6>
 800de32:	4631      	mov	r1, r6
 800de34:	4650      	mov	r0, sl
 800de36:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800de3a:	4790      	blx	r2
 800de3c:	2800      	cmp	r0, #0
 800de3e:	f040 8085 	bne.w	800df4c <_scanf_i+0x1c0>
 800de42:	f10b 0b01 	add.w	fp, fp, #1
 800de46:	f1bb 0f03 	cmp.w	fp, #3
 800de4a:	d1cb      	bne.n	800dde4 <_scanf_i+0x58>
 800de4c:	6863      	ldr	r3, [r4, #4]
 800de4e:	b90b      	cbnz	r3, 800de54 <_scanf_i+0xc8>
 800de50:	230a      	movs	r3, #10
 800de52:	6063      	str	r3, [r4, #4]
 800de54:	6863      	ldr	r3, [r4, #4]
 800de56:	4948      	ldr	r1, [pc, #288]	; (800df78 <_scanf_i+0x1ec>)
 800de58:	6960      	ldr	r0, [r4, #20]
 800de5a:	1ac9      	subs	r1, r1, r3
 800de5c:	f000 f8a6 	bl	800dfac <__sccl>
 800de60:	f04f 0b00 	mov.w	fp, #0
 800de64:	68a3      	ldr	r3, [r4, #8]
 800de66:	6822      	ldr	r2, [r4, #0]
 800de68:	2b00      	cmp	r3, #0
 800de6a:	d03d      	beq.n	800dee8 <_scanf_i+0x15c>
 800de6c:	6831      	ldr	r1, [r6, #0]
 800de6e:	6960      	ldr	r0, [r4, #20]
 800de70:	f891 c000 	ldrb.w	ip, [r1]
 800de74:	f810 000c 	ldrb.w	r0, [r0, ip]
 800de78:	2800      	cmp	r0, #0
 800de7a:	d035      	beq.n	800dee8 <_scanf_i+0x15c>
 800de7c:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800de80:	d124      	bne.n	800decc <_scanf_i+0x140>
 800de82:	0510      	lsls	r0, r2, #20
 800de84:	d522      	bpl.n	800decc <_scanf_i+0x140>
 800de86:	f10b 0b01 	add.w	fp, fp, #1
 800de8a:	f1b9 0f00 	cmp.w	r9, #0
 800de8e:	d003      	beq.n	800de98 <_scanf_i+0x10c>
 800de90:	3301      	adds	r3, #1
 800de92:	f109 39ff 	add.w	r9, r9, #4294967295
 800de96:	60a3      	str	r3, [r4, #8]
 800de98:	6873      	ldr	r3, [r6, #4]
 800de9a:	3b01      	subs	r3, #1
 800de9c:	2b00      	cmp	r3, #0
 800de9e:	6073      	str	r3, [r6, #4]
 800dea0:	dd1b      	ble.n	800deda <_scanf_i+0x14e>
 800dea2:	6833      	ldr	r3, [r6, #0]
 800dea4:	3301      	adds	r3, #1
 800dea6:	6033      	str	r3, [r6, #0]
 800dea8:	68a3      	ldr	r3, [r4, #8]
 800deaa:	3b01      	subs	r3, #1
 800deac:	60a3      	str	r3, [r4, #8]
 800deae:	e7d9      	b.n	800de64 <_scanf_i+0xd8>
 800deb0:	f1bb 0f02 	cmp.w	fp, #2
 800deb4:	d1ae      	bne.n	800de14 <_scanf_i+0x88>
 800deb6:	6822      	ldr	r2, [r4, #0]
 800deb8:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800debc:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800dec0:	d1bf      	bne.n	800de42 <_scanf_i+0xb6>
 800dec2:	2310      	movs	r3, #16
 800dec4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800dec8:	6063      	str	r3, [r4, #4]
 800deca:	e7a2      	b.n	800de12 <_scanf_i+0x86>
 800decc:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800ded0:	6022      	str	r2, [r4, #0]
 800ded2:	780b      	ldrb	r3, [r1, #0]
 800ded4:	f805 3b01 	strb.w	r3, [r5], #1
 800ded8:	e7de      	b.n	800de98 <_scanf_i+0x10c>
 800deda:	4631      	mov	r1, r6
 800dedc:	4650      	mov	r0, sl
 800dede:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800dee2:	4798      	blx	r3
 800dee4:	2800      	cmp	r0, #0
 800dee6:	d0df      	beq.n	800dea8 <_scanf_i+0x11c>
 800dee8:	6823      	ldr	r3, [r4, #0]
 800deea:	05db      	lsls	r3, r3, #23
 800deec:	d50d      	bpl.n	800df0a <_scanf_i+0x17e>
 800deee:	42bd      	cmp	r5, r7
 800def0:	d909      	bls.n	800df06 <_scanf_i+0x17a>
 800def2:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800def6:	4632      	mov	r2, r6
 800def8:	4650      	mov	r0, sl
 800defa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800defe:	f105 39ff 	add.w	r9, r5, #4294967295
 800df02:	4798      	blx	r3
 800df04:	464d      	mov	r5, r9
 800df06:	42bd      	cmp	r5, r7
 800df08:	d02d      	beq.n	800df66 <_scanf_i+0x1da>
 800df0a:	6822      	ldr	r2, [r4, #0]
 800df0c:	f012 0210 	ands.w	r2, r2, #16
 800df10:	d113      	bne.n	800df3a <_scanf_i+0x1ae>
 800df12:	702a      	strb	r2, [r5, #0]
 800df14:	4639      	mov	r1, r7
 800df16:	6863      	ldr	r3, [r4, #4]
 800df18:	4650      	mov	r0, sl
 800df1a:	9e01      	ldr	r6, [sp, #4]
 800df1c:	47b0      	blx	r6
 800df1e:	6821      	ldr	r1, [r4, #0]
 800df20:	f8d8 3000 	ldr.w	r3, [r8]
 800df24:	f011 0f20 	tst.w	r1, #32
 800df28:	d013      	beq.n	800df52 <_scanf_i+0x1c6>
 800df2a:	1d1a      	adds	r2, r3, #4
 800df2c:	f8c8 2000 	str.w	r2, [r8]
 800df30:	681b      	ldr	r3, [r3, #0]
 800df32:	6018      	str	r0, [r3, #0]
 800df34:	68e3      	ldr	r3, [r4, #12]
 800df36:	3301      	adds	r3, #1
 800df38:	60e3      	str	r3, [r4, #12]
 800df3a:	2000      	movs	r0, #0
 800df3c:	1bed      	subs	r5, r5, r7
 800df3e:	44ab      	add	fp, r5
 800df40:	6925      	ldr	r5, [r4, #16]
 800df42:	445d      	add	r5, fp
 800df44:	6125      	str	r5, [r4, #16]
 800df46:	b007      	add	sp, #28
 800df48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df4c:	f04f 0b00 	mov.w	fp, #0
 800df50:	e7ca      	b.n	800dee8 <_scanf_i+0x15c>
 800df52:	1d1a      	adds	r2, r3, #4
 800df54:	f8c8 2000 	str.w	r2, [r8]
 800df58:	681b      	ldr	r3, [r3, #0]
 800df5a:	f011 0f01 	tst.w	r1, #1
 800df5e:	bf14      	ite	ne
 800df60:	8018      	strhne	r0, [r3, #0]
 800df62:	6018      	streq	r0, [r3, #0]
 800df64:	e7e6      	b.n	800df34 <_scanf_i+0x1a8>
 800df66:	2001      	movs	r0, #1
 800df68:	e7ed      	b.n	800df46 <_scanf_i+0x1ba>
 800df6a:	bf00      	nop
 800df6c:	0800e4e4 	.word	0x0800e4e4
 800df70:	0800e129 	.word	0x0800e129
 800df74:	0800b00d 	.word	0x0800b00d
 800df78:	0800fcf6 	.word	0x0800fcf6

0800df7c <_read_r>:
 800df7c:	b538      	push	{r3, r4, r5, lr}
 800df7e:	4604      	mov	r4, r0
 800df80:	4608      	mov	r0, r1
 800df82:	4611      	mov	r1, r2
 800df84:	2200      	movs	r2, #0
 800df86:	4d05      	ldr	r5, [pc, #20]	; (800df9c <_read_r+0x20>)
 800df88:	602a      	str	r2, [r5, #0]
 800df8a:	461a      	mov	r2, r3
 800df8c:	f7f4 fec7 	bl	8002d1e <_read>
 800df90:	1c43      	adds	r3, r0, #1
 800df92:	d102      	bne.n	800df9a <_read_r+0x1e>
 800df94:	682b      	ldr	r3, [r5, #0]
 800df96:	b103      	cbz	r3, 800df9a <_read_r+0x1e>
 800df98:	6023      	str	r3, [r4, #0]
 800df9a:	bd38      	pop	{r3, r4, r5, pc}
 800df9c:	20002158 	.word	0x20002158

0800dfa0 <nan>:
 800dfa0:	2000      	movs	r0, #0
 800dfa2:	4901      	ldr	r1, [pc, #4]	; (800dfa8 <nan+0x8>)
 800dfa4:	4770      	bx	lr
 800dfa6:	bf00      	nop
 800dfa8:	7ff80000 	.word	0x7ff80000

0800dfac <__sccl>:
 800dfac:	b570      	push	{r4, r5, r6, lr}
 800dfae:	780b      	ldrb	r3, [r1, #0]
 800dfb0:	4604      	mov	r4, r0
 800dfb2:	2b5e      	cmp	r3, #94	; 0x5e
 800dfb4:	bf13      	iteet	ne
 800dfb6:	2200      	movne	r2, #0
 800dfb8:	2201      	moveq	r2, #1
 800dfba:	784b      	ldrbeq	r3, [r1, #1]
 800dfbc:	1c48      	addne	r0, r1, #1
 800dfbe:	bf08      	it	eq
 800dfc0:	1c88      	addeq	r0, r1, #2
 800dfc2:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800dfc6:	1e61      	subs	r1, r4, #1
 800dfc8:	f801 2f01 	strb.w	r2, [r1, #1]!
 800dfcc:	42a9      	cmp	r1, r5
 800dfce:	d1fb      	bne.n	800dfc8 <__sccl+0x1c>
 800dfd0:	b90b      	cbnz	r3, 800dfd6 <__sccl+0x2a>
 800dfd2:	3801      	subs	r0, #1
 800dfd4:	bd70      	pop	{r4, r5, r6, pc}
 800dfd6:	f082 0201 	eor.w	r2, r2, #1
 800dfda:	4605      	mov	r5, r0
 800dfdc:	54e2      	strb	r2, [r4, r3]
 800dfde:	4628      	mov	r0, r5
 800dfe0:	f810 1b01 	ldrb.w	r1, [r0], #1
 800dfe4:	292d      	cmp	r1, #45	; 0x2d
 800dfe6:	d006      	beq.n	800dff6 <__sccl+0x4a>
 800dfe8:	295d      	cmp	r1, #93	; 0x5d
 800dfea:	d0f3      	beq.n	800dfd4 <__sccl+0x28>
 800dfec:	b909      	cbnz	r1, 800dff2 <__sccl+0x46>
 800dfee:	4628      	mov	r0, r5
 800dff0:	e7f0      	b.n	800dfd4 <__sccl+0x28>
 800dff2:	460b      	mov	r3, r1
 800dff4:	e7f1      	b.n	800dfda <__sccl+0x2e>
 800dff6:	786e      	ldrb	r6, [r5, #1]
 800dff8:	2e5d      	cmp	r6, #93	; 0x5d
 800dffa:	d0fa      	beq.n	800dff2 <__sccl+0x46>
 800dffc:	42b3      	cmp	r3, r6
 800dffe:	dcf8      	bgt.n	800dff2 <__sccl+0x46>
 800e000:	4619      	mov	r1, r3
 800e002:	3502      	adds	r5, #2
 800e004:	3101      	adds	r1, #1
 800e006:	428e      	cmp	r6, r1
 800e008:	5462      	strb	r2, [r4, r1]
 800e00a:	dcfb      	bgt.n	800e004 <__sccl+0x58>
 800e00c:	1af1      	subs	r1, r6, r3
 800e00e:	3901      	subs	r1, #1
 800e010:	42b3      	cmp	r3, r6
 800e012:	bfa8      	it	ge
 800e014:	2100      	movge	r1, #0
 800e016:	1c58      	adds	r0, r3, #1
 800e018:	1843      	adds	r3, r0, r1
 800e01a:	e7e0      	b.n	800dfde <__sccl+0x32>

0800e01c <strncmp>:
 800e01c:	4603      	mov	r3, r0
 800e01e:	b510      	push	{r4, lr}
 800e020:	b172      	cbz	r2, 800e040 <strncmp+0x24>
 800e022:	3901      	subs	r1, #1
 800e024:	1884      	adds	r4, r0, r2
 800e026:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e02a:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e02e:	4290      	cmp	r0, r2
 800e030:	d101      	bne.n	800e036 <strncmp+0x1a>
 800e032:	42a3      	cmp	r3, r4
 800e034:	d101      	bne.n	800e03a <strncmp+0x1e>
 800e036:	1a80      	subs	r0, r0, r2
 800e038:	bd10      	pop	{r4, pc}
 800e03a:	2800      	cmp	r0, #0
 800e03c:	d1f3      	bne.n	800e026 <strncmp+0xa>
 800e03e:	e7fa      	b.n	800e036 <strncmp+0x1a>
 800e040:	4610      	mov	r0, r2
 800e042:	e7f9      	b.n	800e038 <strncmp+0x1c>

0800e044 <_strtoul_l.constprop.0>:
 800e044:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e048:	4686      	mov	lr, r0
 800e04a:	460d      	mov	r5, r1
 800e04c:	4f35      	ldr	r7, [pc, #212]	; (800e124 <_strtoul_l.constprop.0+0xe0>)
 800e04e:	4628      	mov	r0, r5
 800e050:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e054:	5de6      	ldrb	r6, [r4, r7]
 800e056:	f016 0608 	ands.w	r6, r6, #8
 800e05a:	d1f8      	bne.n	800e04e <_strtoul_l.constprop.0+0xa>
 800e05c:	2c2d      	cmp	r4, #45	; 0x2d
 800e05e:	d12f      	bne.n	800e0c0 <_strtoul_l.constprop.0+0x7c>
 800e060:	2601      	movs	r6, #1
 800e062:	782c      	ldrb	r4, [r5, #0]
 800e064:	1c85      	adds	r5, r0, #2
 800e066:	2b00      	cmp	r3, #0
 800e068:	d057      	beq.n	800e11a <_strtoul_l.constprop.0+0xd6>
 800e06a:	2b10      	cmp	r3, #16
 800e06c:	d109      	bne.n	800e082 <_strtoul_l.constprop.0+0x3e>
 800e06e:	2c30      	cmp	r4, #48	; 0x30
 800e070:	d107      	bne.n	800e082 <_strtoul_l.constprop.0+0x3e>
 800e072:	7828      	ldrb	r0, [r5, #0]
 800e074:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800e078:	2858      	cmp	r0, #88	; 0x58
 800e07a:	d149      	bne.n	800e110 <_strtoul_l.constprop.0+0xcc>
 800e07c:	2310      	movs	r3, #16
 800e07e:	786c      	ldrb	r4, [r5, #1]
 800e080:	3502      	adds	r5, #2
 800e082:	f04f 38ff 	mov.w	r8, #4294967295
 800e086:	fbb8 f8f3 	udiv	r8, r8, r3
 800e08a:	2700      	movs	r7, #0
 800e08c:	fb03 f908 	mul.w	r9, r3, r8
 800e090:	4638      	mov	r0, r7
 800e092:	ea6f 0909 	mvn.w	r9, r9
 800e096:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800e09a:	f1bc 0f09 	cmp.w	ip, #9
 800e09e:	d814      	bhi.n	800e0ca <_strtoul_l.constprop.0+0x86>
 800e0a0:	4664      	mov	r4, ip
 800e0a2:	42a3      	cmp	r3, r4
 800e0a4:	dd22      	ble.n	800e0ec <_strtoul_l.constprop.0+0xa8>
 800e0a6:	2f00      	cmp	r7, #0
 800e0a8:	db1d      	blt.n	800e0e6 <_strtoul_l.constprop.0+0xa2>
 800e0aa:	4580      	cmp	r8, r0
 800e0ac:	d31b      	bcc.n	800e0e6 <_strtoul_l.constprop.0+0xa2>
 800e0ae:	d101      	bne.n	800e0b4 <_strtoul_l.constprop.0+0x70>
 800e0b0:	45a1      	cmp	r9, r4
 800e0b2:	db18      	blt.n	800e0e6 <_strtoul_l.constprop.0+0xa2>
 800e0b4:	2701      	movs	r7, #1
 800e0b6:	fb00 4003 	mla	r0, r0, r3, r4
 800e0ba:	f815 4b01 	ldrb.w	r4, [r5], #1
 800e0be:	e7ea      	b.n	800e096 <_strtoul_l.constprop.0+0x52>
 800e0c0:	2c2b      	cmp	r4, #43	; 0x2b
 800e0c2:	bf04      	itt	eq
 800e0c4:	782c      	ldrbeq	r4, [r5, #0]
 800e0c6:	1c85      	addeq	r5, r0, #2
 800e0c8:	e7cd      	b.n	800e066 <_strtoul_l.constprop.0+0x22>
 800e0ca:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800e0ce:	f1bc 0f19 	cmp.w	ip, #25
 800e0d2:	d801      	bhi.n	800e0d8 <_strtoul_l.constprop.0+0x94>
 800e0d4:	3c37      	subs	r4, #55	; 0x37
 800e0d6:	e7e4      	b.n	800e0a2 <_strtoul_l.constprop.0+0x5e>
 800e0d8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800e0dc:	f1bc 0f19 	cmp.w	ip, #25
 800e0e0:	d804      	bhi.n	800e0ec <_strtoul_l.constprop.0+0xa8>
 800e0e2:	3c57      	subs	r4, #87	; 0x57
 800e0e4:	e7dd      	b.n	800e0a2 <_strtoul_l.constprop.0+0x5e>
 800e0e6:	f04f 37ff 	mov.w	r7, #4294967295
 800e0ea:	e7e6      	b.n	800e0ba <_strtoul_l.constprop.0+0x76>
 800e0ec:	2f00      	cmp	r7, #0
 800e0ee:	da07      	bge.n	800e100 <_strtoul_l.constprop.0+0xbc>
 800e0f0:	2322      	movs	r3, #34	; 0x22
 800e0f2:	f04f 30ff 	mov.w	r0, #4294967295
 800e0f6:	f8ce 3000 	str.w	r3, [lr]
 800e0fa:	b932      	cbnz	r2, 800e10a <_strtoul_l.constprop.0+0xc6>
 800e0fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e100:	b106      	cbz	r6, 800e104 <_strtoul_l.constprop.0+0xc0>
 800e102:	4240      	negs	r0, r0
 800e104:	2a00      	cmp	r2, #0
 800e106:	d0f9      	beq.n	800e0fc <_strtoul_l.constprop.0+0xb8>
 800e108:	b107      	cbz	r7, 800e10c <_strtoul_l.constprop.0+0xc8>
 800e10a:	1e69      	subs	r1, r5, #1
 800e10c:	6011      	str	r1, [r2, #0]
 800e10e:	e7f5      	b.n	800e0fc <_strtoul_l.constprop.0+0xb8>
 800e110:	2430      	movs	r4, #48	; 0x30
 800e112:	2b00      	cmp	r3, #0
 800e114:	d1b5      	bne.n	800e082 <_strtoul_l.constprop.0+0x3e>
 800e116:	2308      	movs	r3, #8
 800e118:	e7b3      	b.n	800e082 <_strtoul_l.constprop.0+0x3e>
 800e11a:	2c30      	cmp	r4, #48	; 0x30
 800e11c:	d0a9      	beq.n	800e072 <_strtoul_l.constprop.0+0x2e>
 800e11e:	230a      	movs	r3, #10
 800e120:	e7af      	b.n	800e082 <_strtoul_l.constprop.0+0x3e>
 800e122:	bf00      	nop
 800e124:	0800f901 	.word	0x0800f901

0800e128 <_strtoul_r>:
 800e128:	f7ff bf8c 	b.w	800e044 <_strtoul_l.constprop.0>

0800e12c <__submore>:
 800e12c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e130:	460c      	mov	r4, r1
 800e132:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800e134:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e138:	4299      	cmp	r1, r3
 800e13a:	d11b      	bne.n	800e174 <__submore+0x48>
 800e13c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800e140:	f7fb f89c 	bl	800927c <_malloc_r>
 800e144:	b918      	cbnz	r0, 800e14e <__submore+0x22>
 800e146:	f04f 30ff 	mov.w	r0, #4294967295
 800e14a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e14e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e152:	63a3      	str	r3, [r4, #56]	; 0x38
 800e154:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800e158:	6360      	str	r0, [r4, #52]	; 0x34
 800e15a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800e15e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800e162:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800e166:	7043      	strb	r3, [r0, #1]
 800e168:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800e16c:	7003      	strb	r3, [r0, #0]
 800e16e:	6020      	str	r0, [r4, #0]
 800e170:	2000      	movs	r0, #0
 800e172:	e7ea      	b.n	800e14a <__submore+0x1e>
 800e174:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800e176:	0077      	lsls	r7, r6, #1
 800e178:	463a      	mov	r2, r7
 800e17a:	f000 f889 	bl	800e290 <_realloc_r>
 800e17e:	4605      	mov	r5, r0
 800e180:	2800      	cmp	r0, #0
 800e182:	d0e0      	beq.n	800e146 <__submore+0x1a>
 800e184:	eb00 0806 	add.w	r8, r0, r6
 800e188:	4601      	mov	r1, r0
 800e18a:	4632      	mov	r2, r6
 800e18c:	4640      	mov	r0, r8
 800e18e:	f7fa ffe3 	bl	8009158 <memcpy>
 800e192:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800e196:	f8c4 8000 	str.w	r8, [r4]
 800e19a:	e7e9      	b.n	800e170 <__submore+0x44>

0800e19c <__ascii_wctomb>:
 800e19c:	4603      	mov	r3, r0
 800e19e:	4608      	mov	r0, r1
 800e1a0:	b141      	cbz	r1, 800e1b4 <__ascii_wctomb+0x18>
 800e1a2:	2aff      	cmp	r2, #255	; 0xff
 800e1a4:	d904      	bls.n	800e1b0 <__ascii_wctomb+0x14>
 800e1a6:	228a      	movs	r2, #138	; 0x8a
 800e1a8:	f04f 30ff 	mov.w	r0, #4294967295
 800e1ac:	601a      	str	r2, [r3, #0]
 800e1ae:	4770      	bx	lr
 800e1b0:	2001      	movs	r0, #1
 800e1b2:	700a      	strb	r2, [r1, #0]
 800e1b4:	4770      	bx	lr
	...

0800e1b8 <__assert_func>:
 800e1b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e1ba:	4614      	mov	r4, r2
 800e1bc:	461a      	mov	r2, r3
 800e1be:	4b09      	ldr	r3, [pc, #36]	; (800e1e4 <__assert_func+0x2c>)
 800e1c0:	4605      	mov	r5, r0
 800e1c2:	681b      	ldr	r3, [r3, #0]
 800e1c4:	68d8      	ldr	r0, [r3, #12]
 800e1c6:	b14c      	cbz	r4, 800e1dc <__assert_func+0x24>
 800e1c8:	4b07      	ldr	r3, [pc, #28]	; (800e1e8 <__assert_func+0x30>)
 800e1ca:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e1ce:	9100      	str	r1, [sp, #0]
 800e1d0:	462b      	mov	r3, r5
 800e1d2:	4906      	ldr	r1, [pc, #24]	; (800e1ec <__assert_func+0x34>)
 800e1d4:	f000 f80e 	bl	800e1f4 <fiprintf>
 800e1d8:	f000 f889 	bl	800e2ee <abort>
 800e1dc:	4b04      	ldr	r3, [pc, #16]	; (800e1f0 <__assert_func+0x38>)
 800e1de:	461c      	mov	r4, r3
 800e1e0:	e7f3      	b.n	800e1ca <__assert_func+0x12>
 800e1e2:	bf00      	nop
 800e1e4:	2000002c 	.word	0x2000002c
 800e1e8:	0800fcf8 	.word	0x0800fcf8
 800e1ec:	0800fd05 	.word	0x0800fd05
 800e1f0:	0800fd33 	.word	0x0800fd33

0800e1f4 <fiprintf>:
 800e1f4:	b40e      	push	{r1, r2, r3}
 800e1f6:	b503      	push	{r0, r1, lr}
 800e1f8:	4601      	mov	r1, r0
 800e1fa:	ab03      	add	r3, sp, #12
 800e1fc:	4805      	ldr	r0, [pc, #20]	; (800e214 <fiprintf+0x20>)
 800e1fe:	f853 2b04 	ldr.w	r2, [r3], #4
 800e202:	6800      	ldr	r0, [r0, #0]
 800e204:	9301      	str	r3, [sp, #4]
 800e206:	f7ff fc37 	bl	800da78 <_vfiprintf_r>
 800e20a:	b002      	add	sp, #8
 800e20c:	f85d eb04 	ldr.w	lr, [sp], #4
 800e210:	b003      	add	sp, #12
 800e212:	4770      	bx	lr
 800e214:	2000002c 	.word	0x2000002c

0800e218 <_fstat_r>:
 800e218:	b538      	push	{r3, r4, r5, lr}
 800e21a:	2300      	movs	r3, #0
 800e21c:	4d06      	ldr	r5, [pc, #24]	; (800e238 <_fstat_r+0x20>)
 800e21e:	4604      	mov	r4, r0
 800e220:	4608      	mov	r0, r1
 800e222:	4611      	mov	r1, r2
 800e224:	602b      	str	r3, [r5, #0]
 800e226:	f7f4 fdbe 	bl	8002da6 <_fstat>
 800e22a:	1c43      	adds	r3, r0, #1
 800e22c:	d102      	bne.n	800e234 <_fstat_r+0x1c>
 800e22e:	682b      	ldr	r3, [r5, #0]
 800e230:	b103      	cbz	r3, 800e234 <_fstat_r+0x1c>
 800e232:	6023      	str	r3, [r4, #0]
 800e234:	bd38      	pop	{r3, r4, r5, pc}
 800e236:	bf00      	nop
 800e238:	20002158 	.word	0x20002158

0800e23c <_isatty_r>:
 800e23c:	b538      	push	{r3, r4, r5, lr}
 800e23e:	2300      	movs	r3, #0
 800e240:	4d05      	ldr	r5, [pc, #20]	; (800e258 <_isatty_r+0x1c>)
 800e242:	4604      	mov	r4, r0
 800e244:	4608      	mov	r0, r1
 800e246:	602b      	str	r3, [r5, #0]
 800e248:	f7f4 fdbc 	bl	8002dc4 <_isatty>
 800e24c:	1c43      	adds	r3, r0, #1
 800e24e:	d102      	bne.n	800e256 <_isatty_r+0x1a>
 800e250:	682b      	ldr	r3, [r5, #0]
 800e252:	b103      	cbz	r3, 800e256 <_isatty_r+0x1a>
 800e254:	6023      	str	r3, [r4, #0]
 800e256:	bd38      	pop	{r3, r4, r5, pc}
 800e258:	20002158 	.word	0x20002158

0800e25c <memmove>:
 800e25c:	4288      	cmp	r0, r1
 800e25e:	b510      	push	{r4, lr}
 800e260:	eb01 0402 	add.w	r4, r1, r2
 800e264:	d902      	bls.n	800e26c <memmove+0x10>
 800e266:	4284      	cmp	r4, r0
 800e268:	4623      	mov	r3, r4
 800e26a:	d807      	bhi.n	800e27c <memmove+0x20>
 800e26c:	1e43      	subs	r3, r0, #1
 800e26e:	42a1      	cmp	r1, r4
 800e270:	d008      	beq.n	800e284 <memmove+0x28>
 800e272:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e276:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e27a:	e7f8      	b.n	800e26e <memmove+0x12>
 800e27c:	4601      	mov	r1, r0
 800e27e:	4402      	add	r2, r0
 800e280:	428a      	cmp	r2, r1
 800e282:	d100      	bne.n	800e286 <memmove+0x2a>
 800e284:	bd10      	pop	{r4, pc}
 800e286:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e28a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e28e:	e7f7      	b.n	800e280 <memmove+0x24>

0800e290 <_realloc_r>:
 800e290:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e294:	4680      	mov	r8, r0
 800e296:	4614      	mov	r4, r2
 800e298:	460e      	mov	r6, r1
 800e29a:	b921      	cbnz	r1, 800e2a6 <_realloc_r+0x16>
 800e29c:	4611      	mov	r1, r2
 800e29e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e2a2:	f7fa bfeb 	b.w	800927c <_malloc_r>
 800e2a6:	b92a      	cbnz	r2, 800e2b4 <_realloc_r+0x24>
 800e2a8:	f7fa ff80 	bl	80091ac <_free_r>
 800e2ac:	4625      	mov	r5, r4
 800e2ae:	4628      	mov	r0, r5
 800e2b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e2b4:	f000 f822 	bl	800e2fc <_malloc_usable_size_r>
 800e2b8:	4284      	cmp	r4, r0
 800e2ba:	4607      	mov	r7, r0
 800e2bc:	d802      	bhi.n	800e2c4 <_realloc_r+0x34>
 800e2be:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e2c2:	d812      	bhi.n	800e2ea <_realloc_r+0x5a>
 800e2c4:	4621      	mov	r1, r4
 800e2c6:	4640      	mov	r0, r8
 800e2c8:	f7fa ffd8 	bl	800927c <_malloc_r>
 800e2cc:	4605      	mov	r5, r0
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	d0ed      	beq.n	800e2ae <_realloc_r+0x1e>
 800e2d2:	42bc      	cmp	r4, r7
 800e2d4:	4622      	mov	r2, r4
 800e2d6:	4631      	mov	r1, r6
 800e2d8:	bf28      	it	cs
 800e2da:	463a      	movcs	r2, r7
 800e2dc:	f7fa ff3c 	bl	8009158 <memcpy>
 800e2e0:	4631      	mov	r1, r6
 800e2e2:	4640      	mov	r0, r8
 800e2e4:	f7fa ff62 	bl	80091ac <_free_r>
 800e2e8:	e7e1      	b.n	800e2ae <_realloc_r+0x1e>
 800e2ea:	4635      	mov	r5, r6
 800e2ec:	e7df      	b.n	800e2ae <_realloc_r+0x1e>

0800e2ee <abort>:
 800e2ee:	2006      	movs	r0, #6
 800e2f0:	b508      	push	{r3, lr}
 800e2f2:	f000 f833 	bl	800e35c <raise>
 800e2f6:	2001      	movs	r0, #1
 800e2f8:	f7f4 fd07 	bl	8002d0a <_exit>

0800e2fc <_malloc_usable_size_r>:
 800e2fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e300:	1f18      	subs	r0, r3, #4
 800e302:	2b00      	cmp	r3, #0
 800e304:	bfbc      	itt	lt
 800e306:	580b      	ldrlt	r3, [r1, r0]
 800e308:	18c0      	addlt	r0, r0, r3
 800e30a:	4770      	bx	lr

0800e30c <_raise_r>:
 800e30c:	291f      	cmp	r1, #31
 800e30e:	b538      	push	{r3, r4, r5, lr}
 800e310:	4604      	mov	r4, r0
 800e312:	460d      	mov	r5, r1
 800e314:	d904      	bls.n	800e320 <_raise_r+0x14>
 800e316:	2316      	movs	r3, #22
 800e318:	6003      	str	r3, [r0, #0]
 800e31a:	f04f 30ff 	mov.w	r0, #4294967295
 800e31e:	bd38      	pop	{r3, r4, r5, pc}
 800e320:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e322:	b112      	cbz	r2, 800e32a <_raise_r+0x1e>
 800e324:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e328:	b94b      	cbnz	r3, 800e33e <_raise_r+0x32>
 800e32a:	4620      	mov	r0, r4
 800e32c:	f000 f830 	bl	800e390 <_getpid_r>
 800e330:	462a      	mov	r2, r5
 800e332:	4601      	mov	r1, r0
 800e334:	4620      	mov	r0, r4
 800e336:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e33a:	f000 b817 	b.w	800e36c <_kill_r>
 800e33e:	2b01      	cmp	r3, #1
 800e340:	d00a      	beq.n	800e358 <_raise_r+0x4c>
 800e342:	1c59      	adds	r1, r3, #1
 800e344:	d103      	bne.n	800e34e <_raise_r+0x42>
 800e346:	2316      	movs	r3, #22
 800e348:	6003      	str	r3, [r0, #0]
 800e34a:	2001      	movs	r0, #1
 800e34c:	e7e7      	b.n	800e31e <_raise_r+0x12>
 800e34e:	2400      	movs	r4, #0
 800e350:	4628      	mov	r0, r5
 800e352:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e356:	4798      	blx	r3
 800e358:	2000      	movs	r0, #0
 800e35a:	e7e0      	b.n	800e31e <_raise_r+0x12>

0800e35c <raise>:
 800e35c:	4b02      	ldr	r3, [pc, #8]	; (800e368 <raise+0xc>)
 800e35e:	4601      	mov	r1, r0
 800e360:	6818      	ldr	r0, [r3, #0]
 800e362:	f7ff bfd3 	b.w	800e30c <_raise_r>
 800e366:	bf00      	nop
 800e368:	2000002c 	.word	0x2000002c

0800e36c <_kill_r>:
 800e36c:	b538      	push	{r3, r4, r5, lr}
 800e36e:	2300      	movs	r3, #0
 800e370:	4d06      	ldr	r5, [pc, #24]	; (800e38c <_kill_r+0x20>)
 800e372:	4604      	mov	r4, r0
 800e374:	4608      	mov	r0, r1
 800e376:	4611      	mov	r1, r2
 800e378:	602b      	str	r3, [r5, #0]
 800e37a:	f7f4 fcb6 	bl	8002cea <_kill>
 800e37e:	1c43      	adds	r3, r0, #1
 800e380:	d102      	bne.n	800e388 <_kill_r+0x1c>
 800e382:	682b      	ldr	r3, [r5, #0]
 800e384:	b103      	cbz	r3, 800e388 <_kill_r+0x1c>
 800e386:	6023      	str	r3, [r4, #0]
 800e388:	bd38      	pop	{r3, r4, r5, pc}
 800e38a:	bf00      	nop
 800e38c:	20002158 	.word	0x20002158

0800e390 <_getpid_r>:
 800e390:	f7f4 bca4 	b.w	8002cdc <_getpid>

0800e394 <_init>:
 800e394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e396:	bf00      	nop
 800e398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e39a:	bc08      	pop	{r3}
 800e39c:	469e      	mov	lr, r3
 800e39e:	4770      	bx	lr

0800e3a0 <_fini>:
 800e3a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3a2:	bf00      	nop
 800e3a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e3a6:	bc08      	pop	{r3}
 800e3a8:	469e      	mov	lr, r3
 800e3aa:	4770      	bx	lr
